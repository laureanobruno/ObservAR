/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 26.10.2023 16:08:25

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 70304;
#else
constexpr int kTensorArenaSize = 69280;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[28];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00316801224835217, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 47074, -47682, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 8.0918835010379553e-05, 8.0267709563486278e-05, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 82,-42,-52,113,-86,4,-61,65,127,-19,-46,-25,-19,73,-36,25,120,-87,-44,-103,92,72,92,-67,-47,-70,-34,89,17,-81,-7,58, 
  /* [1][0][][] */ 50,87,84,-83,-75,87,-5,22,-38,-31,48,120,126,53,27,5,-39,9,-60,-92,-77,46,23,123,76,64,-52,-21,100,-127,-126,-13, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0034324843436479568, 0.0034048641100525856, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -578, 756, 786, 1132, -678, 835, -666, 712, -496, 967, 733, 752, 784, 699, -1028, -842, -727, 490, -552, -536, -782, 813, -776, 759, -966, -1138, -430, 1130, -913, 836, 1032, -728, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.7778441765112802e-05, 4.1691866499604657e-05, 4.0191484004026279e-05, 4.3257634388282895e-05, 3.9116130210459232e-05, 3.8134243368403986e-05, 4.0385992178926244e-05, 4.1047769627766684e-05, 3.9858019590610638e-05, 3.8153422792674974e-05, 4.3920525058638304e-05, 4.180375617579557e-05, 4.1204933950211853e-05, 4.3880398152396083e-05, 4.207436359138228e-05, 3.9153386751422659e-05, 4.1070041334023699e-05, 4.138507938478142e-05, 3.719042069860734e-05, 3.8485180994030088e-05, 3.7831901863683015e-05, 3.9285550883505493e-05, 4.0539860492572188e-05, 4.196026930003427e-05, 4.0764753066468984e-05, 4.1451083234278485e-05, 4.3069365347037092e-05, 3.9398026274284348e-05, 4.0781891584629193e-05, 4.0642175008542836e-05, 4.3101204937556759e-05, 4.1376424633199349e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -50,-57,99,-1,100,-24,-95,-117,64,-108,-117,-9,47,4,-44,55,-66,-45,-73,-69,-78,-121,-7,106,-123,4,69,-52,110,-4,-24,-92,76,-69,-111,58,-127,-92,-107,29,77,-94,-114,95,53,-119,114,-32, 
  /* [1][0][][] */ -65,42,-55,11,-23,89,50,20,94,-86,-87,109,77,-13,38,78,84,-43,41,127,-32,7,46,39,50,31,-62,119,24,19,109,-50,37,115,1,41,62,74,1,-48,-46,21,-9,-114,-35,45,-49,-60, 
  /* [2][0][][] */ 35,47,-47,107,-6,-48,103,106,-83,99,-21,122,104,-2,97,-96,-80,-31,41,68,-83,-2,122,34,-8,95,81,25,-55,94,93,108,-91,-6,-82,-94,-74,110,120,-12,-102,-62,26,-28,-85,127,-46,-86, 
  /* [3][0][][] */ 91,20,55,-8,-51,69,-100,58,53,33,78,25,108,108,88,2,119,114,-30,33,127,-60,-39,-91,-14,-95,-53,101,50,-73,102,29,-30,-27,7,8,-64,-14,59,47,-8,-82,-68,22,91,49,-23,-56, 
  /* [4][0][][] */ 50,96,-11,44,-38,-35,21,7,51,81,-21,45,18,-48,-22,-78,-3,-9,-72,4,99,-103,78,17,-31,-15,87,-73,-60,24,-79,-64,92,106,6,-115,-60,-18,-127,38,-62,-74,-85,-70,40,100,55,53, 
  /* [5][0][][] */ 78,-85,96,101,57,-108,43,71,127,-108,13,-62,38,117,52,53,40,57,-70,116,47,68,30,-15,-93,-52,-42,-80,65,46,31,-90,-64,17,-63,32,-107,-23,63,38,-78,-40,56,78,-34,35,30,-66, 
  /* [6][0][][] */ 13,-51,103,67,-92,-71,-11,57,-25,-89,-2,-94,76,46,105,-126,42,-3,-6,93,-85,-126,101,50,-71,-90,-22,-68,-36,-122,37,-85,-104,-127,-52,-113,-17,30,-115,71,77,47,15,-30,-95,98,-86,-51, 
  /* [7][0][][] */ 112,76,-24,-29,-57,124,-6,11,127,15,-83,21,67,-74,58,86,46,16,6,124,65,46,6,97,-57,112,42,67,-63,115,-9,47,26,37,76,112,-92,98,3,-14,106,-62,96,64,55,7,87,-110, 
  /* [8][0][][] */ 22,25,-54,-100,50,19,-85,-30,-2,29,49,94,-5,-52,-94,-83,-49,101,-70,8,21,-33,75,101,-127,85,67,68,-78,12,-94,108,116,-43,40,-11,110,-7,-30,61,72,93,-119,-97,11,-27,-1,123, 
  /* [9][0][][] */ 23,30,127,52,98,-106,-52,-103,41,53,1,80,-13,-75,-99,-30,24,22,-81,-68,12,125,-91,-112,122,4,10,30,-11,-60,-72,119,87,1,51,-9,-59,24,-20,-43,64,-74,67,-76,106,41,-88,79, 
  /* [10][0][][] */ -64,85,98,-48,-1,107,112,37,50,41,35,-54,105,87,-17,24,-52,72,-84,-44,-4,39,62,-51,45,63,-127,-88,-31,86,-72,-62,59,105,118,80,-26,20,-17,46,-19,119,-90,-53,-88,-43,-13,-58, 
  /* [11][0][][] */ 96,21,0,113,127,55,66,41,122,101,-60,115,8,-68,41,-49,-75,-101,68,52,43,85,34,-92,-86,-77,-41,83,90,7,38,-6,-105,-55,60,57,-48,87,-14,-42,-11,114,-59,-16,-40,-47,-103,-92, 
  /* [12][0][][] */ 11,76,-39,15,100,20,-19,46,-58,71,-3,21,-29,26,62,-62,-117,-32,-39,-65,40,4,28,109,-49,-33,76,-80,105,28,-21,127,-105,-53,-34,29,10,-57,-3,57,127,54,-94,-60,-41,-73,-57,110, 
  /* [13][0][][] */ 94,-45,107,101,99,116,87,70,80,-83,23,-19,96,78,74,-30,-127,-66,-58,39,74,-13,118,-30,-46,50,-15,31,-67,-69,88,47,18,108,-9,47,-65,-13,36,77,-45,84,-36,-8,-39,36,-19,-32, 
  /* [14][0][][] */ -71,-110,67,49,57,-44,-31,-125,-86,-50,48,60,-47,-95,-104,-97,-56,-74,-4,6,-59,14,-19,42,-124,-87,-48,12,-125,-127,-93,19,83,-38,-50,-12,74,94,15,-124,-24,-121,16,68,47,-123,44,-98, 
  /* [15][0][][] */ 18,-35,-41,62,81,-100,49,-111,45,-15,-89,-1,95,-10,-106,-127,105,8,-103,12,36,7,64,100,64,55,59,79,8,41,51,-116,25,-6,-74,-17,-80,100,98,-84,3,101,-61,-4,26,-92,-27,-78, 
  /* [16][0][][] */ -53,-8,88,-71,28,99,-65,29,34,35,-117,64,-25,-59,-63,-71,127,84,64,52,96,66,-47,40,-47,41,-44,48,-110,1,28,1,-80,63,47,46,-44,39,-60,-80,9,-57,60,111,65,91,122,-2, 
  /* [17][0][][] */ 14,-98,41,91,-29,-108,-51,-86,55,-75,93,56,109,71,-99,61,16,33,84,123,-78,-2,11,-39,39,80,-95,40,117,-37,-17,86,-49,-9,21,9,-37,111,-72,-15,-79,-26,-11,-29,-10,9,69,-127, 
  /* [18][0][][] */ -110,98,107,-83,-17,-127,-119,-2,15,71,-97,-59,-29,28,56,-71,38,-34,53,-34,100,-58,14,-94,21,-112,-1,111,23,28,-8,37,63,-39,-124,-123,-43,28,-46,85,-52,-10,-62,9,-105,39,37,-12, 
  /* [19][0][][] */ 18,25,73,35,55,-92,94,89,91,-70,25,-16,-104,29,-62,57,100,-112,108,55,-28,78,-62,8,73,-87,56,-75,-99,-127,-72,42,109,-91,29,-7,4,-77,-63,-109,41,-125,-91,37,-69,26,91,-101, 
  /* [20][0][][] */ -1,66,63,88,-102,87,9,51,3,3,-100,-5,-17,81,31,-88,-32,-39,-74,-44,13,-58,-89,-85,68,-88,-87,37,13,1,-54,108,127,36,-25,48,34,-45,-29,-126,-100,-48,-104,-84,-30,-78,-53,112, 
  /* [21][0][][] */ 88,85,87,-91,112,-66,89,28,11,-54,-62,48,17,52,-39,-78,-127,-36,33,-1,122,-37,82,-71,70,-75,-57,89,28,15,3,-9,-16,34,-84,-103,125,112,-107,-21,6,21,42,-38,-101,-77,-104,89, 
  /* [22][0][][] */ 18,-55,-83,-106,89,-65,105,44,-94,87,-74,-109,99,-111,-116,-84,31,71,-117,-67,78,-84,18,22,92,-6,-127,100,-64,-82,-69,-116,35,54,4,-3,-1,-21,-70,-114,0,-14,-12,90,52,-121,87,-35, 
  /* [23][0][][] */ 38,-76,18,67,105,-99,17,-86,68,-66,94,78,30,-90,31,-25,62,-41,-97,108,101,-66,109,-21,-1,-1,56,35,80,58,80,-25,-59,54,28,44,104,7,-94,19,-88,13,20,-127,-69,-78,87,11, 
  /* [24][0][][] */ -94,-62,-119,-84,-100,-127,-84,-108,51,99,65,29,96,45,-55,-125,-96,26,9,-69,78,-95,-71,-54,35,-44,57,43,90,37,-12,-79,-17,-6,32,11,-68,-100,44,-34,-88,-108,85,-11,4,-53,26,55, 
  /* [25][0][][] */ -103,-76,-96,-30,69,-88,-118,32,29,-127,-59,0,49,-22,-127,-42,-88,38,12,-125,46,61,-32,-74,-6,-72,-120,18,55,-106,17,91,69,-125,22,51,74,-80,-44,-38,-102,78,-121,-18,75,20,42,14, 
  /* [26][0][][] */ 73,-113,-25,-18,-96,-9,-15,-17,-105,-90,98,80,-78,-49,5,-19,127,51,-74,-67,8,62,90,8,43,54,35,39,7,1,-80,-6,-5,-62,-96,-98,-65,74,-49,96,-97,90,49,53,-44,68,-19,118, 
  /* [27][0][][] */ 34,23,-43,-85,-104,-51,-53,4,62,122,60,-87,-12,79,104,-19,85,6,85,-63,-74,33,-7,-7,-94,58,-88,12,80,48,-12,11,83,85,-71,-65,-69,-48,-96,104,-80,31,51,38,122,46,87,127, 
  /* [28][0][][] */ 71,-19,69,27,-127,-79,-109,-88,-38,-114,43,53,-94,-100,-12,85,81,93,-87,56,-42,7,-122,-88,-126,64,-99,-75,-87,-87,-17,-34,-117,1,62,55,1,-122,-56,15,86,29,-109,34,-120,-24,0,31, 
  /* [29][0][][] */ 75,76,64,-41,-77,36,-110,30,103,9,-80,-69,116,-79,-38,-41,-73,124,49,-52,-58,-15,76,11,-24,17,-18,-21,-93,16,125,10,75,11,-54,-37,9,108,9,102,57,109,-26,105,24,127,-29,-1, 
  /* [30][0][][] */ 45,-45,-38,52,-76,41,-41,4,125,2,19,-22,-76,34,74,21,7,51,104,-76,54,-75,-86,29,-89,40,-47,127,5,-83,-69,23,-63,-51,-92,-31,32,4,12,36,100,-61,8,110,117,-23,110,74, 
  /* [31][0][][] */ 91,-97,26,88,38,53,-68,-105,-40,-27,-88,-92,86,-127,-56,98,-38,-89,30,39,52,26,-38,94,31,-121,57,27,-80,-82,36,96,39,11,-96,-17,86,-41,-77,-118,48,-77,-39,52,25,-59,-32,26, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021759660448879004, 0.0024013717193156481, 0.0023149526678025723, 0.0024915570393204689, 0.0022530143614858389, 0.0021964595653116703, 0.0023261560127139091, 0.0023642729502171278, 0.0022957457695156336, 0.0021975641138851643, 0.002529738238081336, 0.0024078164715319872, 0.0023733254056423903, 0.0025274269282817841, 0.0024234028533101082, 0.002255160128697753, 0.0023655558470636606, 0.002383701503276825, 0.0021420971024781466, 0.002216672757640481, 0.0021790452301502228, 0.0022627725265920162, 0.00233501847833395, 0.0024168312083929777, 0.0023479717783629894, 0.0023875031620264053, 0.0024807131849229336, 0.0022692510392516851, 0.0023489589802920818, 0.0023409116547554731, 0.0024825469590723515, 0.002383203012868762, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 3008, -2598, 6416, 3410, 6492, -77, 4219, 7481, -3724, -2562, -1721, 16181, 5606, 5513, 8867, -8580, -5284, 13226, 3658, 7906, 7480, 34666, 33012, 1436, -2560, 2879, -1625, -1290, 4093, 3346, 9741, 13240, -1395, 594, 14130, 6604, 12780, 3989, 2372, -2722, 7130, -3439, 15669, -355, 397, 2565, -3839, 8489, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00011222845205338672, 0.00014234542322810739, 0.00011248287773923948, 0.0001676941174082458, 8.2175894931424409e-05, 0.00013341102749109268, 8.6089130491018295e-05, 0.00010208920866716653, 0.00011314344010315835, 0.00014366583491209894, 0.00018374607316218317, 4.9068505177274346e-05, 0.00012036629777867347, 0.00010210823529632762, 0.00010174942872254178, 6.8597080826293677e-05, 0.00010410648246761411, 7.3945629992522299e-05, 0.00016175044584088027, 0.00010128618305316195, 0.00010548669524723664, 3.0259765480877832e-05, 3.0567196517949924e-05, 0.00012621577479876578, 0.00016080474597401917, 8.2814389315899462e-05, 9.2146365204825997e-05, 0.00015353031631093472, 0.00011247304064454511, 0.00013179784582462162, 7.1005757490638644e-05, 6.518323061754927e-05, 0.00011552720388863236, 0.00016520757344551384, 6.2327853811439127e-05, 9.4657822046428919e-05, 6.477456190623343e-05, 0.00015302350220736116, 0.00015285477275028825, 0.00012725240958388895, 7.7242395491339266e-05, 0.00013163771654944867, 5.4929216275922954e-05, 0.00019454745051916689, 0.00019176994101144373, 0.00019935031014028937, 0.00012134537973906845, 8.7204207375179976e-05, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -9,5,127,-21,-5,52,-1,-76, 
  /* [1][0][][] */ 95,-68,70,-84,-12,-66,127,23, 
  /* [2][0][][] */ 67,59,84,-82,-65,31,127,-33, 
  /* [3][0][][] */ 7,33,-1,-17,14,-73,127,14, 
  /* [4][0][][] */ 127,-42,-66,-35,-111,-75,-21,79, 
  /* [5][0][][] */ 22,67,127,-6,27,-38,24,-45, 
  /* [6][0][][] */ 109,105,-24,127,-87,22,29,102, 
  /* [7][0][][] */ -33,-3,-5,41,29,-127,-125,-32, 
  /* [8][0][][] */ 114,80,-53,89,-70,23,-127,-50, 
  /* [9][0][][] */ 127,-28,-34,43,7,-37,18,-90, 
  /* [10][0][][] */ 69,21,-6,13,-26,127,35,6, 
  /* [11][0][][] */ 127,-17,-17,-112,86,-70,-47,83, 
  /* [12][0][][] */ -56,109,68,-31,7,58,-78,127, 
  /* [13][0][][] */ 127,-8,-84,5,35,-76,23,-100, 
  /* [14][0][][] */ 102,35,-6,-14,-127,24,-71,-9, 
  /* [15][0][][] */ 24,4,-110,-42,-127,-45,113,114, 
  /* [16][0][][] */ 1,-49,127,5,122,-58,-75,-28, 
  /* [17][0][][] */ 19,-20,76,-14,127,-51,-71,-5, 
  /* [18][0][][] */ 103,-45,127,41,-23,34,-42,-8, 
  /* [19][0][][] */ 63,51,46,-57,-45,-127,25,-35, 
  /* [20][0][][] */ 41,-36,55,127,9,-65,-79,86, 
  /* [21][0][][] */ 94,-16,-70,-127,56,-59,9,106, 
  /* [22][0][][] */ -54,-121,-73,-51,45,-43,127,-58, 
  /* [23][0][][] */ -16,17,34,-48,-105,-127,2,-30, 
  /* [24][0][][] */ 127,2,64,43,-6,-22,-98,65, 
  /* [25][0][][] */ 120,53,-8,-90,-12,-2,-40,127, 
  /* [26][0][][] */ -91,-25,33,-127,114,0,-48,-91, 
  /* [27][0][][] */ 104,127,-12,-49,9,58,31,6, 
  /* [28][0][][] */ 13,127,-14,17,-5,-60,-1,105, 
  /* [29][0][][] */ 121,34,94,127,43,-49,-122,70, 
  /* [30][0][][] */ 127,-99,-83,110,45,-1,-65,96, 
  /* [31][0][][] */ 98,-84,28,46,-77,-99,-127,50, 
  /* [32][0][][] */ -86,-75,15,-127,63,-25,-23,-67, 
  /* [33][0][][] */ 21,9,24,38,27,-81,127,52, 
  /* [34][0][][] */ -77,63,119,-97,127,-65,-86,89, 
  /* [35][0][][] */ -72,28,11,127,-9,127,47,-15, 
  /* [36][0][][] */ 83,26,-27,-127,46,-5,20,40, 
  /* [37][0][][] */ 38,51,-18,13,-80,127,68,54, 
  /* [38][0][][] */ -24,-68,25,110,17,52,6,127, 
  /* [39][0][][] */ 15,4,-127,46,-10,-41,-25,65, 
  /* [40][0][][] */ 72,10,-89,-3,-44,60,-62,127, 
  /* [41][0][][] */ 32,6,11,-41,-108,-127,-9,3, 
  /* [42][0][][] */ -81,53,-79,99,-6,93,-34,-127, 
  /* [43][0][][] */ -5,-3,-34,-127,-27,5,-11,-64, 
  /* [44][0][][] */ 62,21,27,62,28,127,-52,31, 
  /* [45][0][][] */ 0,71,-20,14,127,-29,-76,-15, 
  /* [46][0][][] */ 79,-83,8,127,84,37,-61,87, 
  /* [47][0][][] */ -19,-79,47,-18,127,21,42,22, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0022739495616406202, 0.0028841733001172543, 0.0022791046649217606, 0.0033977834973484278, 0.001665030955336988, 0.002703146543353796, 0.0017443200340494514, 0.0020685102790594101, 0.0022924889344722033, 0.0029109274037182331, 0.0037230246234685183, 0.00099421583581715822, 0.0024388369638472795, 0.0020688958466053009, 0.0020616257097572088, 0.0013898997567594051, 0.0021093839313834906, 0.0014982710126787424, 0.0032773539423942566, 0.0020522396080195904, 0.0021373494528234005, 0.00061311706667765975, 0.00061934621771797538, 0.0025573577731847763, 0.0032581922132521868, 0.0016779679572209716, 0.0018670505378395319, 0.0031107994727790356, 0.0022789053618907928, 0.0026704606134444475, 0.0014387038536369801, 0.0013207290321588516, 0.0023407882545143366, 0.0033474015071988106, 0.001262873993255198, 0.0019179371884092689, 0.0013124487595632672, 0.0031005304772406816, 0.0030971115920692682, 0.0025783618912100792, 0.0015650693094357848, 0.0026672161184251308, 0.0011129643535241485, 0.0039418800733983517, 0.0038856025785207748, 0.0040391944348812103, 0.0024586748331785202, 0.0017669135704636574, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -15941, -3637, -1219, -15666, 3501, -4004, 17653, 15174, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00011170835932716727, 0.00012150316615588963, 5.9643869462888688e-05, 9.1150504886172712e-05, 5.5756208894308656e-05, 9.8132484708912671e-05, 5.7837729400489479e-05, 9.6663286967668682e-05, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-28,21,-25,29,59,4,34,108,-79,54,7,-46,70,15,-51,16,-26,-29,-12,6,-54,14,-25,-61,-30,-44,-34,-33,75,-27,32,30,-44,14,-25,59,-65,-52,2,23,-15,-78,-5,56,-31,52,-33, 
  /* [1][0][][] */ 46,-4,-6,64,57,64,18,32,71,-85,-5,1,39,20,-41,-18,-33,-45,-72,-1,9,-46,47,74,-8,-60,-3,42,-24,53,-52,127,-22,41,-23,-22,-63,-9,-12,-28,-52,-15,-38,39,23,-9,3,-90, 
  /* [2][0][][] */ -31,-19,-88,29,-88,-38,-4,53,-101,-78,-81,-27,-37,42,-117,1,67,-80,37,-25,127,81,-31,0,56,92,21,-103,-44,2,70,10,-26,48,78,-72,68,0,80,102,-37,95,39,-5,-86,67,-40,78, 
  /* [3][0][][] */ 0,-24,-13,39,-21,8,-9,41,78,94,-127,-32,22,-16,-25,73,-54,-18,-8,51,-23,1,74,21,5,16,-48,57,-37,21,-38,-32,10,25,31,20,50,-7,49,-3,-56,84,64,23,32,-14,-36,-36, 
  /* [4][0][][] */ -22,-65,14,-48,-3,82,-62,-64,-3,-43,75,36,-51,-28,-10,20,68,16,-23,37,-75,-32,110,-17,-87,-21,-1,18,23,-19,-9,57,-56,50,-16,49,-39,41,-2,24,-31,37,-34,44,127,58,-17,8, 
  /* [5][0][][] */ -65,-61,56,-127,-23,16,-35,-54,-4,68,-50,67,-76,21,52,5,66,52,66,10,30,-5,-16,-61,46,-72,5,-46,-11,-39,37,-71,-12,-39,52,-3,-14,27,41,57,91,7,19,-22,-10,-6,-25,32, 
  /* [6][0][][] */ -63,-61,34,34,-54,-69,5,-66,-106,20,-127,46,20,-53,55,23,-40,26,14,124,-16,-3,81,49,-84,-24,60,14,22,-28,-39,-72,-40,62,76,-103,-48,87,53,-22,-68,57,76,-70,-7,-54,-46,9, 
  /* [7][0][][] */ 21,-7,16,-10,14,30,-41,-48,-127,-28,98,23,3,-23,26,1,19,45,-2,-15,-48,11,-7,-45,32,4,-45,16,-14,-22,-33,-55,-106,-59,-39,9,57,-30,-26,-3,56,9,44,-23,22,-46,38,18, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0072871041484177113, 0.0079260515049099922, 0.0038907660637050867, 0.0059460476040840149, 0.0036371611058712006, 0.006401505321264267, 0.0037729456089437008, 0.00630566431209445, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -1231, 235, 10236, 2055, -662, -5027, -2091, 12055, 6486, -2686, -3952, -5436, -1187, 13661, 10146, 279, 6715, -5338, 5126, -2045, 15233, -2820, -1867, -1445, 3284, -3094, -108, -2922, 7008, -20786, -4196, 907, -3851, -1160, -896, -1465, 9509, -4546, 554, -10654, -2586, 5543, -6255, -829, 1905, -3981, 6963, -2946, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00023526551376562566, 0.00016997232160065323, 9.6627649327274412e-05, 0.00010849691898329183, 0.00021287973504513502, 0.0001188756141345948, 0.00023091110051609576, 0.0001210117552545853, 0.00016989122377708554, 0.00052145402878522873, 0.00027067994233220816, 8.3898718003183603e-05, 0.00030241522472351789, 9.312228939961642e-05, 0.00012955076817888767, 0.00020881708769593388, 0.000139052644954063, 0.00011699065362336114, 0.00013199033855926245, 0.00027569101075641811, 0.00010073105659103021, 0.00023569798213429749, 0.00022268801694735885, 0.00021318552899174392, 0.00021938921418040991, 0.00038524987758137286, 0.0002910642942879349, 0.00033722884836606681, 0.00012203511869302019, 0.00011719012400135398, 0.00016297925321850926, 0.00015933722897898406, 9.6329626103397459e-05, 0.00036089023342356086, 0.00010565726552158594, 0.00016751284420024604, 0.00013764674076810479, 0.00011574786913115531, 8.1291080277878791e-05, 0.00010792908869916573, 0.00025522671057842672, 0.00013928812404628843, 0.00020301740732975304, 0.00015255153994075954, 0.00015654622984584421, 8.5590821981895715e-05, 0.00015947557403706014, 0.00018341545364819467, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 78,77,-40,57,-6,-11,-45,6,33,-74,36,2,12,-94,-30,31,106,31,-76,-2,76,13,-27,-13,65,28,15,2,-71,18,-2,-56,125,14,102,15,-45,25,127,22,-72,86,-97,-62,38,-85,-46,-2, 102,127,-99,96,14,59,-64,-127,47,38,127,27,-14,-9,-15,-13,-70,127,-94,34,53,127,43,-22,22,8,9,127,-127,69,-17,-127,13,-30,28,83,-87,127,118,35,-124,-72,86,-8,8,31,-127,80, 54,35,-26,27,-3,-12,-31,13,29,-81,33,1,15,-78,-30,-30,94,-20,-40,-13,67,13,-26,46,46,63,11,-3,-21,19,-10,-34,118,15,73,16,-25,19,103,-8,-44,85,65,59,41,105,4,-22, 
  /* [0][1][][] */ -19,-42,-127,112,22,59,68,-27,38,47,-45,127,127,2,-35,-82,-28,91,73,-16,-109,22,32,-109,22,44,17,18,0,72,37,53,74,127,37,27,-85,10,-47,84,83,3,90,-127,15,-91,-9,127, 38,-89,-60,-127,127,22,127,-84,-127,127,2,62,-112,127,127,-20,-127,75,11,127,24,1,127,-10,-127,127,31,-87,-79,47,-127,106,127,-103,41,127,127,66,-7,127,127,-72,-21,1,126,-71,-2,46, -8,-49,-120,58,-12,127,45,-30,36,32,-39,77,-18,18,-39,-23,-67,98,127,-42,-127,13,-60,127,3,16,22,35,57,61,55,39,25,-9,-40,-104,-39,-24,-2,30,43,75,-19,124,-8,127,-28,87, 
  /* [0][2][][] */ -33,-17,14,28,-9,10,-5,3,32,-38,3,5,37,-85,-46,31,101,-2,9,10,-73,13,-2,-6,18,11,-9,6,13,15,56,10,30,18,127,-8,-13,42,104,40,3,81,127,-28,-51,-105,6,-22, -127,-9,-71,45,-120,8,-56,-12,24,92,-79,49,-22,-36,-20,127,-89,41,-103,-35,-88,29,5,-31,-16,74,-127,-21,-48,127,78,26,50,-20,22,26,-30,36,-41,48,-74,-127,-116,-25,-127,69,-92,80, -28,-28,14,15,12,-6,-10,-2,24,-67,-10,-14,-9,-73,-28,9,107,-45,92,25,-69,-13,10,41,19,-23,-5,-4,20,14,52,10,58,10,73,29,-7,40,106,4,5,90,-43,59,-33,98,6,-34, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.011336697265505791, 0.0081904260441660881, 0.0046561793424189091, 0.0052281217649579048, 0.010257997550070286, 0.005728237796574831, 0.011126872152090073, 0.0058311717584729195, 0.0081865182146430016, 0.025127211585640907, 0.013043205253779888, 0.0040428126230835915, 0.014572427608072758, 0.004487267229706049, 0.006242639385163784, 0.010062231682240963, 0.0067005050368607044, 0.0056374077685177326, 0.0063601951114833355, 0.013284672982990742, 0.0048539093695580959, 0.011357536539435387, 0.010730627924203873, 0.010272732935845852, 0.010571668855845928, 0.018563967198133469, 0.014025463722646236, 0.016249986365437508, 0.0058804843574762344, 0.0056470194831490517, 0.0078534521162509918, 0.0076779546216130257, 0.0046418183483183384, 0.01739015243947506, 0.0050912876613438129, 0.00807191152125597, 0.0066327587701380253, 0.0055775218643248081, 0.0039171585813164711, 0.0052007595077157021, 0.012298563495278358, 0.0067118518054485321, 0.009782763198018074, 0.0073509737849235535, 0.0075434651225805283, 0.0041243494488298893, 0.0076846210286021233, 0.0088382074609398842, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 33159, 7992, 1508, 1428, 6533, 2647, 8073, 4466, 3849, -9360, 17096, 1372, 11646, 2300, 5515, 2925, 9663, -1051, 14575, 614, 3562, -1171, 4266, 8971, 2656, -5382, 3092, 15442, 930, 8505, 2158, 14684, 812, 6861, -805, -1611, 3087, 2907, 251, 1869, 19619, -1343, 17624, 5001, 1499, 6157, 6261, -2237, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 3.1983257940737531e-05, 0.00010324047616450116, 0.00015425009769387543, 0.00016131660959217697, 0.0001095112384064123, 0.00016517165931873024, 9.6908472187351435e-05, 0.00014553738583344966, 0.00012190957932034507, 7.8791112173348665e-05, 5.7230005040764809e-05, 0.00016084016533568501, 7.0894668169785291e-05, 0.00015434304077643901, 0.00012597342720255256, 0.00011421601084293798, 7.4636656790971756e-05, 0.00017536098312120885, 6.3600164139643312e-05, 0.00012583174975588918, 0.00017961501725949347, 0.00010265203309245408, 0.00012960573076270521, 8.3250990428496152e-05, 0.00014198078133631498, 0.00011718017776729539, 0.00015385026927106082, 6.019058491801843e-05, 0.00020590169879142195, 9.5746356237214059e-05, 0.00013221568951848894, 6.3857383793219924e-05, 0.00013697512622456998, 0.00011393817840144038, 0.00012868842168245465, 0.00021444160665851086, 0.0001821352489059791, 0.00013765678158961236, 0.00017245661001652479, 0.00017841595399659127, 4.7987923608161509e-05, 0.00015167640231084079, 4.863952926825732e-05, 9.5641145890112966e-05, 0.000125064019812271, 0.00012091717508155853, 9.8436270491220057e-05, 0.0001276441034860909, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,39,-23,-6,58,24,14,-39, 
  /* [1][0][][] */ -1,-50,-22,-14,-47,-127,9,20, 
  /* [2][0][][] */ -81,75,12,-61,-48,49,-73,127, 
  /* [3][0][][] */ 58,39,52,-17,-42,-127,40,-25, 
  /* [4][0][][] */ 7,63,-127,38,-113,77,51,32, 
  /* [5][0][][] */ -27,43,24,-29,-78,-127,-54,-12, 
  /* [6][0][][] */ -61,127,94,-33,-70,-33,22,-34, 
  /* [7][0][][] */ -2,-3,34,61,-4,-127,-9,55, 
  /* [8][0][][] */ 127,24,-71,67,-74,-58,-110,-13, 
  /* [9][0][][] */ 102,-39,-70,-70,14,-27,-42,127, 
  /* [10][0][][] */ -94,0,3,127,10,73,27,-96, 
  /* [11][0][][] */ 31,14,56,-24,11,120,127,104, 
  /* [12][0][][] */ -55,-75,-51,-81,127,-37,-9,28, 
  /* [13][0][][] */ -32,-3,-10,56,12,-127,55,80, 
  /* [14][0][][] */ 81,89,103,28,61,-127,-81,-20, 
  /* [15][0][][] */ -53,73,127,72,-14,16,51,-84, 
  /* [16][0][][] */ -118,-56,42,-91,127,14,-51,2, 
  /* [17][0][][] */ 43,-47,-47,-3,-15,127,-32,46, 
  /* [18][0][][] */ -32,127,90,-55,-56,57,79,-85, 
  /* [19][0][][] */ 24,117,96,127,-21,39,33,27, 
  /* [20][0][][] */ 18,5,60,-127,-70,-9,68,-10, 
  /* [21][0][][] */ -99,83,48,-127,115,77,125,6, 
  /* [22][0][][] */ 68,-37,-95,61,45,-43,-61,127, 
  /* [23][0][][] */ 36,-79,-127,-31,61,-15,-60,84, 
  /* [24][0][][] */ 50,-25,-86,10,-49,40,-127,120, 
  /* [25][0][][] */ -10,-17,58,12,127,-13,-90,-41, 
  /* [26][0][][] */ 17,92,127,-32,-34,-12,43,-59, 
  /* [27][0][][] */ -31,39,116,-74,29,9,83,-127, 
  /* [28][0][][] */ 51,-14,95,127,76,-31,37,99, 
  /* [29][0][][] */ 69,84,118,29,-71,29,-127,89, 
  /* [30][0][][] */ 51,0,-74,51,-127,-29,-46,57, 
  /* [31][0][][] */ 29,127,93,-60,-85,39,116,-123, 
  /* [32][0][][] */ 60,-8,-13,34,120,127,42,-33, 
  /* [33][0][][] */ 24,-34,-127,11,21,-24,-37,76, 
  /* [34][0][][] */ 28,-60,23,-127,-7,70,-15,17, 
  /* [35][0][][] */ -18,18,84,-1,15,-127,4,-24, 
  /* [36][0][][] */ -9,14,-28,-127,-11,14,16,-36, 
  /* [37][0][][] */ 73,-21,-29,-98,-83,127,-63,-82, 
  /* [38][0][][] */ 75,-59,-19,90,52,29,-27,127, 
  /* [39][0][][] */ 127,82,35,67,-4,87,-48,-4, 
  /* [40][0][][] */ 54,-100,-127,-41,21,9,-49,113, 
  /* [41][0][][] */ -15,-60,-127,-106,3,-70,-33,-11, 
  /* [42][0][][] */ 63,112,107,127,-97,-27,23,70, 
  /* [43][0][][] */ 127,-31,-117,-106,-72,-46,35,56, 
  /* [44][0][][] */ -16,97,113,-77,-110,-21,97,-127, 
  /* [45][0][][] */ 45,24,-127,56,-48,44,22,79, 
  /* [46][0][][] */ 51,-40,-81,-127,24,-26,-38,45, 
  /* [47][0][][] */ 90,-118,127,-68,79,-25,2,14, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00061707576969638467, 0.0019918920006603003, 0.0029760568868368864, 0.0031123962253332138, 0.0021128782536834478, 0.0031867744401097298, 0.0018697241321206093, 0.0028079564217478037, 0.0023520882241427898, 0.0015201730420812964, 0.0011041791876778007, 0.0031032038386911154, 0.0013678213581442833, 0.0029778501484543085, 0.0024304948747158051, 0.0022036507725715637, 0.0014400181826204062, 0.0033833642955869436, 0.0012270832667127252, 0.0024277614429593086, 0.0034654403571039438, 0.0019805387128144503, 0.0025005755014717579, 0.0016062206123024225, 0.0027393363416194916, 0.0022608404979109764, 0.0029683427419513464, 0.0011612997623160481, 0.0039726081304252148, 0.0018473026575520635, 0.0025509314145892859, 0.0012320459354668856, 0.0026427586562931538, 0.0021982903126627207, 0.0024828773457556963, 0.0041373744606971741, 0.0035140649415552616, 0.0026559103280305862, 0.0033273280132561922, 0.0034423060715198517, 0.00092586514074355364, 0.002926400862634182, 0.00093843706417828798, 0.0018452727235853672, 0.0024129492230713367, 0.0023329411633312702, 0.0018992009572684765, 0.0024627284146845341, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -12037, -34209, 1072, 6979, -16288, 49, -24633, -769, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00016010533727239817, 6.6052736656274647e-05, 5.4035994253354147e-05, 7.4154108006041497e-05, 6.7471235524863005e-05, 9.3561742687597871e-05, 5.8100438764085993e-05, 8.6316955275833607e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 41,51,-75,52,17,23,-91,-25,2,-24,0,-33,-17,3,47,8,48,-17,49,-18,16,-30,41,5,10,-21,-16,21,-16,-2,-20,3,44,24,23,13,127,54,27,-28,0,-20,-3,-18,74,25,17,-48, 
  /* [1][0][][] */ 58,20,15,-7,32,93,-8,-27,36,64,-31,-75,115,-11,21,48,27,31,24,-89,127,-18,46,61,47,30,46,27,34,-70,63,70,61,102,10,122,65,27,25,23,89,22,37,29,27,52,107,-71, 
  /* [2][0][][] */ -16,20,79,126,-60,19,0,57,27,77,31,-90,-49,127,18,54,-94,-94,93,0,8,61,-69,-89,-22,-50,21,-15,-110,15,7,-12,-44,-24,-89,-56,20,33,-88,-20,-27,-68,-34,24,81,-86,-30,35, 
  /* [3][0][][] */ -30,55,-76,-9,17,-83,6,69,106,-87,-43,15,-11,-17,10,68,25,9,-8,-27,-8,26,-78,42,-26,-28,43,-9,69,-38,41,-58,33,-16,-27,-52,-127,-3,-85,16,-24,-63,39,-2,-57,15,-11,-34, 
  /* [4][0][][] */ 58,-19,28,-22,-63,62,32,58,-119,-44,53,40,70,-58,-71,-58,80,68,66,-34,12,-98,-23,37,-35,1,-54,-127,-54,-50,85,34,79,7,111,82,64,62,49,31,6,30,-52,-24,90,69,87,-43, 
  /* [5][0][][] */ 40,78,21,97,22,20,-51,-95,-101,27,-19,5,21,54,33,-68,70,107,-22,36,-20,-68,-23,-72,-99,-80,-45,54,-5,46,-28,42,-4,-78,70,10,-34,127,-29,-111,-14,-41,-10,-37,-4,-13,-35,91, 
  /* [6][0][][] */ 103,56,2,127,-84,18,19,59,13,-80,70,89,73,-34,-20,-47,56,32,-69,19,68,-29,-29,-2,1,69,-46,-37,19,-34,58,50,13,-45,2,82,99,-74,12,3,-78,72,-102,56,58,99,104,-47, 
  /* [7][0][][] */ 15,19,127,45,-30,62,-86,15,-41,88,-7,-9,39,62,20,-8,-46,-13,-61,10,-8,37,5,-34,-13,47,51,-9,1,-4,14,-14,-90,-17,59,27,89,-5,32,-13,-25,-29,-34,-52,-3,-31,5,22, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0068044769577682018, 0.0028072413988411427, 0.0022965297102928162, 0.0031515494920313358, 0.0028675275389105082, 0.0039763739332556725, 0.0024692686274647713, 0.0036684705410152674, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 19386, -20658, -1341, 2099, -677, 13627, 3899, -2570, -9102, 4293, -2597, -2420, -8323, -13586, 5006, 1479, -11624, 42660, -3535, -15916, 16914, -1249, -1238, 414, -838, -784, -5216, -1475, -1568, 1908, -2, 25093, 20455, -677, 8048, 20706, -1013, 19923, 973, -134, -3859, -9829, -1652, 1558, 2587, 32991, 16452, -5332, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 6.0807353293057531e-05, 6.5448133682366461e-05, 0.0007248249021358788, 0.00022004365746397525, 0.00016643716662656516, 0.00010217132512480021, 9.258580394089222e-05, 0.00026370323030278087, 7.1921625931281596e-05, 0.00023300852626562119, 0.0001966629788512364, 9.420868445886299e-05, 0.00014565388846676797, 9.0499837824609131e-05, 0.00012558452726807445, 6.0723828937625512e-05, 5.9741432778537273e-05, 3.9189053495647386e-05, 0.00033059474662877619, 4.7921228542691097e-05, 8.0572885053697973e-05, 0.00034621247323229909, 0.00015238583728205413, 0.00015725509729236364, 0.0001985062554012984, 0.00015888603229541332, 0.00014013834879733622, 0.0002345093380426988, 0.00020670439698733389, 0.00013831508113071322, 8.7664135207887739e-05, 7.0157191657926887e-05, 7.2795177402440459e-05, 0.00016882554336916655, 9.2839880380779505e-05, 9.157598833553493e-05, 0.00040904624620452523, 0.00011791689757956192, 7.4932999268639833e-05, 0.00029524057754315436, 0.00010569962614681572, 0.0001113240941776894, 0.00018297939095646143, 0.00013538802159018815, 0.00017286273941863328, 4.4778764276998118e-05, 9.6226365712936968e-05, 0.0001373948180116713, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -60,-10,53,13,127,-62,17,14,5,23,25,-25,-5,9,-45,20,87,-52,-13,59,-28,14,-42,-4,-15,5,35,-47,-22,127,38,-87,-44,93,113,-55,10,-55,-127,-28,15,-21,-6,-73,-5,-36,-112,32, -71,89,-11,38,-6,-93,109,-12,76,9,59,127,45,127,-7,38,89,-103,5,105,-25,-18,101,-95,6,54,-96,20,-22,-99,127,-127,-127,-94,4,-18,-59,-40,-112,20,-50,-28,24,-127,19,-79,34,41, -41,-7,21,4,49,-60,15,-1,15,18,-3,-60,-20,-8,-40,32,55,-36,-10,68,-27,5,-65,4,27,-1,26,-93,-31,45,-44,-85,22,-7,97,-40,14,-29,-91,8,21,-6,4,-53,-14,-84,-127,-30, 
  /* [0][1][][] */ -127,101,-19,-61,13,-91,11,-4,28,11,68,49,60,73,-49,32,127,-127,19,81,-29,-47,-86,-37,-127,-3,-25,15,-9,-2,86,-56,-81,127,-110,-64,36,-64,50,55,-91,37,-68,50,-11,-127,15,-48, -8,127,127,127,-35,89,-127,127,127,-127,-37,77,127,84,127,-113,-50,-113,127,12,-127,127,127,4,91,126,81,127,127,-87,121,20,-76,-103,-38,-127,127,127,110,56,-43,127,-19,71,127,55,-15,-127, -90,64,-46,-47,-52,-127,22,-28,-4,0,125,37,41,70,-45,127,93,-118,-7,96,33,-71,-93,-35,23,-19,-19,24,0,14,74,-40,4,-30,-127,-62,23,-66,57,-127,-64,35,127,63,-28,-116,-14,97, 
  /* [0][2][][] */ -8,-25,16,-11,27,-43,33,4,39,20,127,29,10,-14,-29,112,80,-47,-41,11,-16,7,-42,44,-17,-5,-33,-19,13,62,-8,-13,-8,46,-57,25,-42,-54,62,-33,82,-8,-8,4,-22,17,9,-34, -55,118,16,14,-84,-112,83,-77,74,15,36,-63,-31,14,-45,119,71,7,1,127,-56,13,80,127,20,-127,127,10,24,-51,-54,-104,17,-43,-58,-104,-68,-77,33,37,127,62,-37,38,-27,-75,-103,-7, 56,-11,33,-3,-9,-33,26,9,35,17,77,10,33,-12,-19,81,52,-31,-51,3,-17,-2,-42,37,13,-9,-24,-52,3,-6,-20,5,4,11,-20,28,-35,-32,60,5,52,-1,27,-4,-23,-61,17,24, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0039761923253536224, 0.0042796526104211807, 0.047396294772624969, 0.014388652518391609, 0.010883324779570103, 0.0066809817217290401, 0.00605418486520648, 0.017243551090359688, 0.0047029545530676842, 0.015236425213515759, 0.012859790585935116, 0.006160304881632328, 0.0095243062824010849, 0.005917783360928297, 0.0082119712606072426, 0.00397073058411479, 0.0039064916782081127, 0.0025625717826187611, 0.0216175876557827, 0.0031335686799138784, 0.0052686603739857674, 0.022638829424977303, 0.0099645080044865608, 0.010282909497618675, 0.012980322353541851, 0.010389556176960468, 0.0091636450961232185, 0.015334563329815865, 0.013516398146748543, 0.0090444218367338181, 0.0057323570363223553, 0.0045875781215727329, 0.0047600758261978626, 0.011039501056075096, 0.0060707987286150455, 0.005988153163343668, 0.026747530326247215, 0.0077105849049985409, 0.0048998682759702206, 0.019305778667330742, 0.006911697331815958, 0.0072794812731444836, 0.011965020559728146, 0.008853021077811718, 0.011303492821753025, 0.0029280828312039375, 0.0062922411598265171, 0.0089842453598976135, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 563, 6968, -9428, 6307, 3941, 7037, 3820, 13133, 11965, 8353, -2267, -203, 1551, 3930, 3912, -1221, 210, 5828, 11381, 562, 2830, 11549, 4040, 6590, 20693, 7782, 2082, 11247, 2488, 5206, -2570, 8391, 1752, 10693, 9277, 6238, 46966, 12397, 6560, 18605, 2960, 886, 5443, 2292, 4488, 2254, 3192, 4133, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00027973335818387568, 0.00011188328062416986, 8.4326471551321447e-05, 9.9992364994250238e-05, 0.00012965401401743293, 8.9342458522878587e-05, 0.00011936520604649559, 7.0469555794261396e-05, 7.464744703611359e-05, 8.8230182882398367e-05, 0.00015543396875727922, 0.0001395271101500839, 0.00015935931878630072, 0.00015051051741465926, 0.00012797664385288954, 9.4261682534124702e-05, 0.0001576065260451287, 0.00012068778596585616, 7.9211633419618011e-05, 0.00017701448814477772, 0.00016436328587587923, 6.9795001763850451e-05, 0.00012970033276360482, 0.00010209226456936449, 4.3805961468024179e-05, 0.0001113332764361985, 0.000116965857159812, 7.8793244028929621e-05, 8.9003195171244442e-05, 0.0001487254339735955, 0.0001756312558427453, 9.6749150543473661e-05, 0.00021516281412914395, 7.3233160946983844e-05, 7.3570707172621042e-05, 0.00012144634820288047, 3.2522562833037227e-05, 7.3643714131321758e-05, 8.9499888417776674e-05, 5.43106762052048e-05, 0.0001157632505055517, 0.0002116172545356676, 0.00012829052866436541, 9.9680772109422833e-05, 0.00014333722356241196, 0.00011871488823089749, 0.00012283900287002325, 9.1558089479804039e-05, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -79,-127,-32,34,-42,-14,59,-54, 
  /* [1][0][][] */ -10,127,41,-84,4,-92,-69,94, 
  /* [2][0][][] */ -127,-57,43,8,63,11,24,-19, 
  /* [3][0][][] */ -3,-38,-127,-61,31,-59,-35,64, 
  /* [4][0][][] */ -49,-105,105,-18,127,-45,55,-4, 
  /* [5][0][][] */ -31,77,50,-91,113,44,-54,127, 
  /* [6][0][][] */ -127,104,53,65,-55,5,38,-114, 
  /* [7][0][][] */ 48,-20,62,29,45,-127,-7,114, 
  /* [8][0][][] */ -5,67,-11,-32,13,100,127,-66, 
  /* [9][0][][] */ 86,127,1,-66,-87,-79,-62,122, 
  /* [10][0][][] */ 28,-14,25,0,-25,30,-127,-72, 
  /* [11][0][][] */ -74,13,-116,-79,127,19,35,63, 
  /* [12][0][][] */ 87,30,-26,-10,127,97,8,2, 
  /* [13][0][][] */ -127,-118,-12,62,-109,43,75,16, 
  /* [14][0][][] */ -21,110,-86,123,-68,127,-26,46, 
  /* [15][0][][] */ -11,-72,-29,-93,127,66,-24,52, 
  /* [16][0][][] */ 62,-78,-1,39,39,-14,36,-127, 
  /* [17][0][][] */ -77,-80,-127,109,3,95,80,-105, 
  /* [18][0][][] */ 90,-3,127,18,-43,-119,-75,-32, 
  /* [19][0][][] */ -29,127,36,26,108,-117,-77,-31, 
  /* [20][0][][] */ -63,-13,-127,-36,37,-13,-6,0, 
  /* [21][0][][] */ -127,-20,34,60,-96,-103,114,-34, 
  /* [22][0][][] */ 49,-1,-127,-65,-40,-8,-5,62, 
  /* [23][0][][] */ -27,37,127,-33,-103,33,-8,-96, 
  /* [24][0][][] */ -86,124,87,126,127,112,9,-52, 
  /* [25][0][][] */ -62,-127,-71,48,-75,46,63,-11, 
  /* [26][0][][] */ 91,117,-115,-72,-127,-18,-66,47, 
  /* [27][0][][] */ 49,55,-65,22,-127,12,-24,-6, 
  /* [28][0][][] */ -34,59,19,-84,86,84,-127,-105, 
  /* [29][0][][] */ 43,-9,-3,-64,-127,3,13,-44, 
  /* [30][0][][] */ -93,-1,46,127,47,26,-44,-23, 
  /* [31][0][][] */ 18,-111,-9,-81,-127,49,-53,-101, 
  /* [32][0][][] */ -127,2,24,-9,3,-38,5,28, 
  /* [33][0][][] */ 61,-78,-127,-115,1,15,-59,6, 
  /* [34][0][][] */ 54,83,127,1,-118,-55,75,-71, 
  /* [35][0][][] */ 106,37,24,18,-120,-50,-127,-48, 
  /* [36][0][][] */ 127,5,68,-37,14,-22,67,77, 
  /* [37][0][][] */ 127,120,-6,1,78,82,-120,33, 
  /* [38][0][][] */ -28,93,97,127,-28,61,34,-76, 
  /* [39][0][][] */ 33,50,127,-42,88,-47,-36,9, 
  /* [40][0][][] */ 61,32,33,-2,-84,-127,19,-41, 
  /* [41][0][][] */ 37,-50,11,127,-22,72,5,74, 
  /* [42][0][][] */ -10,-99,68,-38,127,-32,91,19, 
  /* [43][0][][] */ -5,-42,-94,-27,125,54,-79,127, 
  /* [44][0][][] */ 108,-16,127,1,-1,25,-57,18, 
  /* [45][0][][] */ -43,28,38,-32,-100,-127,-29,117, 
  /* [46][0][][] */ -55,91,78,44,-11,-33,51,-127, 
  /* [47][0][][] */ 47,0,13,127,-3,-105,73,48, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0066497181542217731, 0.0026596479583531618, 0.0020045777782797813, 0.002376981545239687, 0.0030820872634649277, 0.0021238159388303757, 0.0028375056572258472, 0.0016751763178035617, 0.0017744915094226599, 0.0020973752252757549, 0.0036949189379811287, 0.0033167870715260506, 0.0037882309406995773, 0.0035778805613517761, 0.0030422133859246969, 0.0022407539654523134, 0.0037465640343725681, 0.0028689454775303602, 0.0018829896580427885, 0.0042079230770468712, 0.0039071831852197647, 0.0016591409221291542, 0.0030831883195787668, 0.002426899503916502, 0.0010413391282781959, 0.0026465735863894224, 0.0027804691344499588, 0.001873043947853148, 0.0021157511509954929, 0.0035354460123926401, 0.0041750413365662098, 0.0022998850326985121, 0.0051147709600627422, 0.0017408716958016157, 0.001748895738273859, 0.0028869777452200651, 0.00077311432687565684, 0.0017506311414763331, 0.0021275582257658243, 0.001291053369641304, 0.0027518812566995621, 0.005030487198382616, 0.0030496751423925161, 0.0023695745039731264, 0.0034073595888912678, 0.0028220464009791613, 0.0029200832359492779, 0.0021764850243926048, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 4598, -3126, 18786, -10635, -16586, -17748, -9910, -2429, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 7.7100630733184516e-05, 0.00010142924293177202, 8.307748066727072e-05, 8.9973029389511794e-05, 0.00011133875523228198, 8.0216384958475828e-05, 0.00015186061500571668, 0.00017220061272382736, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -22,-33,43,-48,62,91,66,91,108,-43,-17,56,-26,-18,16,-14,45,48,11,-49,-35,18,-85,-43,28,-14,18,-72,-31,33,44,29,29,46,65,14,127,-50,-83,9,-60,-72,-34,-4,-67,-90,-127,54, 
  /* [1][0][][] */ -12,-1,-41,51,-1,15,-38,-15,-54,27,21,87,-30,2,-23,127,36,60,9,-27,-45,-22,-63,21,10,-11,-20,-81,44,-7,-58,-61,63,-29,-34,-54,35,37,53,-37,5,64,48,-37,-3,-32,-52,-24, 
  /* [2][0][][] */ 3,-76,-24,-9,-31,15,7,11,112,13,-11,-15,-25,-75,34,4,-1,-58,-26,-8,-96,52,2,27,11,44,-33,-25,-22,-41,45,-50,-103,26,-47,51,-71,56,-23,-27,127,-24,2,41,26,36,-57,-32, 
  /* [3][0][][] */ -26,-116,94,59,22,-103,-21,-9,-127,127,59,-52,49,5,-19,24,61,37,-28,49,73,85,35,-61,8,84,61,28,-33,-72,11,17,-21,4,48,12,-17,-83,-40,46,-23,-12,25,-67,-86,22,-5,25, 
  /* [4][0][][] */ -8,60,-18,71,36,1,12,-1,-53,77,44,70,2,21,61,10,4,-104,-8,-18,96,-9,-104,65,77,-21,33,26,47,23,-8,-60,-58,127,5,14,57,-24,24,21,-25,43,4,-21,2,-48,-31,19, 
  /* [5][0][][] */ -24,6,-10,-69,-127,28,117,27,13,56,-28,-28,-105,-6,66,-40,-93,39,-55,-90,3,114,-7,40,116,34,-7,12,-22,-13,124,-62,-17,110,83,93,-25,55,91,33,-20,-36,-30,42,-61,53,32,54, 
  /* [6][0][][] */ 1,-21,-9,24,-57,-52,16,2,25,-13,40,8,-53,-26,30,57,3,-57,3,-61,68,-24,0,-27,9,-2,9,39,38,-1,11,127,47,-12,-12,19,3,-9,23,13,-1,35,-26,-47,-7,-22,-21,38, 
  /* [7][0][][] */ -28,-19,-42,-6,4,-24,3,13,39,7,24,1,-9,10,-1,1,32,-4,3,-3,-62,9,11,-28,-2,-6,-54,-14,-16,-20,15,32,20,-11,27,13,-19,127,-9,-39,-38,-1,-44,-35,20,64,-73,-10, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0043304935097694397, 0.0056969528086483479, 0.0046661938540637493, 0.0050534945912659168, 0.0062535381875932217, 0.0045054950751364231, 0.0085295205935835838, 0.0096719525754451752, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -780, 28816, 26782, -1378, -904, -13444, 21934, 17161, -12071, 350, -1283, 16435, 19716, -15739, -9753, -1359, 200, 26780, -610, 197, 42830, 12181, -8267, -6383, 17360, 12907, -2329, -576, -4892, -238, 30868, 1136, -1301, 5957, 14408, 15746, -3440, 43892, -4489, 519, 25967, -23, -1975, 14128, 520, -1245, -7837, 10561, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00019352634262759238, 9.7612988611217588e-05, 8.7794011051300913e-05, 0.00010048310650745407, 6.6321423219051212e-05, 0.00013273868535179645, 0.00010203595593338832, 8.2986160123255104e-05, 0.00022963009541854262, 6.1529113736469299e-05, 0.00015567596710752696, 7.3697934567462653e-05, 8.6264277342706919e-05, 0.00017108744941651821, 9.7614109108690172e-05, 7.4625815614126623e-05, 8.1999452959280461e-05, 0.00016386060451623052, 0.00053621287224814296, 7.4211500759702176e-05, 5.9971349401166663e-05, 7.9634963185526431e-05, 6.9890505983494222e-05, 0.00014770403504371643, 7.0524481998290867e-05, 8.4478131611831486e-05, 0.00020235539705026895, 0.00017693328845780343, 0.00010831248800968751, 0.00021061459847260267, 0.00011520458792801946, 8.555041131330654e-05, 5.7159504649462178e-05, 7.8899647633079439e-05, 8.1749603850767016e-05, 7.5273528636898845e-05, 0.00011170810466865078, 8.4990242612548172e-05, 0.00010215969814453274, 7.5785508670378476e-05, 0.00012655231694225222, 0.00020925866556353867, 8.0365425674244761e-05, 8.7650420027785003e-05, 0.00018034907407127321, 0.00014056962390895933, 0.00021283655951265246, 9.9796707218047231e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 62,-72,-42,34,72,50,-84,-77,4,52,107,-74,-49,78,92,52,79,-78,49,76,-102,-104,43,104,-36,-33,93,76,100,114,-61,59,44,-49,-99,-86,54,-71,67,10,-91,69,43,-66,50,123,59,-50, 88,-78,-64,72,100,58,-68,-103,19,72,91,-91,-81,96,108,67,62,-92,52,95,-79,-127,62,115,-57,-73,127,92,114,122,-64,74,66,-75,-127,-104,79,-78,76,41,-108,48,34,-74,74,127,66,-74, 48,-50,-36,21,27,-1,-31,-33,16,29,28,-33,-82,38,26,30,22,-13,21,30,-3,-85,29,57,-28,-11,41,24,52,79,-26,7,27,-45,-75,-56,30,-23,25,30,-24,40,15,-24,19,25,13,-51, 
  /* [0][1][][] */ 40,-88,-76,68,107,78,-118,-109,89,96,100,-97,-76,109,123,83,119,-91,45,127,-105,-111,82,114,-127,-77,108,100,98,127,-81,102,91,-98,-106,-121,89,-108,104,91,-108,69,97,-127,91,105,39,-83, 41,-127,-127,127,127,127,-127,-127,127,127,127,-127,-127,127,127,127,127,-127,54,120,-127,-106,127,127,-119,-127,123,127,127,125,-127,127,127,-127,-122,-127,127,-127,127,127,-127,127,127,-103,127,121,49,-127, -14,-73,-76,48,46,29,-71,-42,55,45,30,-60,-97,42,46,65,39,-24,17,41,-26,-83,61,60,-84,-16,14,56,41,34,-39,21,53,-112,-91,-54,39,-34,33,73,-14,47,45,-61,49,-10,15,-79, 
  /* [0][2][][] */ -44,-61,-57,52,42,40,-62,-17,-109,48,22,-72,-57,34,56,47,62,-22,-84,61,-36,-33,54,40,-92,-65,50,35,36,-15,-54,37,52,-69,-26,-56,19,-50,44,83,-30,41,51,-73,23,13,-104,-14, -127,-87,-80,76,51,70,-57,-34,-84,58,41,-72,-106,42,63,70,61,-29,-127,56,-48,-91,74,38,-109,-39,37,43,42,-18,-79,37,57,-111,-15,-53,33,-50,43,115,-22,65,85,-87,38,-22,-127,-57, -68,-30,-51,43,23,17,-7,17,-100,37,28,-39,-36,21,34,42,26,-6,-72,38,-10,-23,28,23,-58,13,-3,18,5,-6,-29,3,33,-51,-23,-33,9,-6,-2,59,-4,21,41,-26,-4,-32,-55,-21, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0083168018609285355, 0.0041949218139052391, 0.0037729509640485048, 0.0043182652443647385, 0.0028501655906438828, 0.0057044499553740025, 0.0043849991634488106, 0.0035663335584104061, 0.0098683619871735573, 0.002644216176122427, 0.0066901808604598045, 0.0031671714968979359, 0.0037072107661515474, 0.0073524895124137402, 0.0041949702426791191, 0.0032070472370833158, 0.0035239297430962324, 0.0070419157855212688, 0.023043768480420113, 0.0031892419792711735, 0.0025772710796445608, 0.0034223156981170177, 0.0030035472009330988, 0.0063475864008069038, 0.0030307923443615437, 0.003630450926721096, 0.0086962310597300529, 0.0076037147082388401, 0.0046547334641218185, 0.0090511702001094818, 0.0049509215168654919, 0.0036765323020517826, 0.0024564319755882025, 0.0033907154574990273, 0.0035131925251334906, 0.0032348828390240669, 0.0048006600700318813, 0.0036524590104818344, 0.004390317015349865, 0.003256885102018714, 0.0054385908879339695, 0.0089928992092609406, 0.0034537073224782944, 0.0037667802534997463, 0.0077505083754658699, 0.0060409847646951675, 0.0091466596350073814, 0.0042887674644589424, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { -2611, 10862, 7675, -1505, 35, 18029, 6304, 2736, 21185, 2906, -3993, 3165, 6032, 2598, -515, 1199, -2747, 14959, -5584, -1245, 1555, 1976, 589, -980, 203, 4498, -3878, -2984, -1087, -4205, 17615, 4580, 973, 1725, 690, 1710, 1827, 15525, 2281, 996, 11703, -3127, 1281, 3007, -3673, -3490, 26656, 4801, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00019744425662793219, 8.0916550359688699e-05, 9.9646895250771195e-05, 0.00016086075629573315, 0.00031727133318781853, 5.1522125431802124e-05, 0.00013997268979437649, 0.00016062740178313106, 4.9620324716670439e-05, 0.00020294019486755133, 0.00011367182014510036, 0.00015762426482979208, 0.0001089406359824352, 0.00016941061767283827, 0.00021068874048069119, 0.00014112245116848499, 0.00014960895350668579, 6.6437569330446422e-05, 8.8210406829603016e-05, 0.00024983362527564168, 0.00022459527826867998, 0.00014553440269082785, 0.00016207281441893429, 0.00014981714775785804, 0.00019158757640980184, 0.00012039468856528401, 0.00012461726146284491, 0.00011694822023855522, 0.00018809623725246638, 0.00010121484228875488, 6.3654253608547151e-05, 0.00014499410463031381, 0.00019424025958869606, 0.00017399605712853372, 0.00016576828784309328, 0.00020019842486362904, 0.00013920030323788524, 5.9363086620578542e-05, 0.00022036711743567139, 0.00015453611558768898, 8.3930906839668751e-05, 7.7701944974251091e-05, 0.00019421879551373422, 0.00015281549713108689, 0.00014845159603282809, 0.00013807938375975937, 4.1036277252715081e-05, 0.00010474046575836837, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 43,26,-46,11,-35,49,-127,21, 
  /* [1][0][][] */ 10,-64,-115,2,-7,-18,127,-109, 
  /* [2][0][][] */ -124,-53,-70,-55,-38,60,-127,-3, 
  /* [3][0][][] */ -57,-42,23,-6,-29,-127,-116,-16, 
  /* [4][0][][] */ -46,-127,-45,17,55,24,-35,-38, 
  /* [5][0][][] */ 78,-32,95,63,-127,67,-84,-118, 
  /* [6][0][][] */ 39,-127,-61,-33,-12,62,-40,-83, 
  /* [7][0][][] */ -20,-79,-62,-56,78,-127,-3,16, 
  /* [8][0][][] */ 38,74,54,57,42,-57,-13,127, 
  /* [9][0][][] */ -25,-57,-56,9,46,-13,127,-13, 
  /* [10][0][][] */ -29,13,-127,17,16,24,100,-99, 
  /* [11][0][][] */ 4,-36,-36,4,-127,15,8,47, 
  /* [12][0][][] */ 92,64,-17,38,-75,127,76,-11, 
  /* [13][0][][] */ -49,-8,22,-23,40,-127,-8,74, 
  /* [14][0][][] */ -104,-48,7,36,13,76,-125,-127, 
  /* [15][0][][] */ 53,75,47,-3,-127,40,110,-46, 
  /* [16][0][][] */ 3,-65,12,76,-16,-66,14,-127, 
  /* [17][0][][] */ -72,127,28,-13,-56,-44,-85,-78, 
  /* [18][0][][] */ 100,127,-77,-113,103,94,-89,-89, 
  /* [19][0][][] */ -31,73,-15,14,-127,3,-64,-93, 
  /* [20][0][][] */ -127,-8,10,8,20,17,108,46, 
  /* [21][0][][] */ -31,1,58,12,-88,-114,-127,22, 
  /* [22][0][][] */ -1,-32,-47,-4,-127,0,8,56, 
  /* [23][0][][] */ 58,-1,-22,-9,127,71,-88,90, 
  /* [24][0][][] */ 127,13,-46,27,-89,0,14,-9, 
  /* [25][0][][] */ 23,-63,56,93,-54,-127,25,104, 
  /* [26][0][][] */ 19,127,5,61,85,-18,19,-14, 
  /* [27][0][][] */ -127,108,55,-20,118,-61,3,96, 
  /* [28][0][][] */ -75,-78,-57,-39,84,-127,18,-12, 
  /* [29][0][][] */ -64,-29,42,34,127,-90,-79,80, 
  /* [30][0][][] */ 127,41,-116,-103,-84,-94,-70,-66, 
  /* [31][0][][] */ 26,3,40,62,-127,6,38,6, 
  /* [32][0][][] */ 127,12,49,37,-44,-59,98,70, 
  /* [33][0][][] */ 127,31,-38,6,-122,-68,30,45, 
  /* [34][0][][] */ 34,-13,-26,20,-45,127,24,-69, 
  /* [35][0][][] */ 124,31,-13,-36,32,-102,30,127, 
  /* [36][0][][] */ -41,-50,71,-103,-35,-14,77,-127, 
  /* [37][0][][] */ 79,-70,60,55,121,-15,38,-127, 
  /* [38][0][][] */ 64,127,8,-30,-23,22,22,79, 
  /* [39][0][][] */ 29,7,-72,74,-23,-70,-85,127, 
  /* [40][0][][] */ -22,-34,-6,-38,25,-127,24,47, 
  /* [41][0][][] */ -30,51,-127,-64,90,124,64,-105, 
  /* [42][0][][] */ 29,-46,-43,18,81,127,30,60, 
  /* [43][0][][] */ 6,57,-25,34,-127,-77,65,-68, 
  /* [44][0][][] */ -127,-54,-10,-39,52,54,-110,-67, 
  /* [45][0][][] */ -64,60,-61,22,30,0,-65,127, 
  /* [46][0][][] */ -33,49,127,-6,-65,-66,-50,46, 
  /* [47][0][][] */ -127,-119,-46,-60,91,104,-24,95, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0034450686071068048, 0.001411857083439827, 0.0017386699328199029, 0.0028067482635378838, 0.0055358484387397766, 0.00089897401630878448, 0.0024422868154942989, 0.0028026767540723085, 0.00086579081835225224, 0.0035409634001553059, 0.0019833811093121767, 0.0027502770535647869, 0.0019008299568668008, 0.002955928910523653, 0.0036761623341590166, 0.0024623482022434473, 0.002610423369333148, 0.0011592232622206211, 0.0015391224296763539, 0.004359174519777298, 0.0039188079535961151, 0.0025393292307853699, 0.002827896736562252, 0.0026140559930354357, 0.0033428792376071215, 0.0021006837487220764, 0.0021743606775999069, 0.0020405487157404423, 0.003281961428001523, 0.0017660278826951981, 0.0011106590973213315, 0.0025299021508544683, 0.0033891641069203615, 0.0030359369702637196, 0.0028923763893544674, 0.0034931241534650326, 0.002428809879347682, 0.0010357855353504419, 0.0038450337015092373, 0.0026963939890265465, 0.0014644524781033397, 0.0013557675993070006, 0.0033887897152453661, 0.0026663721073418856, 0.0025902295019477606, 0.0024092518724501133, 0.00071601365925744176, 0.001827544067054987, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 10397, 15038, 4711, 4145, 1398, -12763, 5443, -7485, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00014755326265003532, 0.00011687029473250732, 0.00016170616436284035, 0.00018040592840407044, 0.00012451726070139557, 0.0001495951582910493, 7.859931793063879e-05, 0.00011711777915479615, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 38,-42,97,61,31,-41,19,13,-8,58,-28,15,-43,-79,41,4,-106,59,-31,67,-42,65,-1,-24,1,-41,62,-24,-24,23,-27,105,-58,-11,-31,-82,-60,-41,-41,-15,-7,55,-127,14,56,24,23,54, 
  /* [1][0][][] */ -59,-32,64,-4,-31,29,-38,-35,46,-13,-6,-35,-21,11,0,24,-3,23,12,-9,-62,-26,-71,-20,27,-43,-28,-38,27,-69,-12,-127,-3,-60,-66,-74,-43,-89,-25,22,39,-21,86,-103,-48,-14,-25,-10, 
  /* [2][0][][] */ -61,85,-6,33,11,7,17,-39,76,-44,70,78,98,11,35,-52,92,2,3,31,-15,15,18,127,-104,-37,13,-23,3,85,-23,-80,-16,-1,8,-80,-21,3,-33,-16,84,-85,26,0,23,-120,-4,-10, 
  /* [3][0][][] */ 62,-22,-64,38,91,-92,6,-118,-32,-2,-58,-92,-16,127,-7,16,-42,-22,-69,-46,33,82,-13,-58,121,45,60,-72,36,-102,56,-62,62,66,116,-79,-47,21,-30,45,24,89,-80,33,1,32,4,43, 
  /* [4][0][][] */ -50,28,-38,66,88,-29,27,-48,-33,-8,-60,34,-47,-16,5,-54,10,64,-29,-37,-38,34,-64,-65,22,-5,20,-36,34,-34,-31,61,-3,77,-66,-72,-60,-65,-33,1,59,-50,127,23,0,87,-52,-50, 
  /* [5][0][][] */ 52,5,80,-5,-8,17,51,29,127,-4,69,1,70,56,25,-62,-13,30,30,-47,-56,-72,12,43,22,-9,24,40,-39,-29,15,-19,-19,48,-23,55,45,-2,-26,-46,-9,68,31,42,-21,-6,73,7, 
  /* [6][0][][] */ -1,-58,-14,6,37,-10,-1,16,-51,-15,105,60,96,69,-33,46,111,-127,-15,1,-5,-40,-103,36,-78,65,-40,1,-18,-45,71,-48,87,15,-71,-17,-38,8,54,11,79,-66,-9,-67,-102,45,-39,19, 
  /* [7][0][][] */ -12,-20,-57,-38,21,105,-6,-2,-2,-52,-127,-104,42,52,-59,-44,-39,21,109,26,-11,-80,63,-11,117,-27,-75,94,-38,-4,-25,-82,-46,70,55,122,96,-56,-26,-42,-26,-12,43,-14,1,-23,2,-58, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0062710135243833065, 0.0049669872969388962, 0.0068725119344890118, 0.0076672518625855446, 0.0052919834852218628, 0.0063577941618859768, 0.0033404708374291658, 0.0049775056540966034, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -1344, 3018, 640, 61, 902, 11517, -560, -4965, -6142, -1272, -9433, 329, -4917, -7201, -482, -500, -11417, 18886, -4570, -442, -1071, -325, -1901, 212, 22557, 165, -864, -1226, 27, 721, 91, -10527, -233, 16810, 93, 8717, -678, -4006, -605, -250, -4990, -528, 4305, 6945, -653, 10731, -37, -2129, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00023986752785276622, 8.6285901488736272e-05, 0.00039161380846053362, 9.1531961516011506e-05, 0.00011777912004617974, 0.00021883772569708526, 0.000207692981348373, 0.00014409443247132003, 0.00029668273054994643, 0.00010562880925135687, 0.00031559550552628934, 0.00016240321565419436, 9.204485104419291e-05, 0.00010889688564930111, 0.00012942147441208363, 0.00041403129580430686, 0.00018484247266314924, 6.9993780925869942e-05, 8.8536326074972749e-05, 0.00045120005961507559, 0.00017722632037475705, 0.00028299604309722781, 0.00013269444752950221, 0.00051105610327795148, 0.00017853912140708417, 0.00023199986026156694, 0.00014637727872468531, 0.00013595753989648074, 0.00017873414617497474, 0.0001373403356410563, 0.00032351550180464983, 0.00039749400457367301, 0.00033898971742019057, 9.4102710136212409e-05, 0.00041256711119785905, 0.00014647931675426662, 0.00016086507821455598, 6.567009404534474e-05, 0.00040151085704565048, 0.00067297043278813362, 0.0001624982978682965, 0.00067607383243739605, 0.00047997513320297003, 0.00014526843733619899, 0.00019821942260023206, 9.2315851361490786e-05, 0.00015409481420647353, 0.00028539294726215303, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -5,-49,39,-37,127,-7,-5,-9,-38,45,-8,8,73,8,127,-35,12,-26,-41,-12,-27,-18,-65,28,-115,48,30,-52,-14,22,-25,1,-31,24,18,-4,84,66,35,-4,63,16,-14,2,-95,-14,-47,-31, 5,-108,-71,-36,-50,-7,28,26,13,-2,67,127,-2,57,-64,127,4,-71,33,-45,-73,-127,-90,80,-127,-80,18,104,12,38,121,12,-127,-121,-51,40,127,-83,124,14,57,-9,-24,-7,-53,-22,65,6, 16,-21,-12,127,41,7,-78,1,-30,-41,-20,-16,47,-6,-53,-43,28,11,-14,-6,4,1,-36,14,-41,-59,-28,28,-6,23,-82,-4,18,95,14,22,1,89,-125,4,22,-3,-9,30,-127,-7,-61,49, 
  /* [0][1][][] */ -113,-72,127,-13,-38,-39,82,23,18,102,12,14,54,28,99,31,23,-127,102,43,86,-9,58,-40,-4,-16,42,-46,23,55,30,53,30,-126,6,127,14,43,-40,-114,22,84,-18,-79,36,-86,-66,24, 127,-74,-70,-80,6,-127,127,127,127,18,127,-39,-127,30,-39,-40,127,-99,127,127,127,84,127,-127,5,-21,107,-15,127,127,-127,127,26,-127,127,-95,-61,127,-97,122,-127,-127,127,-127,103,-127,127,-114, -8,-116,15,76,-31,-14,-43,14,-16,-127,-30,47,75,15,-53,45,22,1,6,18,-4,-23,41,-24,6,1,-127,83,-72,5,87,22,-7,-101,-20,-36,59,20,127,14,23,50,-44,6,57,-23,-64,127, 
  /* [0][2][][] */ -2,123,28,-39,79,13,-34,-13,-27,20,-3,1,60,14,83,11,-24,11,0,-41,-13,10,3,9,-17,-12,33,6,-55,-107,-7,0,-10,62,-17,34,-50,42,16,104,17,20,-2,3,22,-6,-17,-34, 4,94,-44,18,36,-35,6,35,35,16,29,-32,40,127,-72,-72,-7,-19,111,-72,-49,77,2,48,71,127,9,127,-70,-105,-13,1,86,-124,-83,3,-63,-55,-26,-127,53,-19,-56,66,50,22,19,12, 18,127,-12,37,25,6,-54,-1,-20,-14,-1,-6,56,-5,-63,1,-12,10,-28,-22,-12,4,-3,-2,-40,26,-38,21,32,-76,21,4,12,68,0,-13,-43,61,14,1,-22,-2,2,-22,13,8,-5,34, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013067701831459999, 0.0047007547691464424, 0.021334661170840263, 0.0049865539185702801, 0.0064164684154093266, 0.011922022327780724, 0.011314869858324528, 0.0078500956296920776, 0.016162926331162453, 0.005754533689469099, 0.017193272709846497, 0.0088475365191698074, 0.0050144954584538937, 0.0059325746260583401, 0.0070507298223674297, 0.022555939853191376, 0.010070000775158405, 0.0038131789769977331, 0.0048233550041913986, 0.024580849334597588, 0.0096550816670060158, 0.015417292714118958, 0.0072290375828742981, 0.027841735631227493, 0.0097266016528010368, 0.012639080174267292, 0.0079744625836610794, 0.007406807504594326, 0.0097372261807322502, 0.0074821403250098228, 0.017624745145440102, 0.0216550063341856, 0.01846776157617569, 0.0051266052760183811, 0.02247617207467556, 0.0079800216481089592, 0.0087637407705187798, 0.0035776298027485609, 0.021873841062188148, 0.036662638187408447, 0.0088527165353298187, 0.036831710487604141, 0.026148481294512749, 0.0079140542075037956, 0.010798761621117592, 0.0050292592495679855, 0.0083949044346809387, 0.015547872520983219, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 8058, 3729, 39170, -3631, -2110, 9031, -966, 1475, 3681, -66, 10469, 600, 3415, 4832, 3613, 5967, 4189, 3867, -1137, 7611, 1926, 400, 1888, 14788, 43440, 6519, 4925, -1992, -159, 9103, 10118, 15683, 15914, 6472, 11514, -1379, 860, 3538, 12061, 9191, 766, 22213, 21553, 6740, 10049, 2908, 5666, 1363, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00010460084740770981, 0.00015168990648817271, 3.2281219318974763e-05, 0.00013685673184227198, 0.00019881478510797024, 0.00011965346493525431, 0.00017289730021730065, 0.00036968843778595328, 0.00016996313934214413, 0.00016099258209578693, 8.4592022176366299e-05, 0.00023788309772498906, 0.0001446311071049422, 0.00015880151477176696, 0.00015019909187685698, 0.00012529565719887614, 0.00012050825171172619, 0.00013574537297245115, 0.00023299983877222985, 0.00011125166929559782, 0.00018809689208865166, 0.00024053607194218785, 0.000174248285475187, 6.497798312921077e-05, 3.6307781556388363e-05, 0.00012933320249430835, 0.00015714559413027018, 0.00019473048450890929, 0.0003422545560169965, 9.5966344815678895e-05, 8.8744869572110474e-05, 6.3630781369283795e-05, 6.0690068494295701e-05, 0.00013292884978000075, 7.7123906521592289e-05, 0.00015395607624668628, 0.00020345064694993198, 0.00012801159755326807, 7.322245801333338e-05, 9.4878938398323953e-05, 0.0001646886084927246, 4.5886143198003992e-05, 5.3494386520469561e-05, 0.00011811924923676997, 9.5420029538217932e-05, 0.00021737876522820443, 0.00013619291712529957, 0.00014873074542265385, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -11,35,6,-127,-104,-2,40,113, 
  /* [1][0][][] */ 96,10,-18,-7,-77,48,127,28, 
  /* [2][0][][] */ -5,117,-35,-25,-42,88,-60,-127, 
  /* [3][0][][] */ 70,-81,-96,116,-127,-43,-9,-28, 
  /* [4][0][][] */ 40,-62,42,-20,-127,-6,47,27, 
  /* [5][0][][] */ -13,51,-8,-92,-127,-6,-27,5, 
  /* [6][0][][] */ 44,-15,29,28,127,-18,-5,-124, 
  /* [7][0][][] */ 17,29,23,127,21,-9,-4,20, 
  /* [8][0][][] */ 20,22,18,-46,37,127,11,-28, 
  /* [9][0][][] */ 104,30,-18,25,-68,-48,127,69, 
  /* [10][0][][] */ 5,62,-70,-35,6,127,77,-54, 
  /* [11][0][][] */ -15,-41,-127,109,-71,25,-10,83, 
  /* [12][0][][] */ -106,-89,52,45,37,-127,-47,13, 
  /* [13][0][][] */ 42,32,35,47,-53,127,13,-37, 
  /* [14][0][][] */ 6,-88,1,-5,-57,-64,-127,103, 
  /* [15][0][][] */ -92,43,-13,10,103,1,-127,-45, 
  /* [16][0][][] */ 96,72,-97,-127,57,122,104,31, 
  /* [17][0][][] */ -102,127,-125,46,-15,-25,25,-118, 
  /* [18][0][][] */ 33,-4,-98,127,-10,-38,-40,-64, 
  /* [19][0][][] */ 106,18,9,35,-48,1,127,44, 
  /* [20][0][][] */ 44,-76,-80,127,47,-32,-23,-59, 
  /* [21][0][][] */ 23,49,127,-100,41,-24,26,-96, 
  /* [22][0][][] */ -77,-30,-127,56,-28,32,6,116, 
  /* [23][0][][] */ 82,24,35,41,-127,98,57,-43, 
  /* [24][0][][] */ -13,-5,-127,82,-33,32,39,71, 
  /* [25][0][][] */ 55,-43,-73,127,61,-6,-44,-11, 
  /* [26][0][][] */ -72,30,127,-92,-22,32,66,-10, 
  /* [27][0][][] */ -69,85,127,3,19,-10,76,17, 
  /* [28][0][][] */ -60,-101,43,-127,-19,12,-1,-22, 
  /* [29][0][][] */ -69,-82,-12,86,0,-127,-13,51, 
  /* [30][0][][] */ -127,41,118,-25,31,29,58,32, 
  /* [31][0][][] */ -57,52,89,-127,-49,18,38,61, 
  /* [32][0][][] */ -71,82,102,-116,21,4,-1,127, 
  /* [33][0][][] */ 9,102,-43,44,27,12,-127,-26, 
  /* [34][0][][] */ 89,23,127,-110,-102,-107,53,-54, 
  /* [35][0][][] */ 83,1,24,95,80,-61,25,-127, 
  /* [36][0][][] */ 23,66,127,-115,31,-19,36,-117, 
  /* [37][0][][] */ -51,-53,107,68,3,-127,93,-16, 
  /* [38][0][][] */ 84,-7,89,52,-23,-49,127,29, 
  /* [39][0][][] */ 44,-75,-28,6,-127,12,81,62, 
  /* [40][0][][] */ -47,33,-127,107,-51,53,-91,116, 
  /* [41][0][][] */ -109,-16,-51,0,127,21,-92,13, 
  /* [42][0][][] */ -83,54,-25,-32,127,36,-104,-45, 
  /* [43][0][][] */ 127,118,-48,121,7,-110,51,83, 
  /* [44][0][][] */ -10,20,83,6,34,-127,24,-27, 
  /* [45][0][][] */ -11,-73,127,74,-26,-18,-118,16, 
  /* [46][0][][] */ 50,-112,-127,49,-80,34,3,-21, 
  /* [47][0][][] */ -110,-26,52,-8,82,39,-127,-41, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0026606384199112654, 0.0038584007415920496, 0.00082110858056694269, 0.003481102641671896, 0.0050570741295814514, 0.0030435184016823769, 0.0043978341855108738, 0.009403434582054615, 0.0043232007883489132, 0.0040950244292616844, 0.0021516918204724789, 0.0060508199967443943, 0.0036788524594157934, 0.004039292223751545, 0.0038204800803214312, 0.0031870338134467602, 0.0030652608256787062, 0.0034528339747339487, 0.0059266090393066406, 0.0028298094402998686, 0.0047844527289271355, 0.0061183013021945953, 0.0044321981258690357, 0.0016527869738638401, 0.00092352862702682614, 0.0032897330820560455, 0.0039971722289919853, 0.0049531855620443821, 0.00870562344789505, 0.0024410102050751448, 0.002257324056699872, 0.0016185194253921509, 0.0015437190886586905, 0.0033811924513429403, 0.0019617320504039526, 0.0039160433225333691, 0.0051749926060438156, 0.0032561167608946562, 0.0018624942749738693, 0.0024133508559316397, 0.0041890372522175312, 0.0011671648826450109, 0.0013606889406219125, 0.0030044938903301954, 0.0024271141737699509, 0.0055292695760726929, 0.0034642177633941174, 0.0037831312511116266, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -12838, 2600, -16255, 264, 3011, -2832, 10424, 538, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00017245486378669739, 0.00012987223453819752, 0.00011011573951691389, 7.5848438427783549e-05, 0.00017157355614472181, 0.00012999004684388638, 0.00013741214934270829, 0.00014449360605794936, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 52,105,-42,73,-5,-2,-25,9,68,-62,6,-27,8,11,-33,-53,2,-22,34,17,-55,-27,-32,9,21,19,30,-6,13,8,-18,31,-61,10,117,-127,-19,24,-10,118,-27,11,15,-2,-14,40,29,-40, 
  /* [1][0][][] */ -4,-42,32,52,-17,-16,-16,-19,41,-45,93,41,17,10,-41,-75,127,36,12,14,-70,28,33,-14,-52,-94,-35,-53,-16,-54,39,-43,-14,-27,-33,8,1,-20,78,-46,-10,30,-63,32,75,59,11,44, 
  /* [2][0][][] */ 76,-30,-14,-12,102,108,63,72,-32,-4,-3,-28,-5,48,55,29,-23,-31,55,-63,-40,-48,-47,58,-94,-95,111,16,60,-69,-64,22,-127,80,98,17,-4,-1,-9,15,27,69,16,-65,-20,19,57,-43, 
  /* [3][0][][] */ 73,-34,16,-16,117,127,23,49,-30,-23,34,50,-127,43,70,19,2,6,68,-101,-84,21,38,87,12,-32,56,22,46,-60,7,-10,-111,65,-61,-119,26,-33,68,-45,50,-89,-108,-32,-61,41,-9,56, 
  /* [4][0][][] */ 34,43,-30,-40,-12,-13,-21,-15,2,-3,-11,-10,-30,-24,63,50,-42,-18,-35,46,29,-14,-16,4,-50,-38,-8,55,-10,15,-20,25,-34,-14,23,-127,-8,28,12,54,5,-9,-13,-25,43,-1,83,-22, 
  /* [5][0][][] */ 68,59,-96,48,4,9,-6,28,-88,-61,-58,-25,37,21,47,28,35,-62,42,127,-70,-49,-60,50,30,-23,-39,65,35,35,-60,0,-6,-1,-61,-1,-11,15,-27,69,14,77,-9,-43,125,27,16,-64, 
  /* [6][0][][] */ -29,-76,19,-45,-44,-38,-79,-77,-32,-63,-117,46,-56,-48,100,96,-127,9,25,-22,17,61,72,9,-8,-6,-71,88,-87,-38,46,80,18,-61,91,42,29,43,-8,-86,-11,-64,-29,20,-43,-20,-14,68, 
  /* [7][0][][] */ 78,15,-18,44,14,17,8,2,86,-8,-12,-16,57,10,-12,-21,-50,-7,-28,5,2,-18,-21,-26,72,-127,18,-1,-3,96,-16,21,-72,25,-56,-44,-13,28,31,22,27,67,-33,-15,-43,32,40,-23, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.007329331710934639, 0.0055195698514580727, 0.0046799187548458576, 0.00322355842217803, 0.007291876245290041, 0.0055245766416192055, 0.0058400160633027554, 0.0061409780755639076, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 616, 8139, 811, -727, -393, 34, 6366, 7250, 516, -5768, 65, -18, 5418, 4115, 23371, 16501, -137, -1587, 2409, 6316, 15732, -457, -340, -33, 6240, 518, 4321, 18076, 7076, 11441, -256, 1586, -508, -3856, -1206, 1409, -103, 245, 211, 3048, 4356, 3792, -4751, 121, 1042, -288, 9217, -503, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00011494076898088679, 0.00013375755224842578, 0.00056072231382131577, 7.4263880378566682e-05, 0.00050961365923285484, 0.00051564443856477737, 0.00017738042515702546, 0.00019841332687065005, 7.1749571361579001e-05, 0.00024061206204351038, 0.00051528040785342455, 0.00024978051078505814, 0.00024479150306433439, 0.00017586199101060629, 5.5873177188914269e-05, 5.7269960962003097e-05, 0.00011944309517275542, 0.00052290549501776695, 7.2074100899044424e-05, 9.3693561211694032e-05, 6.5950407588388771e-05, 0.00059019273612648249, 0.0010153668699786067, 0.00029278299189172685, 4.720634751720354e-05, 0.00016521842917427421, 9.7904172434937209e-05, 0.00014056969666853547, 0.00019061434431932867, 0.00011757008905988187, 0.00042449965258128941, 0.00035007784026674926, 9.2639776994474232e-05, 0.00024956333800218999, 7.5217147241346538e-05, 8.4996776422485709e-05, 0.00032016064506024122, 0.00039286207174882293, 0.00011544280278030783, 0.00021912764350418001, 9.3748683866579086e-05, 0.00025325626484118402, 0.0001184274660772644, 0.00037590067950077355, 7.8846569522283971e-05, 0.00030648903339169919, 0.00012046013580402359, 0.00052227516425773501, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -16,-82,-97,79,-83,6,-75,-69,49,72,127,-39,-1,5,-98,-46,94,-87,29,-55,-8,-99,-41,-79,96,109,0,-126,-4,-34,62,72,52,68,60,16,88,105,17,14,-127,-16,18,49,-41,73,-31,-94, 78,-12,33,75,-123,45,-50,6,90,98,93,72,-15,-70,-127,-89,127,-37,93,-92,-88,127,127,24,127,110,43,-104,-71,-37,-104,103,93,127,95,109,-14,96,52,-70,-94,-75,9,-50,-57,110,-33,111, 97,-6,54,63,-74,14,-37,-13,19,67,-23,-27,-68,-1,-61,-37,29,84,45,-14,-52,-21,-79,65,48,27,29,-29,-8,-28,28,33,36,109,16,71,-6,25,34,-12,-61,-2,-1,14,-20,75,-18,-1, 
  /* [0][1][][] */ 42,-127,105,92,95,-71,-127,-127,110,91,119,-50,2,-6,-127,-95,96,127,32,-101,-29,110,32,-127,111,117,116,-127,-9,-123,-70,98,108,-8,98,49,30,104,54,4,-18,-28,85,104,-110,127,-116,117, 127,-14,2,127,127,-127,-91,1,127,127,112,65,-34,-127,-120,-127,118,65,127,-127,-127,-119,-112,37,107,127,127,-110,-127,-123,127,127,127,6,127,127,-4,127,127,-127,4,-127,122,-81,-127,101,-127,-127, 91,-7,-127,68,91,-64,-27,-11,18,80,-1,-16,-127,-3,-49,-39,39,-98,64,-32,-76,12,77,66,57,36,-6,-37,-15,-91,-34,34,42,1,32,74,-4,7,69,-6,-28,-4,32,-8,-71,85,-47,15, 
  /* [0][2][][] */ 58,-78,9,26,-2,70,-75,-80,41,2,29,60,9,3,-63,-28,24,-40,20,-65,-8,3,19,-83,39,49,66,-23,0,-120,15,14,60,-89,76,19,-127,35,4,0,19,-6,87,-127,-72,1,-67,-7, 50,4,9,68,7,98,-26,-4,35,38,29,-127,-8,-86,-38,-38,38,-10,39,-94,-45,-9,-29,19,40,65,70,-41,-82,-127,-24,10,55,-92,71,31,23,33,50,-53,121,-56,127,113,-106,48,-111,21, -27,-12,-4,50,-17,42,-10,-6,18,9,-66,38,-56,-3,-29,-12,9,26,31,-1,-40,24,15,27,33,23,17,9,-10,-58,15,-10,-6,-55,22,18,12,-17,28,6,55,7,24,-7,-26,0,-22,-2, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0048849824815988541, 0.0056846956722438335, 0.023830696940422058, 0.0031562149524688721, 0.021658578887581825, 0.021914888173341751, 0.0075386678799986839, 0.0084325661882758141, 0.0030493566300719976, 0.010226012207567692, 0.021899417042732239, 0.010615671053528786, 0.010403638705611229, 0.0074741342104971409, 0.0023746099323034286, 0.0024339733645319939, 0.005076331552118063, 0.022223483771085739, 0.0030631492845714092, 0.0039819763042032719, 0.002802892355248332, 0.025083191692829132, 0.043153092265129089, 0.012443277053534985, 0.002006269758567214, 0.007021783385425806, 0.0041609271429479122, 0.0059742117300629616, 0.0081011094152927399, 0.0049967286176979542, 0.018041234463453293, 0.014878307469189167, 0.0039371903985738754, 0.010606441646814346, 0.0031967286486178637, 0.0036123627796769142, 0.013606827706098557, 0.016696637496352196, 0.0049063190817832947, 0.0093129249289631844, 0.0039843190461397171, 0.010763390921056271, 0.0050331670790910721, 0.015975778922438622, 0.0033509791828691959, 0.013025783933699131, 0.0051195556297898293, 0.02219669334590435, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 18438, 7392, 21878, 3779, 5893, 7280, -6909, 6953, 4276, -4756, -5095, 8548, -5391, -8031, 13542, 2748, -3291, 3821, -2930, 5311, 478, 6849, 5477, -4337, -582, -7811, 4493, -5671, 6187, 12719, 266, 466, 12194, 16471, 13040, 7524, 7939, -7705, 1568, 7448, -1261, -7378, 6581, 2295, 429, -10744, -19077, 3828, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00027733002207241952, 0.00039749479037709534, 5.2906136261299253e-05, 0.00050600338727235794, 0.00035475936601869762, 0.00025629741139709949, 0.0010444752406328917, 0.00061728211585432291, 0.00063704780768603086, 0.00031346993637271225, 8.3883409388363361e-05, 0.00028398685390129685, 0.0003288639709353447, 0.00074099533958360553, 0.00030493605299852788, 0.0010803501354530454, 0.00061537133296951652, 0.00018775848730001599, 0.00071313808439299464, 0.00099314330145716667, 0.00045942256110720336, 0.00027349014999344945, 6.1111153627280146e-05, 0.00030772178433835506, 0.00066893751500174403, 0.0005553686642087996, 0.00057392515009269118, 0.00024147266231011599, 0.00061620294582098722, 0.00048890896141529083, 0.00017972508794628084, 0.00031767220934852958, 0.0005563147715292871, 0.00018163812637794763, 0.00028365349862724543, 0.00025054431171156466, 0.00035779055906459689, 0.00078906246926635504, 0.00034520364715717733, 0.00041502254316583276, 0.00084138161037117243, 0.00042248819954693317, 0.00060744228539988399, 0.00014159303100313991, 0.00080650713061913848, 0.00037869223160669208, 0.00043924068449996412, 0.00028223835397511721, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -99,-109,20,-127,-58,-7,-7,2, 
  /* [1][0][][] */ -127,-11,93,0,-48,26,5,14, 
  /* [2][0][][] */ 19,-7,25,127,21,-20,-20,-1, 
  /* [3][0][][] */ -102,-74,-30,-17,37,127,-49,-31, 
  /* [4][0][][] */ -4,-34,-8,1,-9,6,-127,-71, 
  /* [5][0][][] */ -5,-37,-14,-1,-12,8,-127,-68, 
  /* [6][0][][] */ 127,9,15,-11,-65,20,4,-7, 
  /* [7][0][][] */ -127,-27,-15,9,70,16,0,10, 
  /* [8][0][][] */ 22,42,-10,-11,-27,-127,43,16, 
  /* [9][0][][] */ 79,24,-11,-5,-20,-5,-9,127, 
  /* [10][0][][] */ 117,-14,-118,9,-87,-12,40,127, 
  /* [11][0][][] */ -127,93,-1,-42,73,-65,3,27, 
  /* [12][0][][] */ 127,-30,-103,14,51,-7,-9,-24, 
  /* [13][0][][] */ 127,13,11,-13,-28,31,11,-16, 
  /* [14][0][][] */ -118,-92,89,-30,82,-20,-44,-127, 
  /* [15][0][][] */ 33,70,3,-6,-10,-127,-18,9, 
  /* [16][0][][] */ -10,-68,11,2,13,127,10,7, 
  /* [17][0][][] */ 29,-119,-78,-13,-30,127,-55,-16, 
  /* [18][0][][] */ 38,-14,-14,-19,-20,24,127,-12, 
  /* [19][0][][] */ -7,19,0,-127,-13,32,-5,-10, 
  /* [20][0][][] */ -79,-35,79,9,59,105,-10,-127, 
  /* [21][0][][] */ -20,-4,35,-28,-15,7,-127,-73, 
  /* [22][0][][] */ 67,-3,2,127,-14,-10,55,32, 
  /* [23][0][][] */ 126,-15,-127,-5,26,-23,6,11, 
  /* [24][0][][] */ -33,25,30,31,12,-1,-127,-88, 
  /* [25][0][][] */ 127,10,-85,6,17,-7,8,24, 
  /* [26][0][][] */ 0,50,-30,-127,-28,19,0,0, 
  /* [27][0][][] */ 127,13,-105,0,-94,41,16,80, 
  /* [28][0][][] */ -127,-20,-24,21,59,13,-1,33, 
  /* [29][0][][] */ -7,-127,-18,-126,-11,28,-16,-21, 
  /* [30][0][][] */ 9,87,127,34,45,-97,105,37, 
  /* [31][0][][] */ -77,0,-127,40,-3,-23,94,97, 
  /* [32][0][][] */ -1,-117,1,-127,-9,9,-8,-20, 
  /* [33][0][][] */ 17,-127,-7,-111,10,19,0,-21, 
  /* [34][0][][] */ -31,-45,33,-98,33,-58,127,75, 
  /* [35][0][][] */ -127,13,50,1,-113,-19,30,93, 
  /* [36][0][][] */ -127,22,116,2,-37,22,-27,30, 
  /* [37][0][][] */ 127,15,-8,-6,-78,23,1,17, 
  /* [38][0][][] */ -69,-3,82,42,68,-59,45,127, 
  /* [39][0][][] */ -127,-4,70,-2,-68,16,-7,6, 
  /* [40][0][][] */ -7,21,40,-12,21,-3,127,45, 
  /* [41][0][][] */ 127,-10,-73,2,55,13,6,-8, 
  /* [42][0][][] */ -13,-127,29,-7,16,8,-4,-19, 
  /* [43][0][][] */ 13,127,125,1,58,-102,69,17, 
  /* [44][0][][] */ 6,-13,-3,117,0,-127,-2,3, 
  /* [45][0][][] */ 127,-36,31,-4,-66,109,7,5, 
  /* [46][0][][] */ 12,122,-19,101,-1,127,26,40, 
  /* [47][0][][] */ -20,37,13,-28,24,-37,127,78, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0057771098800003529, 0.0082802837714552879, 0.0011020969832316041, 0.010540644638240337, 0.0073900544084608555, 0.0053389761596918106, 0.021757645532488823, 0.012858711183071136, 0.013270454481244087, 0.0065299472771584988, 0.0017473900225013494, 0.0059157796204090118, 0.0068506230600178242, 0.015435803681612015, 0.0063521764241158962, 0.022504962980747223, 0.012818907387554646, 0.003911229781806469, 0.014855504035949707, 0.020688341930508614, 0.0095703117549419403, 0.0056971213780343533, 0.001273017143830657, 0.0064102062024176121, 0.013934753835201263, 0.011568981222808361, 0.011955535039305687, 0.0050301593728363514, 0.012836230918765068, 0.010184547863900661, 0.0037438848521560431, 0.0066174855455756187, 0.011588689871132374, 0.0037837354466319084, 0.0059088356792926788, 0.0052191326394677162, 0.0074531976133584976, 0.016437098383903503, 0.0071909977123141289, 0.0086454069241881371, 0.017526967450976372, 0.008800925686955452, 0.012653736397624016, 0.0029495491180568933, 0.016800491139292717, 0.0078886039555072784, 0.0091498997062444687, 0.0058793565258383751, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 4063, -4884, -170, 3318, 2527, 704, -3198, 2738, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 7.1045724325813353e-05, 0.00012822780990973115, 8.5791303717996925e-05, 5.9633261116687208e-05, 0.00013004110951442271, 0.00018236083269584924, 0.00010411639959784225, 0.00018141625332646072, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -22,-1,-45,-31,-16,39,-127,-5, 
  /* [1][0][][] */ 18,93,2,127,12,-6,-7,-34, 
  /* [2][0][][] */ 127,-8,-38,-57,-70,44,94,-55, 
  /* [3][0][][] */ 10,-127,42,-76,18,-81,27,54, 
  /* [4][0][][] */ 127,1,-65,-14,27,-1,-127,-51, 
  /* [5][0][][] */ 1,-34,2,35,2,-127,-2,8, 
  /* [6][0][][] */ 127,-26,120,6,107,-33,-1,6, 
  /* [7][0][][] */ -127,-2,-90,-1,-98,9,35,5, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0031091992277652025, 0.0056116795167326927, 0.0037545154336839914, 0.0026097516529262066, 0.0056910351850092411, 0.00798072200268507, 0.0045564831234514713, 0.0079393843188881874, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { -11344, 12203, 369, -13498, -531, -15272, 274, 166, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00031498068710789084, 0.00041130406316369772, 0.00021406768064480275, 0.0002872813493013382, 0.00023043026158120483, 0.00031076735467649996, 0.0010823525954037905, 0.0021946895867586136, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -2,-1,11,16,7,2,8,28, 5,0,-40,127,-23,2,-4,25, -6,-1,-7,18,-4,3,-6,16, 
  /* [0][1][][] */ -7,1,127,-26,127,-1,-111,36, 127,-127,-107,4,-97,127,-14,-127, -31,4,16,-23,-5,0,127,35, 
  /* [0][2][][] */ 0,2,13,1,12,1,17,29, 6,5,-44,-1,-15,5,-9,-103, -5,0,-8,3,0,1,-5,33, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.014587860554456711, 0.019048934802412987, 0.0099142249673604965, 0.013305006548762321, 0.01067203376442194, 0.014392726123332977, 0.050127547234296799, 0.10164377093315125, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 30675, 22397, 723, 41703, 3129, 18580, 90234, -4445, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 8.2507438492029905e-05, 9.7111624199897051e-05, 0.00010785961057990789, 6.6327418608125299e-05, 0.00015981330943759531, 0.00013440233306027949, 6.6234742917004041e-06, 1.8864076992031187e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 50, 8, 
  /* [0][1][][] */ -127, 121, 0, 
  /* [0][2][][] */ -42, 47, 0, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -68, -79, -44, 
  /* [1][2][][] */ 8, -41, 5, 
  /* [2][0][][] */ 29, 26, -47, 
  /* [2][1][][] */ 50, 67, -127, 
  /* [2][2][][] */ 21, 32, -58, 
  /* [3][0][][] */ 41, 51, 19, 
  /* [3][1][][] */ 52, 73, 25, 
  /* [3][2][][] */ -81, -127, -58, 
  /* [4][0][][] */ 4, -53, 47, 
  /* [4][1][][] */ 16, -127, 112, 
  /* [4][2][][] */ 4, -37, 32, 
  /* [5][0][][] */ 1, -57, -1, 
  /* [5][1][][] */ -1, 127, 1, 
  /* [5][2][][] */ 0, -76, -1, 
  /* [6][0][][] */ -14, -81, 1, 
  /* [6][1][][] */ -26, -127, -8, 
  /* [6][2][][] */ -9, -49, 5, 
  /* [7][0][][] */ 39, -127, 27, 
  /* [7][1][][] */ -22, -7, -13, 
  /* [7][2][][] */ -26, 70, -15, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.026043914258480072, 0.030653802677989006, 0.034046463668346405, 0.020936604589223862, 0.050445925444364548, 0.042424812912940979, 0.0020907351281493902, 0.0059545468538999557, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.021591972559690475, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.022850167006254196, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.040845751762390137, } };
const TfArray<1, int> quant46_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.04800497367978096, } };
const TfArray<1, int> quant47_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.039314191788434982, } };
const TfArray<1, int> quant51_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.018355755135416985, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.05095919594168663, } };
const TfArray<1, int> quant54_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.057312142103910446, } };
const TfArray<1, int> quant55_zero = { 1, { 33 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023269321769475937, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023269321769475937, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.017804121598601341, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.042066950350999832, } };
const TfArray<1, int> quant59_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.015292860567569733, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.025832049548625946, } };
const TfArray<1, int> quant62_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.051830358803272247, } };
const TfArray<1, int> quant63_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.020752562209963799, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.015329595655202866, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.034866344183683395, } };
const TfArray<1, int> quant66_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.049353975802659988, } };
const TfArray<1, int> quant67_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.017361687496304512, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.023574423044919968, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.047989301383495331, } };
const TfArray<1, int> quant70_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,6,6,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9216, (TfLiteIntArray*)&tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4608, (TfLiteIntArray*)&tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension47, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension48, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension49, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension51, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension53, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension55, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension56, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension57, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4608, (TfLiteIntArray*)&tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension60, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension61, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension62, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4320, (TfLiteIntArray*)&tensor_dimension63, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension64, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2016, (TfLiteIntArray*)&tensor_dimension66, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension67, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension69, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80, (TfLiteIntArray*)&tensor_dimension70, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 28; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 28; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  71, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
