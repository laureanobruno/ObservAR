
examples/c/sapi/servo/out/servo.elf:     file format elf32-littlearm
examples/c/sapi/servo/out/servo.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00056d

Program Header:
0x70000001 off    0x000133d4 vaddr 0x1a0033d4 paddr 0x1a0033d4 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000220 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000033dc memsz 0x000033dc flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0033dc align 2**16
         filesz 0x00000118 memsz 0x00000118 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033d0  1a000000  1a000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  10000000  1a0033dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020118  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020118  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020118  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020118  2**2
                  CONTENTS
  6 .bss          00000108  10000118  10000118  00000118  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020118  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020118  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020118  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020118  2**2
                  CONTENTS
 11 .init_array   00000004  1a0033d0  1a0033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0033d4  1a0033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020118  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020118  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020118  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020118  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020118  2**2
                  CONTENTS
 18 .noinit       00000000  10000220  10000220  00020118  2**2
                  CONTENTS
 19 .debug_info   0002226e  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004ee0  00000000  00000000  00042386  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000983d  00000000  00000000  00047266  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000b90  00000000  00000000  00050aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000c68  00000000  00000000  00051633  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000cdcd  00000000  00000000  0005229b  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00011fab  00000000  00000000  0005f068  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00028ca1  00000000  00000000  00071013  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  00099cb4  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  00099d1c  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001ef0  00000000  00000000  00099d50  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000118 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0033d0 l    d  .init_array	00000000 .init_array
1a0033d4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000220 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0019d8 l     F .text	000000a4 uartProcessIRQ
10000134 l     O .bss	00000004 rxIsrCallbackUART0
10000138 l     O .bss	00000004 rxIsrCallbackUART2
1000013c l     O .bss	00000004 rxIsrCallbackUART3
10000140 l     O .bss	00000004 txIsrCallbackUART0
10000144 l     O .bss	00000004 txIsrCallbackUART2
10000148 l     O .bss	00000004 txIsrCallbackUART3
1a003334 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 servo.c
00000000 l    df *ABS*	00000000 buffer.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0030a4 l     O .text	00000004 InitClkStates
1a0030a8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a0006a8 l     F .text	00000044 Board_LED_Init
1a0006ec l     F .text	00000040 Board_TEC_Init
1a00072c l     F .text	00000040 Board_GPIO_Init
1a00076c l     F .text	00000030 Board_ADC_Init
1a00079c l     F .text	00000038 Board_SPI_Init
1a0007d4 l     F .text	00000024 Board_I2C_Init
1a003120 l     O .text	00000008 GpioButtons
1a003128 l     O .text	0000000c GpioLeds
1a003134 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a000854 l     F .text	00000014 Chip_SSP_GetClockIndex
1a000868 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 timer_18xx_43xx.c
1a000988 l     F .text	0000002c Chip_TIMER_GetClockIndex
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0009d8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0009ec l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00314c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000c0c l     F .text	000000a0 pll_calc_divs
1a000cac l     F .text	0000010c pll_get_frac
1a000db8 l     F .text	0000004c Chip_Clock_FindBaseClock
1a00102c l     F .text	00000022 Chip_Clock_GetDivRate
1000011c l     O .bss	00000008 audio_usb_pll_freq
1a0031a0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001198 l     F .text	0000002c Chip_UART_GetIndex
1a00320c l     O .text	00000008 UART_BClock
1a003214 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001388 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_timer.c
1a001650 l     F .text	00000002 errorOcurred
1a001652 l     F .text	00000002 doNothing
1000003c l     O .data	00000040 timer_dd
1a003304 l     O .text	00000030 timer_sd
00000000 l    df *ABS*	00000000 sapi_tick.c
10000124 l     O .bss	00000004 callBackFuncParams
10000128 l     O .bss	00000008 tickCounter
10000130 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000014c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_servo.c
10000088 l     O .data	00000048 AttachedServoList
1a00337c l     O .text	00000009 servoMap
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a002054 l     F .text	00000010 clearInterrupt
1a002064 l     F .text	0000005c serveInterrupt
100000d0 l     O .data	00000048 ultrasonicSensors
1a003388 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 s_atan.c
1a003390 l     O .text	00000020 atanhi
1a0033b0 l     O .text	00000020 atanlo
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a0033d4 l       .init_array	00000000 __init_array_end
1a0033d0 l       .bss_RAM5	00000000 __preinit_array_end
1a0033d0 l       .init_array	00000000 __init_array_start
1a0033d0 l       .bss_RAM5	00000000 __preinit_array_start
1a000e50 g     F .text	0000001c Chip_Clock_GetDividerSource
1a002cbc g     F .text	00000012 .hidden __aeabi_dcmple
1a001890 g     F .text	00000044 TIMER2_IRQHandler
1a001bb0 g     F .text	00000014 uartRxRead
1a002bf8 g     F .text	0000007a .hidden __cmpdf2
1a002438 g     F .text	00000012 fabs
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a002bf8 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002768 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0004e4 g     F .text	00000034 bufferPush
1a00084c g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000a92 g     F .text	0000000c Chip_ADC_SetResolution
1a0019ac g     F .text	0000002c SysTick_Handler
1a002008 g     F .text	00000024 servoInit
1a001218 g     F .text	00000040 Chip_UART_SetBaud
1a000568  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a001d84 g     F .text	0000001c timer2CompareMatch2func
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a0033dc g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a002be8 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff7322 g       *ABS*	00000000 __valid_user_code_checksum
1a0033dc g       .ARM.exidx	00000000 _etext
1a002c84 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0018d4 g     F .text	00000044 TIMER3_IRQHandler
1a0010ce g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a001f80 g     F .text	00000058 servoAttach
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0009c0 g     F .text	00000018 Chip_TIMER_Reset
1a002c74 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0026f0 g     F .text	00000022 .hidden __floatsidf
1a002bf0 g     F .text	00000082 .hidden __ltdf2
1a000368 g     F .text	0000001c BTN_config
1a002d48 g     F .text	00000000 .hidden __aeabi_uldivmod
10000220 g       .noinit	00000000 _noinit
10000218 g     O .bss	00000004 SystemCoreClock
1a000300 g     F .text	00000024 onRx
1a0011c4 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a00114c g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a001df4 g     F .text	0000001c timer3CompareMatch3func
1a000630 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0026d0 g     F .text	0000001e .hidden __aeabi_ui2d
1a001fd8 g     F .text	00000030 servoDetach
1a002d78 g     F .text	000002d0 .hidden __udivmoddi4
1a00244c g     F .text	00000000 .hidden __aeabi_drsub
1a00311c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a001d14 g     F .text	0000001c timer1CompareMatch1func
1a000300 g       .text	00000000 __CRP_WORD_END__
1a002ca8 g     F .text	00000012 .hidden __aeabi_dcmplt
1a0020ca g     F .text	0000000a GPIO1_IRQHandler
10000118 g     O .bss	00000001 stringReceived
1a002714 g     F .text	00000042 .hidden __extendsfdf2
1a002a18 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002458 g     F .text	00000276 .hidden __adddf3
1a0033d4 g       .ARM.exidx	00000000 __exidx_start
1a0027c4 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a00304c g     F .text	00000048 __libc_init_array
1a000324 g     F .text	00000030 initializeUART
1a0026d0 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a00081c g     F .text	00000030 Board_Init
1a0005f6  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a001d4c g     F .text	0000001c timer1CompareMatch3func
1a001f58 g     F .text	00000028 servoIsAttached
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000220 g       .bss	00000000 _ebss
1a001810 g     F .text	00000040 TIMER0_IRQHandler
1a00056c g     F .text	00000088 Reset_Handler
1a001930 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001d68 g     F .text	0000001c timer2CompareMatch1func
1a00094c g     F .text	00000038 Chip_I2C_SetClockRate
1a002cf8 g     F .text	0000004e .hidden __fixdfsi
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000e04 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002458 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a002bf0 g     F .text	00000082 .hidden __ledf2
1a002758 g     F .text	0000006a .hidden __aeabi_ul2d
1a001850 g     F .text	00000040 TIMER1_IRQHandler
1a000928 g     F .text	00000024 Chip_I2C_Init
1a001c6e g     F .text	0000000a UART2_IRQHandler
1a000fc0 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00321c g     O .text	000000e6 gpioPinsInit
1a001a7c g     F .text	00000090 uartInterrupt
1a001c54 g     F .text	0000001a uartWriteByte
1a000880 g     F .text	00000012 Chip_SSP_SetClockRate
1a002ce4 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a00163a g     F .text	00000016 gpioToggle
1a0020d4 g     F .text	0000000a GPIO2_IRQHandler
1a001654 g     F .text	00000120 Timer_Init
1a001774 g     F .text	00000008 Timer_microsecondsToTicks
1a0010a8 g     F .text	00000026 Chip_Clock_GetBaseClock
1a002cd0 g     F .text	00000012 .hidden __aeabi_dcmpge
1a001f10 g     F .text	00000048 servoInitTimers
10000118 g       .bss	00000000 _bss
1a000a60 g     F .text	00000032 Chip_ADC_SetSampleRate
1a002454 g     F .text	0000027a .hidden __aeabi_dsub
1a002758 g     F .text	0000006a .hidden __floatundidf
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000892 g     F .text	0000003e Chip_SSP_SetBitRate
10000150 g     O .bss	000000c8 buffer
1a000984 g     F .text	00000002 Chip_GPIO_Init
1a003148 g     O .text	00000004 OscRateIn
1a001bd8 g     F .text	0000007c uartInit
1a001e2c g     F .text	0000004c timer1CompareMatch0func
10000220 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a0009b4 g     F .text	0000000c Chip_TIMER_Init
1a000178 g       .text	00000000 __bss_section_table_end
1a0026f0 g     F .text	00000022 .hidden __aeabi_i2d
1a0013bc g     F .text	000001ac gpioInit
1a000534 g     F .text	00000034 bufferPop
1a003048  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002a18 g     F .text	000001d0 .hidden __divdf3
1a0027c4 g     F .text	00000254 .hidden __muldf3
1a001c84 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0017b4 g     F .text	00000044 Timer_DisableCompareMatch
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a000e6c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003094 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000388 g     F .text	0000012c main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a00177c g     F .text	00000038 Timer_EnableCompareMatch
1a002768 g     F .text	0000005a .hidden __aeabi_l2d
1a001b98 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0010dc g     F .text	0000003c Chip_Clock_EnableOpts
1a00202c g     F .text	00000028 servoWrite
1a000e88 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000f40 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001334 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a000518 g     F .text	0000001c bufferIsEmpty
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002bf8 g     F .text	0000007a .hidden __nedf2
1a001568 g     F .text	0000006a gpioWrite
1a0005f4  w    F .text	00000002 _fini
1a0020e0 g     F .text	00000358 atan
10000119 g     O .bss	00000001 pRead
1a0004b4 g     F .text	00000030 bufferIsFull
1a000a20 g     F .text	00000040 Chip_ADC_Init
1000021c g     O .bss	00000004 g_pUsbApi
1a0005f8 g     F .text	00000038 Board_SetupMuxing
1a001258 g     F .text	000000dc Chip_UART_SetBaudFDR
10000080 g     O .data	00000008 tickRateMS
1a001dd8 g     F .text	0000001c timer3CompareMatch2func
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a001bc4 g     F .text	00000014 uartTxWrite
1a001e10 g     F .text	0000001c valueToMicroseconds
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000220 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0008d0 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0007f8 g     F .text	00000024 Board_Debug_Init
1a002c94 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a000354 g     F .text	00000014 initializeServo
10000118 g       .data	00000000 _edata
1a001da0 g     F .text	0000001c timer2CompareMatch3func
1a000908 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a000aa0 g     F .text	00000158 Chip_SetupCoreClock
1a0020c0 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000bf8 g     F .text	00000014 SystemCoreClockUpdate
1a001dbc g     F .text	0000001c timer3CompareMatch1func
1a002cf8 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003048  w    F .text	00000002 .hidden __aeabi_idiv0
1a001e78 g     F .text	0000004c timer2CompareMatch0func
1a001b0c g     F .text	0000008c uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1a001118 g     F .text	00000034 Chip_Clock_Enable
1a002c84 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a002be8 g     F .text	0000008a .hidden __gedf2
1a001c78 g     F .text	0000000a UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0015d2 g     F .text	00000068 gpioRead
1a002714 g     F .text	00000042 .hidden __aeabi_f2d
1a001ca0 g     F .text	00000074 boardInit
1a001ec4 g     F .text	0000004c timer3CompareMatch0func
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1000011a g     O .bss	00000001 pWrite
1a002454 g     F .text	0000027a .hidden __subdf3
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0017f8 g     F .text	00000018 Timer_SetCompareMatch
1a001d30 g     F .text	0000001c timer1CompareMatch2func
1a001918 g     F .text	00000018 tickPowerSet
1a001050 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00136c g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a00069c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 6d 05 00 1a 79 01 00 1a 7b 01 00 1a     ....m...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 22 73 ff 53     }..........."s.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	ad 19 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	85 1c 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	11 18 00 1a 51 18 00 1a 91 18 00 1a d5 18 00 1a     ....Q...........
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 6f 1c 00 1a 79 1c 00 1a     ........o...y...
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	c1 20 00 1a cb 20 00 1a d5 20 00 1a bb 01 00 1a     . ... ... ......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0033dc 	.word	0x1a0033dc
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000118 	.word	0x00000118
1a000120:	1a0033dc 	.word	0x1a0033dc
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0033dc 	.word	0x1a0033dc
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0033dc 	.word	0x1a0033dc
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0033dc 	.word	0x1a0033dc
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000118 	.word	0x10000118
1a000154:	00000108 	.word	0x00000108
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f001 fc0a 	bl	1a0019d8 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x1a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <onRx>:
bool_t initializeServo();

char volatile stringReceived = 0; // Flag de dato recibido por UART

void onRx(void *noUsado)
{
1a000300:	b508      	push	{r3, lr}
    char c = uartRxRead(UART_232);
1a000302:	2005      	movs	r0, #5
1a000304:	f001 fc54 	bl	1a001bb0 <uartRxRead>
    if (c == '\n')
1a000308:	280a      	cmp	r0, #10
1a00030a:	d105      	bne.n	1a000318 <onRx+0x18>
    {
        stringReceived += 1;
1a00030c:	4a04      	ldr	r2, [pc, #16]	; (1a000320 <onRx+0x20>)
1a00030e:	7813      	ldrb	r3, [r2, #0]
1a000310:	3301      	adds	r3, #1
1a000312:	b2db      	uxtb	r3, r3
1a000314:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        bufferPush(c);
    }
}
1a000316:	bd08      	pop	{r3, pc}
        bufferPush(c);
1a000318:	f000 f8e4 	bl	1a0004e4 <bufferPush>
}
1a00031c:	e7fb      	b.n	1a000316 <onRx+0x16>
1a00031e:	bf00      	nop
1a000320:	10000118 	.word	0x10000118

1a000324 <initializeUART>:
        }
    }
}

void initializeUART()
{
1a000324:	b508      	push	{r3, lr}
    uartConfig(UART_USB, 9600);   // Initialize UART_USB at 115200 baud rate
1a000326:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a00032a:	2003      	movs	r0, #3
1a00032c:	f001 fc54 	bl	1a001bd8 <uartInit>
    uartConfig(UART_232, 115200); // Initialize UART_232 (which we'll use for communication) at 115200 baud rate
1a000330:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000334:	2005      	movs	r0, #5
1a000336:	f001 fc4f 	bl	1a001bd8 <uartInit>
    // Seteo un callback al evento de recepcion y habilito su interrupcion
    uartCallbackSet(UART_232, UART_RECEIVE, onRx, NULL);
1a00033a:	2300      	movs	r3, #0
1a00033c:	4a04      	ldr	r2, [pc, #16]	; (1a000350 <initializeUART+0x2c>)
1a00033e:	4619      	mov	r1, r3
1a000340:	2005      	movs	r0, #5
1a000342:	f001 fbe3 	bl	1a001b0c <uartCallbackSet>
    // Habilito todas las interrupciones de UART_USB
    uartInterrupt(UART_232, true);
1a000346:	2101      	movs	r1, #1
1a000348:	2005      	movs	r0, #5
1a00034a:	f001 fb97 	bl	1a001a7c <uartInterrupt>
}
1a00034e:	bd08      	pop	{r3, pc}
1a000350:	1a000301 	.word	0x1a000301

1a000354 <initializeServo>:

bool_t initializeServo()
{
1a000354:	b508      	push	{r3, lr}
    bool_t valor = 0;
    uint8_t servoAngle = 0; // 0 to 180 degrees
    valor = servoConfig(0, SERVO_ENABLE);
1a000356:	2100      	movs	r1, #0
1a000358:	4608      	mov	r0, r1
1a00035a:	f001 fe55 	bl	1a002008 <servoInit>
    valor = servoConfig(SERVO_N, SERVO_ENABLE_OUTPUT);
1a00035e:	2102      	movs	r1, #2
1a000360:	2001      	movs	r0, #1
1a000362:	f001 fe51 	bl	1a002008 <servoInit>
    return valor;
}
1a000366:	bd08      	pop	{r3, pc}

1a000368 <BTN_config>:

void BTN_config()
{
1a000368:	b508      	push	{r3, lr}
    gpioConfig(BTN_START, GPIO_INPUT_PULLUP);
1a00036a:	2102      	movs	r1, #2
1a00036c:	200d      	movs	r0, #13
1a00036e:	f001 f825 	bl	1a0013bc <gpioInit>
    gpioConfig(BTN_STOP, GPIO_INPUT_PULLUP);
1a000372:	2102      	movs	r1, #2
1a000374:	200e      	movs	r0, #14
1a000376:	f001 f821 	bl	1a0013bc <gpioInit>
    gpioConfig(BTN_RESET, GPIO_INPUT_PULLUP);
1a00037a:	2102      	movs	r1, #2
1a00037c:	200f      	movs	r0, #15
1a00037e:	f001 f81d 	bl	1a0013bc <gpioInit>
}
1a000382:	bd08      	pop	{r3, pc}
1a000384:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a000388 <main>:
{
1a000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    boardConfig();
1a00038a:	f001 fc89 	bl	1a001ca0 <boardInit>
    BTN_config();     // Configuro los botones con pull-up interno
1a00038e:	f7ff ffeb 	bl	1a000368 <BTN_config>
    initializeUART(); // Inicializo UART_USB y UART_232
1a000392:	f7ff ffc7 	bl	1a000324 <initializeUART>
    bool_t servoConfig = initializeServo();
1a000396:	f7ff ffdd 	bl	1a000354 <initializeServo>
    servoWrite(SERVO_N, 90);
1a00039a:	215a      	movs	r1, #90	; 0x5a
1a00039c:	2001      	movs	r0, #1
1a00039e:	f001 fe45 	bl	1a00202c <servoWrite>
    uint8_t anguloAct = 90;
1a0003a2:	265a      	movs	r6, #90	; 0x5a
    bool_t moving = 1; // Flag de movimiento e interrupciones de UART
1a0003a4:	2501      	movs	r5, #1
1a0003a6:	e052      	b.n	1a00044e <main+0xc6>
            uartInterrupt(UART_232, true);
1a0003a8:	2101      	movs	r1, #1
1a0003aa:	2005      	movs	r0, #5
1a0003ac:	f001 fb66 	bl	1a001a7c <uartInterrupt>
            gpioWrite(LED1, 0);
1a0003b0:	2100      	movs	r1, #0
1a0003b2:	202b      	movs	r0, #43	; 0x2b
1a0003b4:	f001 f8d8 	bl	1a001568 <gpioWrite>
            moving = 1;
1a0003b8:	2501      	movs	r5, #1
1a0003ba:	e04d      	b.n	1a000458 <main+0xd0>
            uartInterrupt(UART_232, false);
1a0003bc:	2100      	movs	r1, #0
1a0003be:	2005      	movs	r0, #5
1a0003c0:	f001 fb5c 	bl	1a001a7c <uartInterrupt>
            gpioWrite(LED1, 1);
1a0003c4:	2101      	movs	r1, #1
1a0003c6:	202b      	movs	r0, #43	; 0x2b
1a0003c8:	f001 f8ce 	bl	1a001568 <gpioWrite>
            moving = 0;
1a0003cc:	4625      	mov	r5, r4
1a0003ce:	e049      	b.n	1a000464 <main+0xdc>
            servoWrite(SERVO_N, 90);
1a0003d0:	215a      	movs	r1, #90	; 0x5a
1a0003d2:	2001      	movs	r0, #1
1a0003d4:	f001 fe2a 	bl	1a00202c <servoWrite>
            gpioToggle(LED2);
1a0003d8:	202c      	movs	r0, #44	; 0x2c
1a0003da:	f001 f92e 	bl	1a00163a <gpioToggle>
            anguloAct=90;
1a0003de:	265a      	movs	r6, #90	; 0x5a
1a0003e0:	e045      	b.n	1a00046e <main+0xe6>
                if (valor == 176) gpioToggle(LEDB);
1a0003e2:	2cb0      	cmp	r4, #176	; 0xb0
1a0003e4:	d058      	beq.n	1a000498 <main+0x110>
					int8_t alfa = (atan(abs(valor - 24) * 0.017)) * (57.295/2);
1a0003e6:	f1a4 0018 	sub.w	r0, r4, #24
1a0003ea:	2800      	cmp	r0, #0
1a0003ec:	bfb8      	it	lt
1a0003ee:	4240      	neglt	r0, r0
1a0003f0:	f002 f97e 	bl	1a0026f0 <__aeabi_i2d>
1a0003f4:	a32b      	add	r3, pc, #172	; (adr r3, 1a0004a4 <main+0x11c>)
1a0003f6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0003fa:	f002 f9e3 	bl	1a0027c4 <__aeabi_dmul>
1a0003fe:	ec41 0b10 	vmov	d0, r0, r1
1a000402:	f001 fe6d 	bl	1a0020e0 <atan>
1a000406:	a329      	add	r3, pc, #164	; (adr r3, 1a0004ac <main+0x124>)
1a000408:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00040c:	ec51 0b10 	vmov	r0, r1, d0
1a000410:	f002 f9d8 	bl	1a0027c4 <__aeabi_dmul>
1a000414:	f002 fc70 	bl	1a002cf8 <__aeabi_d2iz>
1a000418:	b247      	sxtb	r7, r0
					if (valor >= 24) alfa = - alfa;
1a00041a:	2c17      	cmp	r4, #23
1a00041c:	d901      	bls.n	1a000422 <main+0x9a>
1a00041e:	427f      	negs	r7, r7
1a000420:	b27f      	sxtb	r7, r7
					uartWriteByte(UART_USB, alfa);
1a000422:	b2fc      	uxtb	r4, r7
1a000424:	4621      	mov	r1, r4
1a000426:	2003      	movs	r0, #3
1a000428:	f001 fc14 	bl	1a001c54 <uartWriteByte>
					if (((anguloAct + alfa) >= 0) && ((anguloAct + alfa) <= 180))  anguloAct += alfa;
1a00042c:	4437      	add	r7, r6
1a00042e:	2fb4      	cmp	r7, #180	; 0xb4
1a000430:	d801      	bhi.n	1a000436 <main+0xae>
1a000432:	4426      	add	r6, r4
1a000434:	b2f6      	uxtb	r6, r6
					servoWrite(SERVO_N, anguloAct);
1a000436:	4631      	mov	r1, r6
1a000438:	2001      	movs	r0, #1
1a00043a:	f001 fdf7 	bl	1a00202c <servoWrite>
					gpioToggle(LED3);
1a00043e:	202d      	movs	r0, #45	; 0x2d
1a000440:	f001 f8fb 	bl	1a00163a <gpioToggle>
                stringReceived -= 1;
1a000444:	4a16      	ldr	r2, [pc, #88]	; (1a0004a0 <main+0x118>)
1a000446:	7813      	ldrb	r3, [r2, #0]
1a000448:	3b01      	subs	r3, #1
1a00044a:	b2db      	uxtb	r3, r3
1a00044c:	7013      	strb	r3, [r2, #0]
        if (!gpioRead(BTN_START))
1a00044e:	200d      	movs	r0, #13
1a000450:	f001 f8bf 	bl	1a0015d2 <gpioRead>
1a000454:	2800      	cmp	r0, #0
1a000456:	d0a7      	beq.n	1a0003a8 <main+0x20>
        if (!gpioRead(BTN_STOP))
1a000458:	200e      	movs	r0, #14
1a00045a:	f001 f8ba 	bl	1a0015d2 <gpioRead>
1a00045e:	4604      	mov	r4, r0
1a000460:	2800      	cmp	r0, #0
1a000462:	d0ab      	beq.n	1a0003bc <main+0x34>
        if (!gpioRead(BTN_RESET))
1a000464:	200f      	movs	r0, #15
1a000466:	f001 f8b4 	bl	1a0015d2 <gpioRead>
1a00046a:	2800      	cmp	r0, #0
1a00046c:	d0b0      	beq.n	1a0003d0 <main+0x48>
        if (moving)
1a00046e:	2d00      	cmp	r5, #0
1a000470:	d0ed      	beq.n	1a00044e <main+0xc6>
            if (stringReceived >= 1)
1a000472:	4b0b      	ldr	r3, [pc, #44]	; (1a0004a0 <main+0x118>)
1a000474:	781b      	ldrb	r3, [r3, #0]
1a000476:	2b00      	cmp	r3, #0
1a000478:	d0e9      	beq.n	1a00044e <main+0xc6>
                uint8_t c = bufferPop();
1a00047a:	f000 f85b 	bl	1a000534 <bufferPop>
                uint8_t valor = 0;
1a00047e:	2400      	movs	r4, #0
                while (c != '\r')
1a000480:	280d      	cmp	r0, #13
1a000482:	d0ae      	beq.n	1a0003e2 <main+0x5a>
                    valor = (valor * 10) + (c - '0');
1a000484:	eb04 0484 	add.w	r4, r4, r4, lsl #2
1a000488:	0063      	lsls	r3, r4, #1
1a00048a:	4418      	add	r0, r3
1a00048c:	b2c0      	uxtb	r0, r0
1a00048e:	3830      	subs	r0, #48	; 0x30
1a000490:	b2c4      	uxtb	r4, r0
                    c = bufferPop();
1a000492:	f000 f84f 	bl	1a000534 <bufferPop>
1a000496:	e7f3      	b.n	1a000480 <main+0xf8>
                if (valor == 176) gpioToggle(LEDB);
1a000498:	202a      	movs	r0, #42	; 0x2a
1a00049a:	f001 f8ce 	bl	1a00163a <gpioToggle>
1a00049e:	e7d1      	b.n	1a000444 <main+0xbc>
1a0004a0:	10000118 	.word	0x10000118
1a0004a4:	b020c49c 	.word	0xb020c49c
1a0004a8:	3f916872 	.word	0x3f916872
1a0004ac:	8f5c28f6 	.word	0x8f5c28f6
1a0004b0:	403ca5c2 	.word	0x403ca5c2

1a0004b4 <bufferIsFull>:
	}
}

uint8_t bufferIsFull()
{
	return (((pWrite + 1) % DIMF) == pRead);
1a0004b4:	4b08      	ldr	r3, [pc, #32]	; (1a0004d8 <bufferIsFull+0x24>)
1a0004b6:	781a      	ldrb	r2, [r3, #0]
1a0004b8:	3201      	adds	r2, #1
1a0004ba:	4b08      	ldr	r3, [pc, #32]	; (1a0004dc <bufferIsFull+0x28>)
1a0004bc:	fb83 1302 	smull	r1, r3, r3, r2
1a0004c0:	119b      	asrs	r3, r3, #6
1a0004c2:	21c8      	movs	r1, #200	; 0xc8
1a0004c4:	fb01 2313 	mls	r3, r1, r3, r2
1a0004c8:	4a05      	ldr	r2, [pc, #20]	; (1a0004e0 <bufferIsFull+0x2c>)
1a0004ca:	7810      	ldrb	r0, [r2, #0]
}
1a0004cc:	4298      	cmp	r0, r3
1a0004ce:	bf14      	ite	ne
1a0004d0:	2000      	movne	r0, #0
1a0004d2:	2001      	moveq	r0, #1
1a0004d4:	4770      	bx	lr
1a0004d6:	bf00      	nop
1a0004d8:	1000011a 	.word	0x1000011a
1a0004dc:	51eb851f 	.word	0x51eb851f
1a0004e0:	10000119 	.word	0x10000119

1a0004e4 <bufferPush>:
{
1a0004e4:	b510      	push	{r4, lr}
1a0004e6:	4604      	mov	r4, r0
	if (!bufferIsFull())
1a0004e8:	f7ff ffe4 	bl	1a0004b4 <bufferIsFull>
1a0004ec:	b960      	cbnz	r0, 1a000508 <bufferPush+0x24>
		buffer[pWrite] = c;
1a0004ee:	4907      	ldr	r1, [pc, #28]	; (1a00050c <bufferPush+0x28>)
1a0004f0:	780a      	ldrb	r2, [r1, #0]
1a0004f2:	4b07      	ldr	r3, [pc, #28]	; (1a000510 <bufferPush+0x2c>)
1a0004f4:	549c      	strb	r4, [r3, r2]
		pWrite = (pWrite + 1) % DIMF;
1a0004f6:	3201      	adds	r2, #1
1a0004f8:	4b06      	ldr	r3, [pc, #24]	; (1a000514 <bufferPush+0x30>)
1a0004fa:	fb83 0302 	smull	r0, r3, r3, r2
1a0004fe:	119b      	asrs	r3, r3, #6
1a000500:	20c8      	movs	r0, #200	; 0xc8
1a000502:	fb00 2313 	mls	r3, r0, r3, r2
1a000506:	700b      	strb	r3, [r1, #0]
}
1a000508:	bd10      	pop	{r4, pc}
1a00050a:	bf00      	nop
1a00050c:	1000011a 	.word	0x1000011a
1a000510:	10000150 	.word	0x10000150
1a000514:	51eb851f 	.word	0x51eb851f

1a000518 <bufferIsEmpty>:

uint8_t bufferIsEmpty()
{
	return (pRead == pWrite);
1a000518:	4b04      	ldr	r3, [pc, #16]	; (1a00052c <bufferIsEmpty+0x14>)
1a00051a:	7818      	ldrb	r0, [r3, #0]
1a00051c:	4b04      	ldr	r3, [pc, #16]	; (1a000530 <bufferIsEmpty+0x18>)
1a00051e:	781b      	ldrb	r3, [r3, #0]
}
1a000520:	4298      	cmp	r0, r3
1a000522:	bf14      	ite	ne
1a000524:	2000      	movne	r0, #0
1a000526:	2001      	moveq	r0, #1
1a000528:	4770      	bx	lr
1a00052a:	bf00      	nop
1a00052c:	10000119 	.word	0x10000119
1a000530:	1000011a 	.word	0x1000011a

1a000534 <bufferPop>:
{
1a000534:	b510      	push	{r4, lr}
	if (!bufferIsEmpty())
1a000536:	f7ff ffef 	bl	1a000518 <bufferIsEmpty>
1a00053a:	b968      	cbnz	r0, 1a000558 <bufferPop+0x24>
		char aux = buffer[pRead];
1a00053c:	4907      	ldr	r1, [pc, #28]	; (1a00055c <bufferPop+0x28>)
1a00053e:	780a      	ldrb	r2, [r1, #0]
1a000540:	4b07      	ldr	r3, [pc, #28]	; (1a000560 <bufferPop+0x2c>)
1a000542:	5c98      	ldrb	r0, [r3, r2]
		pRead = (pRead + 1) % DIMF;
1a000544:	3201      	adds	r2, #1
1a000546:	4b07      	ldr	r3, [pc, #28]	; (1a000564 <bufferPop+0x30>)
1a000548:	fb83 4302 	smull	r4, r3, r3, r2
1a00054c:	119b      	asrs	r3, r3, #6
1a00054e:	24c8      	movs	r4, #200	; 0xc8
1a000550:	fb04 2313 	mls	r3, r4, r3, r2
1a000554:	700b      	strb	r3, [r1, #0]
		return aux;
1a000556:	e000      	b.n	1a00055a <bufferPop+0x26>
		return 0;
1a000558:	2000      	movs	r0, #0
}
1a00055a:	bd10      	pop	{r4, pc}
1a00055c:	10000119 	.word	0x10000119
1a000560:	10000150 	.word	0x10000150
1a000564:	51eb851f 	.word	0x51eb851f

1a000568 <initialise_monitor_handles>:
}
1a000568:	4770      	bx	lr
1a00056a:	Address 0x1a00056a is out of bounds.


1a00056c <Reset_Handler>:
void Reset_Handler(void) {
1a00056c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00056e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000570:	4b19      	ldr	r3, [pc, #100]	; (1a0005d8 <Reset_Handler+0x6c>)
1a000572:	4a1a      	ldr	r2, [pc, #104]	; (1a0005dc <Reset_Handler+0x70>)
1a000574:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000576:	3304      	adds	r3, #4
1a000578:	4a19      	ldr	r2, [pc, #100]	; (1a0005e0 <Reset_Handler+0x74>)
1a00057a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00057c:	2300      	movs	r3, #0
1a00057e:	e005      	b.n	1a00058c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000580:	4a18      	ldr	r2, [pc, #96]	; (1a0005e4 <Reset_Handler+0x78>)
1a000582:	f04f 31ff 	mov.w	r1, #4294967295
1a000586:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00058a:	3301      	adds	r3, #1
1a00058c:	2b07      	cmp	r3, #7
1a00058e:	d9f7      	bls.n	1a000580 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000590:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000592:	4b15      	ldr	r3, [pc, #84]	; (1a0005e8 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000594:	e007      	b.n	1a0005a6 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000596:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00059a:	689a      	ldr	r2, [r3, #8]
1a00059c:	6859      	ldr	r1, [r3, #4]
1a00059e:	6818      	ldr	r0, [r3, #0]
1a0005a0:	f7ff fdf3 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0005a4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0005a6:	4a11      	ldr	r2, [pc, #68]	; (1a0005ec <Reset_Handler+0x80>)
1a0005a8:	4293      	cmp	r3, r2
1a0005aa:	d3f4      	bcc.n	1a000596 <Reset_Handler+0x2a>
1a0005ac:	e006      	b.n	1a0005bc <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0005ae:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0005b0:	6859      	ldr	r1, [r3, #4]
1a0005b2:	f854 0b08 	ldr.w	r0, [r4], #8
1a0005b6:	f7ff fdf7 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0005ba:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0005bc:	4a0c      	ldr	r2, [pc, #48]	; (1a0005f0 <Reset_Handler+0x84>)
1a0005be:	4293      	cmp	r3, r2
1a0005c0:	d3f5      	bcc.n	1a0005ae <Reset_Handler+0x42>
    SystemInit();
1a0005c2:	f000 feb7 	bl	1a001334 <SystemInit>
    __libc_init_array();
1a0005c6:	f002 fd41 	bl	1a00304c <__libc_init_array>
    initialise_monitor_handles();
1a0005ca:	f7ff ffcd 	bl	1a000568 <initialise_monitor_handles>
    main();
1a0005ce:	f7ff fedb 	bl	1a000388 <main>
        __asm__ volatile("wfi");
1a0005d2:	bf30      	wfi
1a0005d4:	e7fd      	b.n	1a0005d2 <Reset_Handler+0x66>
1a0005d6:	bf00      	nop
1a0005d8:	40053100 	.word	0x40053100
1a0005dc:	10df1000 	.word	0x10df1000
1a0005e0:	01dff7ff 	.word	0x01dff7ff
1a0005e4:	e000e280 	.word	0xe000e280
1a0005e8:	1a000114 	.word	0x1a000114
1a0005ec:	1a000150 	.word	0x1a000150
1a0005f0:	1a000178 	.word	0x1a000178

1a0005f4 <_fini>:
void _fini(void) {}
1a0005f4:	4770      	bx	lr

1a0005f6 <_init>:
void _init(void) {}
1a0005f6:	4770      	bx	lr

1a0005f8 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0005f8:	2300      	movs	r3, #0
1a0005fa:	2b1c      	cmp	r3, #28
1a0005fc:	d812      	bhi.n	1a000624 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0005fe:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000600:	4a09      	ldr	r2, [pc, #36]	; (1a000628 <Board_SetupMuxing+0x30>)
1a000602:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000606:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00060a:	784a      	ldrb	r2, [r1, #1]
1a00060c:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00060e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000612:	4906      	ldr	r1, [pc, #24]	; (1a00062c <Board_SetupMuxing+0x34>)
1a000614:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000618:	3301      	adds	r3, #1
1a00061a:	2b1c      	cmp	r3, #28
1a00061c:	d9f0      	bls.n	1a000600 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00061e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000622:	4770      	bx	lr
1a000624:	4770      	bx	lr
1a000626:	bf00      	nop
1a000628:	1a0030a8 	.word	0x1a0030a8
1a00062c:	40086000 	.word	0x40086000

1a000630 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000630:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000632:	4a17      	ldr	r2, [pc, #92]	; (1a000690 <Board_SetupClocking+0x60>)
1a000634:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000638:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00063c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000640:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000644:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a00064c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000650:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000654:	2201      	movs	r2, #1
1a000656:	490f      	ldr	r1, [pc, #60]	; (1a000694 <Board_SetupClocking+0x64>)
1a000658:	2006      	movs	r0, #6
1a00065a:	f000 fa21 	bl	1a000aa0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00065e:	2400      	movs	r4, #0
1a000660:	b14c      	cbz	r4, 1a000676 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000662:	4b0b      	ldr	r3, [pc, #44]	; (1a000690 <Board_SetupClocking+0x60>)
1a000664:	685a      	ldr	r2, [r3, #4]
1a000666:	f022 020c 	bic.w	r2, r2, #12
1a00066a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00066c:	685a      	ldr	r2, [r3, #4]
1a00066e:	f042 0203 	orr.w	r2, r2, #3
1a000672:	605a      	str	r2, [r3, #4]
}
1a000674:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000676:	4808      	ldr	r0, [pc, #32]	; (1a000698 <Board_SetupClocking+0x68>)
1a000678:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00067c:	2301      	movs	r3, #1
1a00067e:	788a      	ldrb	r2, [r1, #2]
1a000680:	7849      	ldrb	r1, [r1, #1]
1a000682:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000686:	f000 fce3 	bl	1a001050 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00068a:	3401      	adds	r4, #1
1a00068c:	e7e8      	b.n	1a000660 <Board_SetupClocking+0x30>
1a00068e:	bf00      	nop
1a000690:	40043000 	.word	0x40043000
1a000694:	0c28cb00 	.word	0x0c28cb00
1a000698:	1a0030a4 	.word	0x1a0030a4

1a00069c <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a00069c:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00069e:	f7ff ffab 	bl	1a0005f8 <Board_SetupMuxing>
    Board_SetupClocking();
1a0006a2:	f7ff ffc5 	bl	1a000630 <Board_SetupClocking>
}
1a0006a6:	bd08      	pop	{r3, pc}

1a0006a8 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0006a8:	2200      	movs	r2, #0
1a0006aa:	2a05      	cmp	r2, #5
1a0006ac:	d819      	bhi.n	1a0006e2 <Board_LED_Init+0x3a>
{
1a0006ae:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0006b0:	490c      	ldr	r1, [pc, #48]	; (1a0006e4 <Board_LED_Init+0x3c>)
1a0006b2:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0006b6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0006ba:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0006bc:	4b0a      	ldr	r3, [pc, #40]	; (1a0006e8 <Board_LED_Init+0x40>)
1a0006be:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0006c2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0006c6:	2001      	movs	r0, #1
1a0006c8:	40a0      	lsls	r0, r4
1a0006ca:	4301      	orrs	r1, r0
1a0006cc:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0006d0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0006d4:	2100      	movs	r1, #0
1a0006d6:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0006d8:	3201      	adds	r2, #1
1a0006da:	2a05      	cmp	r2, #5
1a0006dc:	d9e8      	bls.n	1a0006b0 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0006de:	bc70      	pop	{r4, r5, r6}
1a0006e0:	4770      	bx	lr
1a0006e2:	4770      	bx	lr
1a0006e4:	1a003128 	.word	0x1a003128
1a0006e8:	400f4000 	.word	0x400f4000

1a0006ec <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0006ec:	2300      	movs	r3, #0
1a0006ee:	2b03      	cmp	r3, #3
1a0006f0:	d816      	bhi.n	1a000720 <Board_TEC_Init+0x34>
{
1a0006f2:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0006f4:	490b      	ldr	r1, [pc, #44]	; (1a000724 <Board_TEC_Init+0x38>)
1a0006f6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0006fa:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0006fe:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000700:	4c09      	ldr	r4, [pc, #36]	; (1a000728 <Board_TEC_Init+0x3c>)
1a000702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000706:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00070a:	2001      	movs	r0, #1
1a00070c:	40a8      	lsls	r0, r5
1a00070e:	ea21 0100 	bic.w	r1, r1, r0
1a000712:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000716:	3301      	adds	r3, #1
1a000718:	2b03      	cmp	r3, #3
1a00071a:	d9eb      	bls.n	1a0006f4 <Board_TEC_Init+0x8>
   }
}
1a00071c:	bc30      	pop	{r4, r5}
1a00071e:	4770      	bx	lr
1a000720:	4770      	bx	lr
1a000722:	bf00      	nop
1a000724:	1a003120 	.word	0x1a003120
1a000728:	400f4000 	.word	0x400f4000

1a00072c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00072c:	2300      	movs	r3, #0
1a00072e:	2b08      	cmp	r3, #8
1a000730:	d816      	bhi.n	1a000760 <Board_GPIO_Init+0x34>
{
1a000732:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000734:	490b      	ldr	r1, [pc, #44]	; (1a000764 <Board_GPIO_Init+0x38>)
1a000736:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00073a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00073e:	784d      	ldrb	r5, [r1, #1]
1a000740:	4c09      	ldr	r4, [pc, #36]	; (1a000768 <Board_GPIO_Init+0x3c>)
1a000742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000746:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00074a:	2001      	movs	r0, #1
1a00074c:	40a8      	lsls	r0, r5
1a00074e:	ea21 0100 	bic.w	r1, r1, r0
1a000752:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000756:	3301      	adds	r3, #1
1a000758:	2b08      	cmp	r3, #8
1a00075a:	d9eb      	bls.n	1a000734 <Board_GPIO_Init+0x8>
   }
}
1a00075c:	bc30      	pop	{r4, r5}
1a00075e:	4770      	bx	lr
1a000760:	4770      	bx	lr
1a000762:	bf00      	nop
1a000764:	1a003134 	.word	0x1a003134
1a000768:	400f4000 	.word	0x400f4000

1a00076c <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a00076c:	b510      	push	{r4, lr}
1a00076e:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000770:	4c08      	ldr	r4, [pc, #32]	; (1a000794 <Board_ADC_Init+0x28>)
1a000772:	4669      	mov	r1, sp
1a000774:	4620      	mov	r0, r4
1a000776:	f000 f953 	bl	1a000a20 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00077a:	4a07      	ldr	r2, [pc, #28]	; (1a000798 <Board_ADC_Init+0x2c>)
1a00077c:	4669      	mov	r1, sp
1a00077e:	4620      	mov	r0, r4
1a000780:	f000 f96e 	bl	1a000a60 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000784:	2200      	movs	r2, #0
1a000786:	4669      	mov	r1, sp
1a000788:	4620      	mov	r0, r4
1a00078a:	f000 f982 	bl	1a000a92 <Chip_ADC_SetResolution>
}
1a00078e:	b002      	add	sp, #8
1a000790:	bd10      	pop	{r4, pc}
1a000792:	bf00      	nop
1a000794:	400e3000 	.word	0x400e3000
1a000798:	00061a80 	.word	0x00061a80

1a00079c <Board_SPI_Init>:
{
1a00079c:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00079e:	4c0b      	ldr	r4, [pc, #44]	; (1a0007cc <Board_SPI_Init+0x30>)
1a0007a0:	4620      	mov	r0, r4
1a0007a2:	f000 f895 	bl	1a0008d0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0007a6:	6863      	ldr	r3, [r4, #4]
1a0007a8:	f023 0304 	bic.w	r3, r3, #4
1a0007ac:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0007ae:	6823      	ldr	r3, [r4, #0]
1a0007b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0007b4:	f043 0307 	orr.w	r3, r3, #7
1a0007b8:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0007ba:	4905      	ldr	r1, [pc, #20]	; (1a0007d0 <Board_SPI_Init+0x34>)
1a0007bc:	4620      	mov	r0, r4
1a0007be:	f000 f868 	bl	1a000892 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0007c2:	6863      	ldr	r3, [r4, #4]
1a0007c4:	f043 0302 	orr.w	r3, r3, #2
1a0007c8:	6063      	str	r3, [r4, #4]
}
1a0007ca:	bd10      	pop	{r4, pc}
1a0007cc:	400c5000 	.word	0x400c5000
1a0007d0:	000186a0 	.word	0x000186a0

1a0007d4 <Board_I2C_Init>:
{
1a0007d4:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0007d6:	2000      	movs	r0, #0
1a0007d8:	f000 f8a6 	bl	1a000928 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0007dc:	4b04      	ldr	r3, [pc, #16]	; (1a0007f0 <Board_I2C_Init+0x1c>)
1a0007de:	f640 0208 	movw	r2, #2056	; 0x808
1a0007e2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0007e6:	4903      	ldr	r1, [pc, #12]	; (1a0007f4 <Board_I2C_Init+0x20>)
1a0007e8:	2000      	movs	r0, #0
1a0007ea:	f000 f8af 	bl	1a00094c <Chip_I2C_SetClockRate>
}
1a0007ee:	bd08      	pop	{r3, pc}
1a0007f0:	40086000 	.word	0x40086000
1a0007f4:	000f4240 	.word	0x000f4240

1a0007f8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0007f8:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0007fa:	4c07      	ldr	r4, [pc, #28]	; (1a000818 <Board_Debug_Init+0x20>)
1a0007fc:	4620      	mov	r0, r4
1a0007fe:	f000 fce1 	bl	1a0011c4 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000802:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000806:	4620      	mov	r0, r4
1a000808:	f000 fd26 	bl	1a001258 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a00080c:	2303      	movs	r3, #3
1a00080e:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000810:	2301      	movs	r3, #1
1a000812:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000814:	bd10      	pop	{r4, pc}
1a000816:	bf00      	nop
1a000818:	400c1000 	.word	0x400c1000

1a00081c <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a00081c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00081e:	f7ff ffeb 	bl	1a0007f8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000822:	4809      	ldr	r0, [pc, #36]	; (1a000848 <Board_Init+0x2c>)
1a000824:	f000 f8ae 	bl	1a000984 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000828:	f7ff ff80 	bl	1a00072c <Board_GPIO_Init>
   Board_ADC_Init();
1a00082c:	f7ff ff9e 	bl	1a00076c <Board_ADC_Init>
   Board_SPI_Init();
1a000830:	f7ff ffb4 	bl	1a00079c <Board_SPI_Init>
   Board_I2C_Init();
1a000834:	f7ff ffce 	bl	1a0007d4 <Board_I2C_Init>

   Board_LED_Init();
1a000838:	f7ff ff36 	bl	1a0006a8 <Board_LED_Init>
   Board_TEC_Init();
1a00083c:	f7ff ff56 	bl	1a0006ec <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000840:	f000 f9da 	bl	1a000bf8 <SystemCoreClockUpdate>
}
1a000844:	bd08      	pop	{r3, pc}
1a000846:	bf00      	nop
1a000848:	400f4000 	.word	0x400f4000

1a00084c <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a00084c:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00084e:	f7ff ffd3 	bl	1a0007f8 <Board_Debug_Init>
1a000852:	bd08      	pop	{r3, pc}

1a000854 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000854:	4b03      	ldr	r3, [pc, #12]	; (1a000864 <Chip_SSP_GetClockIndex+0x10>)
1a000856:	4298      	cmp	r0, r3
1a000858:	d001      	beq.n	1a00085e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00085a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a00085c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00085e:	20a5      	movs	r0, #165	; 0xa5
1a000860:	4770      	bx	lr
1a000862:	bf00      	nop
1a000864:	400c5000 	.word	0x400c5000

1a000868 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000868:	4b04      	ldr	r3, [pc, #16]	; (1a00087c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00086a:	4298      	cmp	r0, r3
1a00086c:	d002      	beq.n	1a000874 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00086e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a000872:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a000874:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000878:	4770      	bx	lr
1a00087a:	bf00      	nop
1a00087c:	400c5000 	.word	0x400c5000

1a000880 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000880:	6803      	ldr	r3, [r0, #0]
1a000882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a000886:	0209      	lsls	r1, r1, #8
1a000888:	b289      	uxth	r1, r1
1a00088a:	4319      	orrs	r1, r3
1a00088c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00088e:	6102      	str	r2, [r0, #16]
}
1a000890:	4770      	bx	lr

1a000892 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a000892:	b570      	push	{r4, r5, r6, lr}
1a000894:	4606      	mov	r6, r0
1a000896:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000898:	f7ff ffe6 	bl	1a000868 <Chip_SSP_GetPeriphClockIndex>
1a00089c:	f000 fc56 	bl	1a00114c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0008a0:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0008a2:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a0008a6:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0008a8:	e000      	b.n	1a0008ac <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0008aa:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0008ac:	42ab      	cmp	r3, r5
1a0008ae:	d90b      	bls.n	1a0008c8 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0008b0:	1c4c      	adds	r4, r1, #1
1a0008b2:	fb02 f304 	mul.w	r3, r2, r4
1a0008b6:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0008ba:	429d      	cmp	r5, r3
1a0008bc:	d2f6      	bcs.n	1a0008ac <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0008be:	2cff      	cmp	r4, #255	; 0xff
1a0008c0:	d9f3      	bls.n	1a0008aa <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0008c2:	3202      	adds	r2, #2
				cr0_div = 0;
1a0008c4:	2100      	movs	r1, #0
1a0008c6:	e7f1      	b.n	1a0008ac <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0008c8:	4630      	mov	r0, r6
1a0008ca:	f7ff ffd9 	bl	1a000880 <Chip_SSP_SetClockRate>
}
1a0008ce:	bd70      	pop	{r4, r5, r6, pc}

1a0008d0 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0008d0:	b510      	push	{r4, lr}
1a0008d2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0008d4:	f7ff ffbe 	bl	1a000854 <Chip_SSP_GetClockIndex>
1a0008d8:	f000 fc1e 	bl	1a001118 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0008dc:	4620      	mov	r0, r4
1a0008de:	f7ff ffc3 	bl	1a000868 <Chip_SSP_GetPeriphClockIndex>
1a0008e2:	f000 fc19 	bl	1a001118 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0008e6:	6863      	ldr	r3, [r4, #4]
1a0008e8:	f023 0304 	bic.w	r3, r3, #4
1a0008ec:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0008ee:	6823      	ldr	r3, [r4, #0]
1a0008f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0008f4:	f043 0307 	orr.w	r3, r3, #7
1a0008f8:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0008fa:	4902      	ldr	r1, [pc, #8]	; (1a000904 <Chip_SSP_Init+0x34>)
1a0008fc:	4620      	mov	r0, r4
1a0008fe:	f7ff ffc8 	bl	1a000892 <Chip_SSP_SetBitRate>
}
1a000902:	bd10      	pop	{r4, pc}
1a000904:	000186a0 	.word	0x000186a0

1a000908 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000908:	2901      	cmp	r1, #1
1a00090a:	d109      	bne.n	1a000920 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a00090c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000910:	0082      	lsls	r2, r0, #2
1a000912:	4b04      	ldr	r3, [pc, #16]	; (1a000924 <Chip_I2C_EventHandler+0x1c>)
1a000914:	4413      	add	r3, r2
1a000916:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000918:	7d13      	ldrb	r3, [r2, #20]
1a00091a:	b2db      	uxtb	r3, r3
1a00091c:	2b04      	cmp	r3, #4
1a00091e:	d0fb      	beq.n	1a000918 <Chip_I2C_EventHandler+0x10>
}
1a000920:	4770      	bx	lr
1a000922:	bf00      	nop
1a000924:	10000000 	.word	0x10000000

1a000928 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000928:	b570      	push	{r4, r5, r6, lr}
1a00092a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a00092c:	4e06      	ldr	r6, [pc, #24]	; (1a000948 <Chip_I2C_Init+0x20>)
1a00092e:	00c4      	lsls	r4, r0, #3
1a000930:	1a22      	subs	r2, r4, r0
1a000932:	0093      	lsls	r3, r2, #2
1a000934:	4433      	add	r3, r6
1a000936:	8898      	ldrh	r0, [r3, #4]
1a000938:	f000 fbee 	bl	1a001118 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a00093c:	1b64      	subs	r4, r4, r5
1a00093e:	00a3      	lsls	r3, r4, #2
1a000940:	58f3      	ldr	r3, [r6, r3]
1a000942:	226c      	movs	r2, #108	; 0x6c
1a000944:	619a      	str	r2, [r3, #24]
}
1a000946:	bd70      	pop	{r4, r5, r6, pc}
1a000948:	10000000 	.word	0x10000000

1a00094c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a00094c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000950:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000952:	4e0b      	ldr	r6, [pc, #44]	; (1a000980 <Chip_I2C_SetClockRate+0x34>)
1a000954:	00c5      	lsls	r5, r0, #3
1a000956:	1a2b      	subs	r3, r5, r0
1a000958:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a00095c:	eb06 0308 	add.w	r3, r6, r8
1a000960:	8898      	ldrh	r0, [r3, #4]
1a000962:	f000 fbf3 	bl	1a00114c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000966:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a00096a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00096e:	0842      	lsrs	r2, r0, #1
1a000970:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000972:	f856 3008 	ldr.w	r3, [r6, r8]
1a000976:	691a      	ldr	r2, [r3, #16]
1a000978:	1a80      	subs	r0, r0, r2
1a00097a:	6158      	str	r0, [r3, #20]
}
1a00097c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000980:	10000000 	.word	0x10000000

1a000984 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000984:	4770      	bx	lr
1a000986:	Address 0x1a000986 is out of bounds.


1a000988 <Chip_TIMER_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_TIMER_GetClockIndex(LPC_TIMER_T *pTMR)
{
	CHIP_CCU_CLK_T clkTMR;

	if (pTMR == LPC_TIMER3) {
1a000988:	4b09      	ldr	r3, [pc, #36]	; (1a0009b0 <Chip_TIMER_GetClockIndex+0x28>)
1a00098a:	4298      	cmp	r0, r3
1a00098c:	d00b      	beq.n	1a0009a6 <Chip_TIMER_GetClockIndex+0x1e>
		clkTMR = CLK_MX_TIMER3;
	}
    else if (pTMR == LPC_TIMER2) {
1a00098e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
1a000992:	4298      	cmp	r0, r3
1a000994:	d009      	beq.n	1a0009aa <Chip_TIMER_GetClockIndex+0x22>
		clkTMR = CLK_MX_TIMER2;
	}
    else if (pTMR == LPC_TIMER1) {
1a000996:	f5a3 3378 	sub.w	r3, r3, #253952	; 0x3e000
1a00099a:	4298      	cmp	r0, r3
1a00099c:	d001      	beq.n	1a0009a2 <Chip_TIMER_GetClockIndex+0x1a>
		clkTMR = CLK_MX_TIMER1;
	}
	else {
		clkTMR = CLK_MX_TIMER0;
1a00099e:	2084      	movs	r0, #132	; 0x84
	}

	return clkTMR;
}
1a0009a0:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER1;
1a0009a2:	2085      	movs	r0, #133	; 0x85
1a0009a4:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER3;
1a0009a6:	20a4      	movs	r0, #164	; 0xa4
1a0009a8:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER2;
1a0009aa:	20a3      	movs	r0, #163	; 0xa3
1a0009ac:	4770      	bx	lr
1a0009ae:	bf00      	nop
1a0009b0:	400c4000 	.word	0x400c4000

1a0009b4 <Chip_TIMER_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize a timer */
void Chip_TIMER_Init(LPC_TIMER_T *pTMR)
{
1a0009b4:	b508      	push	{r3, lr}
	Chip_Clock_Enable(Chip_TIMER_GetClockIndex(pTMR));
1a0009b6:	f7ff ffe7 	bl	1a000988 <Chip_TIMER_GetClockIndex>
1a0009ba:	f000 fbad 	bl	1a001118 <Chip_Clock_Enable>
}
1a0009be:	bd08      	pop	{r3, pc}

1a0009c0 <Chip_TIMER_Reset>:
void Chip_TIMER_Reset(LPC_TIMER_T *pTMR)
{
	uint32_t reg;

	/* Disable timer, set terminal count to non-0 */
	reg = pTMR->TCR;
1a0009c0:	6842      	ldr	r2, [r0, #4]
	pTMR->TCR = 0;
1a0009c2:	2300      	movs	r3, #0
1a0009c4:	6043      	str	r3, [r0, #4]
	pTMR->TC = 1;
1a0009c6:	2301      	movs	r3, #1
1a0009c8:	6083      	str	r3, [r0, #8]

	/* Reset timer counter */
	pTMR->TCR = TIMER_RESET;
1a0009ca:	2302      	movs	r3, #2
1a0009cc:	6043      	str	r3, [r0, #4]

	/* Wait for terminal count to clear */
	while (pTMR->TC != 0) {}
1a0009ce:	6883      	ldr	r3, [r0, #8]
1a0009d0:	2b00      	cmp	r3, #0
1a0009d2:	d1fc      	bne.n	1a0009ce <Chip_TIMER_Reset+0xe>

	/* Restore timer state */
	pTMR->TCR = reg;
1a0009d4:	6042      	str	r2, [r0, #4]
}
1a0009d6:	4770      	bx	lr

1a0009d8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0009d8:	4b03      	ldr	r3, [pc, #12]	; (1a0009e8 <Chip_ADC_GetClockIndex+0x10>)
1a0009da:	4298      	cmp	r0, r3
1a0009dc:	d001      	beq.n	1a0009e2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0009de:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0009e0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0009e2:	2004      	movs	r0, #4
1a0009e4:	4770      	bx	lr
1a0009e6:	bf00      	nop
1a0009e8:	400e4000 	.word	0x400e4000

1a0009ec <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0009ec:	b570      	push	{r4, r5, r6, lr}
1a0009ee:	460d      	mov	r5, r1
1a0009f0:	4614      	mov	r4, r2
1a0009f2:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0009f4:	f7ff fff0 	bl	1a0009d8 <Chip_ADC_GetClockIndex>
1a0009f8:	f000 fba8 	bl	1a00114c <Chip_Clock_GetRate>
	if (burstMode) {
1a0009fc:	b155      	cbz	r5, 1a000a14 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0009fe:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000a02:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000a06:	0064      	lsls	r4, r4, #1
1a000a08:	fbb0 f0f4 	udiv	r0, r0, r4
1a000a0c:	b2c0      	uxtb	r0, r0
1a000a0e:	3801      	subs	r0, #1
	return div;
}
1a000a10:	b2c0      	uxtb	r0, r0
1a000a12:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000a14:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000a18:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000a1c:	e7f1      	b.n	1a000a02 <getClkDiv+0x16>
1a000a1e:	Address 0x1a000a1e is out of bounds.


1a000a20 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000a20:	b538      	push	{r3, r4, r5, lr}
1a000a22:	4605      	mov	r5, r0
1a000a24:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000a26:	f7ff ffd7 	bl	1a0009d8 <Chip_ADC_GetClockIndex>
1a000a2a:	2301      	movs	r3, #1
1a000a2c:	461a      	mov	r2, r3
1a000a2e:	4619      	mov	r1, r3
1a000a30:	f000 fb54 	bl	1a0010dc <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000a34:	2100      	movs	r1, #0
1a000a36:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000a38:	4a08      	ldr	r2, [pc, #32]	; (1a000a5c <Chip_ADC_Init+0x3c>)
1a000a3a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000a3c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000a3e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000a40:	230b      	movs	r3, #11
1a000a42:	4628      	mov	r0, r5
1a000a44:	f7ff ffd2 	bl	1a0009ec <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000a48:	0200      	lsls	r0, r0, #8
1a000a4a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000a4e:	7920      	ldrb	r0, [r4, #4]
1a000a50:	0440      	lsls	r0, r0, #17
1a000a52:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000a56:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000a58:	6028      	str	r0, [r5, #0]
}
1a000a5a:	bd38      	pop	{r3, r4, r5, pc}
1a000a5c:	00061a80 	.word	0x00061a80

1a000a60 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000a60:	b570      	push	{r4, r5, r6, lr}
1a000a62:	4605      	mov	r5, r0
1a000a64:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000a66:	6804      	ldr	r4, [r0, #0]
1a000a68:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000a6c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000a70:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000a72:	790b      	ldrb	r3, [r1, #4]
1a000a74:	f1c3 030b 	rsb	r3, r3, #11
1a000a78:	b2db      	uxtb	r3, r3
1a000a7a:	7949      	ldrb	r1, [r1, #5]
1a000a7c:	f7ff ffb6 	bl	1a0009ec <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000a80:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000a84:	7933      	ldrb	r3, [r6, #4]
1a000a86:	045b      	lsls	r3, r3, #17
1a000a88:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000a8c:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000a8e:	602b      	str	r3, [r5, #0]
}
1a000a90:	bd70      	pop	{r4, r5, r6, pc}

1a000a92 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000a92:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000a94:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000a96:	680a      	ldr	r2, [r1, #0]
1a000a98:	f7ff ffe2 	bl	1a000a60 <Chip_ADC_SetSampleRate>
}
1a000a9c:	bd08      	pop	{r3, pc}
1a000a9e:	Address 0x1a000a9e is out of bounds.


1a000aa0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000aa0:	b570      	push	{r4, r5, r6, lr}
1a000aa2:	b08a      	sub	sp, #40	; 0x28
1a000aa4:	4605      	mov	r5, r0
1a000aa6:	460e      	mov	r6, r1
1a000aa8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000aaa:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000aae:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000ab0:	2806      	cmp	r0, #6
1a000ab2:	d018      	beq.n	1a000ae6 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000ab4:	2300      	movs	r3, #0
1a000ab6:	2201      	movs	r2, #1
1a000ab8:	4629      	mov	r1, r5
1a000aba:	2004      	movs	r0, #4
1a000abc:	f000 fac8 	bl	1a001050 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000ac0:	4a4a      	ldr	r2, [pc, #296]	; (1a000bec <Chip_SetupCoreClock+0x14c>)
1a000ac2:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000ac4:	f043 0301 	orr.w	r3, r3, #1
1a000ac8:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000aca:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000ace:	a901      	add	r1, sp, #4
1a000ad0:	4630      	mov	r0, r6
1a000ad2:	f000 fa35 	bl	1a000f40 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000ad6:	4b46      	ldr	r3, [pc, #280]	; (1a000bf0 <Chip_SetupCoreClock+0x150>)
1a000ad8:	429e      	cmp	r6, r3
1a000ada:	d916      	bls.n	1a000b0a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000adc:	9b01      	ldr	r3, [sp, #4]
1a000ade:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000ae2:	d003      	beq.n	1a000aec <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a000ae4:	e7fe      	b.n	1a000ae4 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000ae6:	f000 f98d 	bl	1a000e04 <Chip_Clock_EnableCrystal>
1a000aea:	e7e3      	b.n	1a000ab4 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a000aec:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000af0:	d005      	beq.n	1a000afe <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000af6:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000af8:	2500      	movs	r5, #0
			direct = 1;
1a000afa:	2601      	movs	r6, #1
1a000afc:	e007      	b.n	1a000b0e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000afe:	9b04      	ldr	r3, [sp, #16]
1a000b00:	3301      	adds	r3, #1
1a000b02:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000b04:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000b06:	2600      	movs	r6, #0
1a000b08:	e001      	b.n	1a000b0e <Chip_SetupCoreClock+0x6e>
1a000b0a:	2500      	movs	r5, #0
1a000b0c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000b0e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000b12:	9b01      	ldr	r3, [sp, #4]
1a000b14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000b18:	9a05      	ldr	r2, [sp, #20]
1a000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000b1e:	9a03      	ldr	r2, [sp, #12]
1a000b20:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000b24:	9a04      	ldr	r2, [sp, #16]
1a000b26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000b2e:	4a2f      	ldr	r2, [pc, #188]	; (1a000bec <Chip_SetupCoreClock+0x14c>)
1a000b30:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000b32:	4b2e      	ldr	r3, [pc, #184]	; (1a000bec <Chip_SetupCoreClock+0x14c>)
1a000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000b36:	f013 0f01 	tst.w	r3, #1
1a000b3a:	d0fa      	beq.n	1a000b32 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000b3c:	2300      	movs	r3, #0
1a000b3e:	2201      	movs	r2, #1
1a000b40:	2109      	movs	r1, #9
1a000b42:	2004      	movs	r0, #4
1a000b44:	f000 fa84 	bl	1a001050 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000b48:	b306      	cbz	r6, 1a000b8c <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000b4a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000b4e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000b52:	1e5a      	subs	r2, r3, #1
1a000b54:	9209      	str	r2, [sp, #36]	; 0x24
1a000b56:	2b00      	cmp	r3, #0
1a000b58:	d1fa      	bne.n	1a000b50 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000b5a:	9b01      	ldr	r3, [sp, #4]
1a000b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000b60:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000b62:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000b66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000b6a:	9a05      	ldr	r2, [sp, #20]
1a000b6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000b70:	9a03      	ldr	r2, [sp, #12]
1a000b72:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000b76:	9a04      	ldr	r2, [sp, #16]
1a000b78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000b80:	4a1a      	ldr	r2, [pc, #104]	; (1a000bec <Chip_SetupCoreClock+0x14c>)
1a000b82:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a000b84:	2c00      	cmp	r4, #0
1a000b86:	d12e      	bne.n	1a000be6 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a000b88:	b00a      	add	sp, #40	; 0x28
1a000b8a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a000b8c:	2d00      	cmp	r5, #0
1a000b8e:	d0f9      	beq.n	1a000b84 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000b90:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000b94:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a000b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000b98:	1e5a      	subs	r2, r3, #1
1a000b9a:	9209      	str	r2, [sp, #36]	; 0x24
1a000b9c:	2b00      	cmp	r3, #0
1a000b9e:	d1fa      	bne.n	1a000b96 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a000ba0:	9b04      	ldr	r3, [sp, #16]
1a000ba2:	1e5a      	subs	r2, r3, #1
1a000ba4:	9204      	str	r2, [sp, #16]
1a000ba6:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a000baa:	9b01      	ldr	r3, [sp, #4]
1a000bac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a000bb0:	9905      	ldr	r1, [sp, #20]
1a000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a000bb6:	9903      	ldr	r1, [sp, #12]
1a000bb8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a000bbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000bc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000bc4:	4a09      	ldr	r2, [pc, #36]	; (1a000bec <Chip_SetupCoreClock+0x14c>)
1a000bc6:	6453      	str	r3, [r2, #68]	; 0x44
1a000bc8:	e7dc      	b.n	1a000b84 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000bca:	480a      	ldr	r0, [pc, #40]	; (1a000bf4 <Chip_SetupCoreClock+0x154>)
1a000bcc:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000bd0:	78cb      	ldrb	r3, [r1, #3]
1a000bd2:	788a      	ldrb	r2, [r1, #2]
1a000bd4:	7849      	ldrb	r1, [r1, #1]
1a000bd6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000bda:	f000 fa39 	bl	1a001050 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000bde:	3401      	adds	r4, #1
1a000be0:	2c11      	cmp	r4, #17
1a000be2:	d9f2      	bls.n	1a000bca <Chip_SetupCoreClock+0x12a>
1a000be4:	e7d0      	b.n	1a000b88 <Chip_SetupCoreClock+0xe8>
1a000be6:	2400      	movs	r4, #0
1a000be8:	e7fa      	b.n	1a000be0 <Chip_SetupCoreClock+0x140>
1a000bea:	bf00      	nop
1a000bec:	40050000 	.word	0x40050000
1a000bf0:	068e7780 	.word	0x068e7780
1a000bf4:	1a00314c 	.word	0x1a00314c

1a000bf8 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000bf8:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000bfa:	2069      	movs	r0, #105	; 0x69
1a000bfc:	f000 faa6 	bl	1a00114c <Chip_Clock_GetRate>
1a000c00:	4b01      	ldr	r3, [pc, #4]	; (1a000c08 <SystemCoreClockUpdate+0x10>)
1a000c02:	6018      	str	r0, [r3, #0]
}
1a000c04:	bd08      	pop	{r3, pc}
1a000c06:	bf00      	nop
1a000c08:	10000218 	.word	0x10000218

1a000c0c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000c0c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000c0e:	680b      	ldr	r3, [r1, #0]
1a000c10:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000c14:	d002      	beq.n	1a000c1c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000c1a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000c1c:	4607      	mov	r7, r0
1a000c1e:	2501      	movs	r5, #1
1a000c20:	e03a      	b.n	1a000c98 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000c22:	694b      	ldr	r3, [r1, #20]
1a000c24:	fb03 f302 	mul.w	r3, r3, r2
1a000c28:	fbb3 f3f5 	udiv	r3, r3, r5
1a000c2c:	e01c      	b.n	1a000c68 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000c2e:	461c      	mov	r4, r3
	if (val < 0)
1a000c30:	ebb0 0c04 	subs.w	ip, r0, r4
1a000c34:	d427      	bmi.n	1a000c86 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000c36:	4567      	cmp	r7, ip
1a000c38:	d906      	bls.n	1a000c48 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000c3a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000c3c:	1c77      	adds	r7, r6, #1
1a000c3e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000c40:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000c42:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000c44:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000c46:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000c48:	3201      	adds	r2, #1
1a000c4a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000c4e:	dc1d      	bgt.n	1a000c8c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000c50:	680c      	ldr	r4, [r1, #0]
1a000c52:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000c56:	d0e4      	beq.n	1a000c22 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000c58:	1c73      	adds	r3, r6, #1
1a000c5a:	fa02 fc03 	lsl.w	ip, r2, r3
1a000c5e:	694b      	ldr	r3, [r1, #20]
1a000c60:	fb03 f30c 	mul.w	r3, r3, ip
1a000c64:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000c68:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000ca4 <pll_calc_divs+0x98>
1a000c6c:	4563      	cmp	r3, ip
1a000c6e:	d9eb      	bls.n	1a000c48 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000c70:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000ca8 <pll_calc_divs+0x9c>
1a000c74:	4563      	cmp	r3, ip
1a000c76:	d809      	bhi.n	1a000c8c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000c78:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000c7c:	d1d7      	bne.n	1a000c2e <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000c7e:	1c74      	adds	r4, r6, #1
1a000c80:	fa23 f404 	lsr.w	r4, r3, r4
1a000c84:	e7d4      	b.n	1a000c30 <pll_calc_divs+0x24>
		return -val;
1a000c86:	f1cc 0c00 	rsb	ip, ip, #0
1a000c8a:	e7d4      	b.n	1a000c36 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000c8c:	3601      	adds	r6, #1
1a000c8e:	2e03      	cmp	r6, #3
1a000c90:	dc01      	bgt.n	1a000c96 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000c92:	2201      	movs	r2, #1
1a000c94:	e7d9      	b.n	1a000c4a <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000c96:	3501      	adds	r5, #1
1a000c98:	2d04      	cmp	r5, #4
1a000c9a:	dc01      	bgt.n	1a000ca0 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000c9c:	2600      	movs	r6, #0
1a000c9e:	e7f6      	b.n	1a000c8e <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000ca0:	bcf0      	pop	{r4, r5, r6, r7}
1a000ca2:	4770      	bx	lr
1a000ca4:	094c5eff 	.word	0x094c5eff
1a000ca8:	1312d000 	.word	0x1312d000

1a000cac <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000cac:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000cae:	b099      	sub	sp, #100	; 0x64
1a000cb0:	4605      	mov	r5, r0
1a000cb2:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000cb4:	225c      	movs	r2, #92	; 0x5c
1a000cb6:	2100      	movs	r1, #0
1a000cb8:	a801      	add	r0, sp, #4
1a000cba:	f002 f9eb 	bl	1a003094 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000cbe:	2380      	movs	r3, #128	; 0x80
1a000cc0:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000cc2:	6963      	ldr	r3, [r4, #20]
1a000cc4:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000cc6:	7923      	ldrb	r3, [r4, #4]
1a000cc8:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000ccc:	4669      	mov	r1, sp
1a000cce:	4628      	mov	r0, r5
1a000cd0:	f7ff ff9c 	bl	1a000c0c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000cd4:	9b06      	ldr	r3, [sp, #24]
1a000cd6:	42ab      	cmp	r3, r5
1a000cd8:	d027      	beq.n	1a000d2a <pll_get_frac+0x7e>
	if (val < 0)
1a000cda:	1aeb      	subs	r3, r5, r3
1a000cdc:	d42e      	bmi.n	1a000d3c <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000cde:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000ce0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000ce6:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000ce8:	6963      	ldr	r3, [r4, #20]
1a000cea:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000cec:	7923      	ldrb	r3, [r4, #4]
1a000cee:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000cf2:	a910      	add	r1, sp, #64	; 0x40
1a000cf4:	4628      	mov	r0, r5
1a000cf6:	f7ff ff89 	bl	1a000c0c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000cfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000cfc:	42ab      	cmp	r3, r5
1a000cfe:	d01f      	beq.n	1a000d40 <pll_get_frac+0x94>
	if (val < 0)
1a000d00:	1aeb      	subs	r3, r5, r3
1a000d02:	d425      	bmi.n	1a000d50 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000d04:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000d06:	4b2b      	ldr	r3, [pc, #172]	; (1a000db4 <pll_get_frac+0x108>)
1a000d08:	429d      	cmp	r5, r3
1a000d0a:	d923      	bls.n	1a000d54 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000d0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000d0e:	1aed      	subs	r5, r5, r3
1a000d10:	d433      	bmi.n	1a000d7a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000d12:	42ae      	cmp	r6, r5
1a000d14:	dc3b      	bgt.n	1a000d8e <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000d16:	42be      	cmp	r6, r7
1a000d18:	dc31      	bgt.n	1a000d7e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000d1a:	466d      	mov	r5, sp
1a000d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d28:	e006      	b.n	1a000d38 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000d2a:	466d      	mov	r5, sp
1a000d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000d38:	b019      	add	sp, #100	; 0x64
1a000d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000d3c:	425b      	negs	r3, r3
1a000d3e:	e7ce      	b.n	1a000cde <pll_get_frac+0x32>
		*ppll = pll[2];
1a000d40:	ad10      	add	r5, sp, #64	; 0x40
1a000d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000d4e:	e7f3      	b.n	1a000d38 <pll_get_frac+0x8c>
		return -val;
1a000d50:	425b      	negs	r3, r3
1a000d52:	e7d7      	b.n	1a000d04 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000d54:	2340      	movs	r3, #64	; 0x40
1a000d56:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000d58:	6963      	ldr	r3, [r4, #20]
1a000d5a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000d5c:	a908      	add	r1, sp, #32
1a000d5e:	4628      	mov	r0, r5
1a000d60:	f7ff ff54 	bl	1a000c0c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000d66:	42ab      	cmp	r3, r5
1a000d68:	d1d0      	bne.n	1a000d0c <pll_get_frac+0x60>
			*ppll = pll[1];
1a000d6a:	ad08      	add	r5, sp, #32
1a000d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000d78:	e7de      	b.n	1a000d38 <pll_get_frac+0x8c>
		return -val;
1a000d7a:	426d      	negs	r5, r5
1a000d7c:	e7c9      	b.n	1a000d12 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000d7e:	ad10      	add	r5, sp, #64	; 0x40
1a000d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000d8c:	e7d4      	b.n	1a000d38 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000d8e:	42af      	cmp	r7, r5
1a000d90:	db07      	blt.n	1a000da2 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000d92:	ad08      	add	r5, sp, #32
1a000d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000d98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000d9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000da0:	e7ca      	b.n	1a000d38 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000da2:	ad10      	add	r5, sp, #64	; 0x40
1a000da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000da8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000db0:	e7c2      	b.n	1a000d38 <pll_get_frac+0x8c>
1a000db2:	bf00      	nop
1a000db4:	068e7780 	.word	0x068e7780

1a000db8 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000db8:	b430      	push	{r4, r5}
1a000dba:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000dbc:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000dbe:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000dc0:	e000      	b.n	1a000dc4 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000dc2:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000dc4:	281c      	cmp	r0, #28
1a000dc6:	d118      	bne.n	1a000dfa <Chip_Clock_FindBaseClock+0x42>
1a000dc8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000dcc:	0051      	lsls	r1, r2, #1
1a000dce:	4a0c      	ldr	r2, [pc, #48]	; (1a000e00 <Chip_Clock_FindBaseClock+0x48>)
1a000dd0:	440a      	add	r2, r1
1a000dd2:	7914      	ldrb	r4, [r2, #4]
1a000dd4:	4284      	cmp	r4, r0
1a000dd6:	d010      	beq.n	1a000dfa <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000dd8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000ddc:	004a      	lsls	r2, r1, #1
1a000dde:	4908      	ldr	r1, [pc, #32]	; (1a000e00 <Chip_Clock_FindBaseClock+0x48>)
1a000de0:	5a8a      	ldrh	r2, [r1, r2]
1a000de2:	42aa      	cmp	r2, r5
1a000de4:	d8ed      	bhi.n	1a000dc2 <Chip_Clock_FindBaseClock+0xa>
1a000de6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000dea:	0051      	lsls	r1, r2, #1
1a000dec:	4a04      	ldr	r2, [pc, #16]	; (1a000e00 <Chip_Clock_FindBaseClock+0x48>)
1a000dee:	440a      	add	r2, r1
1a000df0:	8852      	ldrh	r2, [r2, #2]
1a000df2:	42aa      	cmp	r2, r5
1a000df4:	d3e5      	bcc.n	1a000dc2 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000df6:	4620      	mov	r0, r4
1a000df8:	e7e4      	b.n	1a000dc4 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000dfa:	bc30      	pop	{r4, r5}
1a000dfc:	4770      	bx	lr
1a000dfe:	bf00      	nop
1a000e00:	1a0031a0 	.word	0x1a0031a0

1a000e04 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000e04:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000e0a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000e0c:	4a0d      	ldr	r2, [pc, #52]	; (1a000e44 <Chip_Clock_EnableCrystal+0x40>)
1a000e0e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000e10:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000e14:	6992      	ldr	r2, [r2, #24]
1a000e16:	428a      	cmp	r2, r1
1a000e18:	d001      	beq.n	1a000e1e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000e1a:	4a0a      	ldr	r2, [pc, #40]	; (1a000e44 <Chip_Clock_EnableCrystal+0x40>)
1a000e1c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000e1e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000e22:	4a09      	ldr	r2, [pc, #36]	; (1a000e48 <Chip_Clock_EnableCrystal+0x44>)
1a000e24:	6811      	ldr	r1, [r2, #0]
1a000e26:	4a09      	ldr	r2, [pc, #36]	; (1a000e4c <Chip_Clock_EnableCrystal+0x48>)
1a000e28:	4291      	cmp	r1, r2
1a000e2a:	d901      	bls.n	1a000e30 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000e2c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000e30:	4a04      	ldr	r2, [pc, #16]	; (1a000e44 <Chip_Clock_EnableCrystal+0x40>)
1a000e32:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000e34:	9b01      	ldr	r3, [sp, #4]
1a000e36:	1e5a      	subs	r2, r3, #1
1a000e38:	9201      	str	r2, [sp, #4]
1a000e3a:	2b00      	cmp	r3, #0
1a000e3c:	d1fa      	bne.n	1a000e34 <Chip_Clock_EnableCrystal+0x30>
}
1a000e3e:	b002      	add	sp, #8
1a000e40:	4770      	bx	lr
1a000e42:	bf00      	nop
1a000e44:	40050000 	.word	0x40050000
1a000e48:	1a003148 	.word	0x1a003148
1a000e4c:	01312cff 	.word	0x01312cff

1a000e50 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000e50:	3012      	adds	r0, #18
1a000e52:	4b05      	ldr	r3, [pc, #20]	; (1a000e68 <Chip_Clock_GetDividerSource+0x18>)
1a000e54:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000e58:	f010 0f01 	tst.w	r0, #1
1a000e5c:	d102      	bne.n	1a000e64 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000e5e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000e62:	4770      	bx	lr
		return CLKINPUT_PD;
1a000e64:	2011      	movs	r0, #17
}
1a000e66:	4770      	bx	lr
1a000e68:	40050000 	.word	0x40050000

1a000e6c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000e6c:	f100 0212 	add.w	r2, r0, #18
1a000e70:	4b03      	ldr	r3, [pc, #12]	; (1a000e80 <Chip_Clock_GetDividerDivisor+0x14>)
1a000e72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000e76:	4b03      	ldr	r3, [pc, #12]	; (1a000e84 <Chip_Clock_GetDividerDivisor+0x18>)
1a000e78:	5c18      	ldrb	r0, [r3, r0]
}
1a000e7a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000e7e:	4770      	bx	lr
1a000e80:	40050000 	.word	0x40050000
1a000e84:	1a003198 	.word	0x1a003198

1a000e88 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000e88:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000e8a:	2810      	cmp	r0, #16
1a000e8c:	d80a      	bhi.n	1a000ea4 <Chip_Clock_GetClockInputHz+0x1c>
1a000e8e:	e8df f000 	tbb	[pc, r0]
1a000e92:	0b44      	.short	0x0b44
1a000e94:	0921180d 	.word	0x0921180d
1a000e98:	2d2a2724 	.word	0x2d2a2724
1a000e9c:	34300909 	.word	0x34300909
1a000ea0:	3c38      	.short	0x3c38
1a000ea2:	40          	.byte	0x40
1a000ea3:	00          	.byte	0x00
	uint32_t rate = 0;
1a000ea4:	2000      	movs	r0, #0
1a000ea6:	e03a      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000ea8:	481e      	ldr	r0, [pc, #120]	; (1a000f24 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000eaa:	e038      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000eac:	4b1e      	ldr	r3, [pc, #120]	; (1a000f28 <Chip_Clock_GetClockInputHz+0xa0>)
1a000eae:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000eb2:	f003 0307 	and.w	r3, r3, #7
1a000eb6:	2b04      	cmp	r3, #4
1a000eb8:	d001      	beq.n	1a000ebe <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000eba:	481c      	ldr	r0, [pc, #112]	; (1a000f2c <Chip_Clock_GetClockInputHz+0xa4>)
1a000ebc:	e02f      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a000ebe:	2000      	movs	r0, #0
1a000ec0:	e02d      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000ec2:	4b19      	ldr	r3, [pc, #100]	; (1a000f28 <Chip_Clock_GetClockInputHz+0xa0>)
1a000ec4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000ec8:	f003 0307 	and.w	r3, r3, #7
1a000ecc:	2b04      	cmp	r3, #4
1a000ece:	d027      	beq.n	1a000f20 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000ed0:	4816      	ldr	r0, [pc, #88]	; (1a000f2c <Chip_Clock_GetClockInputHz+0xa4>)
1a000ed2:	e024      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000ed4:	4b16      	ldr	r3, [pc, #88]	; (1a000f30 <Chip_Clock_GetClockInputHz+0xa8>)
1a000ed6:	6818      	ldr	r0, [r3, #0]
		break;
1a000ed8:	e021      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000eda:	4b16      	ldr	r3, [pc, #88]	; (1a000f34 <Chip_Clock_GetClockInputHz+0xac>)
1a000edc:	6818      	ldr	r0, [r3, #0]
		break;
1a000ede:	e01e      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000ee0:	4b15      	ldr	r3, [pc, #84]	; (1a000f38 <Chip_Clock_GetClockInputHz+0xb0>)
1a000ee2:	6818      	ldr	r0, [r3, #0]
		break;
1a000ee4:	e01b      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000ee6:	4b14      	ldr	r3, [pc, #80]	; (1a000f38 <Chip_Clock_GetClockInputHz+0xb0>)
1a000ee8:	6858      	ldr	r0, [r3, #4]
		break;
1a000eea:	e018      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000eec:	f000 f868 	bl	1a000fc0 <Chip_Clock_GetMainPLLHz>
		break;
1a000ef0:	e015      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000ef2:	2100      	movs	r1, #0
1a000ef4:	f000 f89a 	bl	1a00102c <Chip_Clock_GetDivRate>
		break;
1a000ef8:	e011      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000efa:	2101      	movs	r1, #1
1a000efc:	f000 f896 	bl	1a00102c <Chip_Clock_GetDivRate>
		break;
1a000f00:	e00d      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000f02:	2102      	movs	r1, #2
1a000f04:	f000 f892 	bl	1a00102c <Chip_Clock_GetDivRate>
		break;
1a000f08:	e009      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000f0a:	2103      	movs	r1, #3
1a000f0c:	f000 f88e 	bl	1a00102c <Chip_Clock_GetDivRate>
		break;
1a000f10:	e005      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000f12:	2104      	movs	r1, #4
1a000f14:	f000 f88a 	bl	1a00102c <Chip_Clock_GetDivRate>
		break;
1a000f18:	e001      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a000f1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000f1e:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a000f20:	4806      	ldr	r0, [pc, #24]	; (1a000f3c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000f22:	e7fc      	b.n	1a000f1e <Chip_Clock_GetClockInputHz+0x96>
1a000f24:	00b71b00 	.word	0x00b71b00
1a000f28:	40043000 	.word	0x40043000
1a000f2c:	017d7840 	.word	0x017d7840
1a000f30:	1a00311c 	.word	0x1a00311c
1a000f34:	1a003148 	.word	0x1a003148
1a000f38:	1000011c 	.word	0x1000011c
1a000f3c:	02faf080 	.word	0x02faf080

1a000f40 <Chip_Clock_CalcMainPLLValue>:
{
1a000f40:	b538      	push	{r3, r4, r5, lr}
1a000f42:	4605      	mov	r5, r0
1a000f44:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000f46:	7908      	ldrb	r0, [r1, #4]
1a000f48:	f7ff ff9e 	bl	1a000e88 <Chip_Clock_GetClockInputHz>
1a000f4c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000f4e:	4b19      	ldr	r3, [pc, #100]	; (1a000fb4 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000f50:	442b      	add	r3, r5
1a000f52:	4a19      	ldr	r2, [pc, #100]	; (1a000fb8 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000f54:	4293      	cmp	r3, r2
1a000f56:	d821      	bhi.n	1a000f9c <Chip_Clock_CalcMainPLLValue+0x5c>
1a000f58:	b318      	cbz	r0, 1a000fa2 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000f5a:	2380      	movs	r3, #128	; 0x80
1a000f5c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000f5e:	2300      	movs	r3, #0
1a000f60:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000f62:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000f64:	fbb5 f3f0 	udiv	r3, r5, r0
1a000f68:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000f6a:	4a14      	ldr	r2, [pc, #80]	; (1a000fbc <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000f6c:	4295      	cmp	r5, r2
1a000f6e:	d903      	bls.n	1a000f78 <Chip_Clock_CalcMainPLLValue+0x38>
1a000f70:	fb03 f000 	mul.w	r0, r3, r0
1a000f74:	42a8      	cmp	r0, r5
1a000f76:	d007      	beq.n	1a000f88 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000f78:	4621      	mov	r1, r4
1a000f7a:	4628      	mov	r0, r5
1a000f7c:	f7ff fe96 	bl	1a000cac <pll_get_frac>
		if (!ppll->nsel) {
1a000f80:	68a3      	ldr	r3, [r4, #8]
1a000f82:	b18b      	cbz	r3, 1a000fa8 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000f84:	3b01      	subs	r3, #1
1a000f86:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000f88:	6923      	ldr	r3, [r4, #16]
1a000f8a:	b183      	cbz	r3, 1a000fae <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000f8c:	68e2      	ldr	r2, [r4, #12]
1a000f8e:	b10a      	cbz	r2, 1a000f94 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000f90:	3a01      	subs	r2, #1
1a000f92:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000f94:	3b01      	subs	r3, #1
1a000f96:	6123      	str	r3, [r4, #16]
	return 0;
1a000f98:	2000      	movs	r0, #0
}
1a000f9a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000f9c:	f04f 30ff 	mov.w	r0, #4294967295
1a000fa0:	e7fb      	b.n	1a000f9a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000fa2:	f04f 30ff 	mov.w	r0, #4294967295
1a000fa6:	e7f8      	b.n	1a000f9a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000fa8:	f04f 30ff 	mov.w	r0, #4294967295
1a000fac:	e7f5      	b.n	1a000f9a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000fae:	f04f 30ff 	mov.w	r0, #4294967295
1a000fb2:	e7f2      	b.n	1a000f9a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000fb4:	ff6b3a10 	.word	0xff6b3a10
1a000fb8:	0b940510 	.word	0x0b940510
1a000fbc:	094c5eff 	.word	0x094c5eff

1a000fc0 <Chip_Clock_GetMainPLLHz>:
{
1a000fc0:	b530      	push	{r4, r5, lr}
1a000fc2:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000fc4:	4d17      	ldr	r5, [pc, #92]	; (1a001024 <Chip_Clock_GetMainPLLHz+0x64>)
1a000fc6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000fc8:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000fcc:	f7ff ff5c 	bl	1a000e88 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000fd0:	4b15      	ldr	r3, [pc, #84]	; (1a001028 <Chip_Clock_GetMainPLLHz+0x68>)
1a000fd2:	681b      	ldr	r3, [r3, #0]
1a000fd4:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000fd6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000fd8:	f013 0f01 	tst.w	r3, #1
1a000fdc:	d020      	beq.n	1a001020 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a000fde:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000fe2:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000fe6:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000fea:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000fee:	3301      	adds	r3, #1
	n = nsel + 1;
1a000ff0:	3201      	adds	r2, #1
	p = ptab[psel];
1a000ff2:	f10d 0c08 	add.w	ip, sp, #8
1a000ff6:	4461      	add	r1, ip
1a000ff8:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000ffc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001000:	d108      	bne.n	1a001014 <Chip_Clock_GetMainPLLHz+0x54>
1a001002:	b93d      	cbnz	r5, 1a001014 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001004:	0049      	lsls	r1, r1, #1
1a001006:	fbb3 f3f1 	udiv	r3, r3, r1
1a00100a:	fbb0 f0f2 	udiv	r0, r0, r2
1a00100e:	fb00 f003 	mul.w	r0, r0, r3
1a001012:	e003      	b.n	1a00101c <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a001014:	fbb0 f0f2 	udiv	r0, r0, r2
1a001018:	fb03 f000 	mul.w	r0, r3, r0
}
1a00101c:	b003      	add	sp, #12
1a00101e:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001020:	2000      	movs	r0, #0
1a001022:	e7fb      	b.n	1a00101c <Chip_Clock_GetMainPLLHz+0x5c>
1a001024:	40050000 	.word	0x40050000
1a001028:	1a003194 	.word	0x1a003194

1a00102c <Chip_Clock_GetDivRate>:
{
1a00102c:	b538      	push	{r3, r4, r5, lr}
1a00102e:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001030:	4608      	mov	r0, r1
1a001032:	f7ff ff0d 	bl	1a000e50 <Chip_Clock_GetDividerSource>
1a001036:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001038:	4620      	mov	r0, r4
1a00103a:	f7ff ff17 	bl	1a000e6c <Chip_Clock_GetDividerDivisor>
1a00103e:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001040:	4628      	mov	r0, r5
1a001042:	f7ff ff21 	bl	1a000e88 <Chip_Clock_GetClockInputHz>
1a001046:	3401      	adds	r4, #1
}
1a001048:	fbb0 f0f4 	udiv	r0, r0, r4
1a00104c:	bd38      	pop	{r3, r4, r5, pc}
1a00104e:	Address 0x1a00104e is out of bounds.


1a001050 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001050:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001052:	f100 0416 	add.w	r4, r0, #22
1a001056:	00a4      	lsls	r4, r4, #2
1a001058:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a00105c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001060:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001062:	281b      	cmp	r0, #27
1a001064:	d813      	bhi.n	1a00108e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001066:	2911      	cmp	r1, #17
1a001068:	d01a      	beq.n	1a0010a0 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00106a:	4d0e      	ldr	r5, [pc, #56]	; (1a0010a4 <Chip_Clock_SetBaseClock+0x54>)
1a00106c:	4025      	ands	r5, r4

			if (autoblocken) {
1a00106e:	b10a      	cbz	r2, 1a001074 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001070:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001074:	b10b      	cbz	r3, 1a00107a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001076:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00107a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00107e:	3016      	adds	r0, #22
1a001080:	0080      	lsls	r0, r0, #2
1a001082:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001086:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00108a:	6045      	str	r5, [r0, #4]
1a00108c:	e008      	b.n	1a0010a0 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00108e:	f044 0401 	orr.w	r4, r4, #1
1a001092:	3016      	adds	r0, #22
1a001094:	0080      	lsls	r0, r0, #2
1a001096:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00109a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00109e:	6044      	str	r4, [r0, #4]
	}
}
1a0010a0:	bc30      	pop	{r4, r5}
1a0010a2:	4770      	bx	lr
1a0010a4:	e0fff7fe 	.word	0xe0fff7fe

1a0010a8 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0010a8:	281b      	cmp	r0, #27
1a0010aa:	d80c      	bhi.n	1a0010c6 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0010ac:	3016      	adds	r0, #22
1a0010ae:	0080      	lsls	r0, r0, #2
1a0010b0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0010b4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0010b8:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0010ba:	f010 0f01 	tst.w	r0, #1
1a0010be:	d104      	bne.n	1a0010ca <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0010c0:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0010c4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0010c6:	2011      	movs	r0, #17
1a0010c8:	4770      	bx	lr
		return CLKINPUT_PD;
1a0010ca:	2011      	movs	r0, #17
}
1a0010cc:	4770      	bx	lr

1a0010ce <Chip_Clock_GetBaseClocktHz>:
{
1a0010ce:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0010d0:	f7ff ffea 	bl	1a0010a8 <Chip_Clock_GetBaseClock>
1a0010d4:	f7ff fed8 	bl	1a000e88 <Chip_Clock_GetClockInputHz>
}
1a0010d8:	bd08      	pop	{r3, pc}
1a0010da:	Address 0x1a0010da is out of bounds.


1a0010dc <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0010dc:	b971      	cbnz	r1, 1a0010fc <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0010de:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0010e0:	b10a      	cbz	r2, 1a0010e6 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0010e2:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0010e6:	2b02      	cmp	r3, #2
1a0010e8:	d00a      	beq.n	1a001100 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0010ea:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0010ee:	d30a      	bcc.n	1a001106 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0010f0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0010f4:	4b06      	ldr	r3, [pc, #24]	; (1a001110 <Chip_Clock_EnableOpts+0x34>)
1a0010f6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0010fa:	4770      	bx	lr
		reg |= (1 << 1);
1a0010fc:	2103      	movs	r1, #3
1a0010fe:	e7ef      	b.n	1a0010e0 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001100:	f041 0120 	orr.w	r1, r1, #32
1a001104:	e7f1      	b.n	1a0010ea <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001106:	3020      	adds	r0, #32
1a001108:	4b02      	ldr	r3, [pc, #8]	; (1a001114 <Chip_Clock_EnableOpts+0x38>)
1a00110a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00110e:	4770      	bx	lr
1a001110:	40052000 	.word	0x40052000
1a001114:	40051000 	.word	0x40051000

1a001118 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001118:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00111c:	d309      	bcc.n	1a001132 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00111e:	4a09      	ldr	r2, [pc, #36]	; (1a001144 <Chip_Clock_Enable+0x2c>)
1a001120:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001124:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001128:	f043 0301 	orr.w	r3, r3, #1
1a00112c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001130:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001132:	4a05      	ldr	r2, [pc, #20]	; (1a001148 <Chip_Clock_Enable+0x30>)
1a001134:	3020      	adds	r0, #32
1a001136:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00113a:	f043 0301 	orr.w	r3, r3, #1
1a00113e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001142:	4770      	bx	lr
1a001144:	40052000 	.word	0x40052000
1a001148:	40051000 	.word	0x40051000

1a00114c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a00114c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00114e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001152:	d309      	bcc.n	1a001168 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001154:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001158:	4a0d      	ldr	r2, [pc, #52]	; (1a001190 <Chip_Clock_GetRate+0x44>)
1a00115a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00115e:	f014 0f01 	tst.w	r4, #1
1a001162:	d107      	bne.n	1a001174 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001164:	2000      	movs	r0, #0
	}

	return rate;
}
1a001166:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001168:	f100 0320 	add.w	r3, r0, #32
1a00116c:	4a09      	ldr	r2, [pc, #36]	; (1a001194 <Chip_Clock_GetRate+0x48>)
1a00116e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001172:	e7f4      	b.n	1a00115e <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001174:	f7ff fe20 	bl	1a000db8 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001178:	f7ff ffa9 	bl	1a0010ce <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00117c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001180:	d103      	bne.n	1a00118a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001182:	2301      	movs	r3, #1
		rate = rate / div;
1a001184:	fbb0 f0f3 	udiv	r0, r0, r3
1a001188:	e7ed      	b.n	1a001166 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00118a:	2302      	movs	r3, #2
1a00118c:	e7fa      	b.n	1a001184 <Chip_Clock_GetRate+0x38>
1a00118e:	bf00      	nop
1a001190:	40052000 	.word	0x40052000
1a001194:	40051000 	.word	0x40051000

1a001198 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001198:	4b09      	ldr	r3, [pc, #36]	; (1a0011c0 <Chip_UART_GetIndex+0x28>)
1a00119a:	4298      	cmp	r0, r3
1a00119c:	d009      	beq.n	1a0011b2 <Chip_UART_GetIndex+0x1a>
1a00119e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0011a2:	4298      	cmp	r0, r3
1a0011a4:	d007      	beq.n	1a0011b6 <Chip_UART_GetIndex+0x1e>
1a0011a6:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0011aa:	4298      	cmp	r0, r3
1a0011ac:	d005      	beq.n	1a0011ba <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0011ae:	2000      	movs	r0, #0
1a0011b0:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0011b2:	2002      	movs	r0, #2
1a0011b4:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0011b6:	2003      	movs	r0, #3
1a0011b8:	4770      	bx	lr
			return 1;
1a0011ba:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0011bc:	4770      	bx	lr
1a0011be:	bf00      	nop
1a0011c0:	400c1000 	.word	0x400c1000

1a0011c4 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0011c4:	b530      	push	{r4, r5, lr}
1a0011c6:	b083      	sub	sp, #12
1a0011c8:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0011ca:	f7ff ffe5 	bl	1a001198 <Chip_UART_GetIndex>
1a0011ce:	2301      	movs	r3, #1
1a0011d0:	461a      	mov	r2, r3
1a0011d2:	4619      	mov	r1, r3
1a0011d4:	4d0e      	ldr	r5, [pc, #56]	; (1a001210 <Chip_UART_Init+0x4c>)
1a0011d6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0011da:	f7ff ff7f 	bl	1a0010dc <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0011de:	2307      	movs	r3, #7
1a0011e0:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0011e2:	2300      	movs	r3, #0
1a0011e4:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0011e6:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0011e8:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0011ea:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0011ec:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0011ee:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0011f0:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0011f2:	4b08      	ldr	r3, [pc, #32]	; (1a001214 <Chip_UART_Init+0x50>)
1a0011f4:	429c      	cmp	r4, r3
1a0011f6:	d006      	beq.n	1a001206 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0011f8:	2303      	movs	r3, #3
1a0011fa:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0011fc:	2310      	movs	r3, #16
1a0011fe:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001200:	9b01      	ldr	r3, [sp, #4]
}
1a001202:	b003      	add	sp, #12
1a001204:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a001206:	2300      	movs	r3, #0
1a001208:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00120a:	69a3      	ldr	r3, [r4, #24]
1a00120c:	9301      	str	r3, [sp, #4]
1a00120e:	e7f3      	b.n	1a0011f8 <Chip_UART_Init+0x34>
1a001210:	1a003214 	.word	0x1a003214
1a001214:	40082000 	.word	0x40082000

1a001218 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001218:	b538      	push	{r3, r4, r5, lr}
1a00121a:	4605      	mov	r5, r0
1a00121c:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00121e:	f7ff ffbb 	bl	1a001198 <Chip_UART_GetIndex>
1a001222:	4b0c      	ldr	r3, [pc, #48]	; (1a001254 <Chip_UART_SetBaud+0x3c>)
1a001224:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001228:	f7ff ff90 	bl	1a00114c <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a00122c:	0123      	lsls	r3, r4, #4
1a00122e:	fbb0 f3f3 	udiv	r3, r0, r3

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a001232:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001234:	68ea      	ldr	r2, [r5, #12]
1a001236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00123a:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a00123c:	6029      	str	r1, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a00123e:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a001242:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001244:	68ea      	ldr	r2, [r5, #12]
1a001246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a00124a:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a00124c:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a001250:	0900      	lsrs	r0, r0, #4
1a001252:	bd38      	pop	{r3, r4, r5, pc}
1a001254:	1a00320c 	.word	0x1a00320c

1a001258 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00125c:	b083      	sub	sp, #12
1a00125e:	9001      	str	r0, [sp, #4]
1a001260:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001262:	f7ff ff99 	bl	1a001198 <Chip_UART_GetIndex>
1a001266:	4b32      	ldr	r3, [pc, #200]	; (1a001330 <Chip_UART_SetBaudFDR+0xd8>)
1a001268:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00126c:	f7ff ff6e 	bl	1a00114c <Chip_Clock_GetRate>
1a001270:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a001272:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001276:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001278:	f04f 0b00 	mov.w	fp, #0
1a00127c:	46a2      	mov	sl, r4
1a00127e:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001280:	e02a      	b.n	1a0012d8 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a001282:	4242      	negs	r2, r0
				div ++;
1a001284:	1c4b      	adds	r3, r1, #1
1a001286:	e017      	b.n	1a0012b8 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001288:	b30a      	cbz	r2, 1a0012ce <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00128a:	4617      	mov	r7, r2
			sd = d;
1a00128c:	46ab      	mov	fp, r5
			sm = m;
1a00128e:	46a2      	mov	sl, r4
			sdiv = div;
1a001290:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a001292:	3501      	adds	r5, #1
1a001294:	42ac      	cmp	r4, r5
1a001296:	d91e      	bls.n	1a0012d6 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001298:	0933      	lsrs	r3, r6, #4
1a00129a:	0730      	lsls	r0, r6, #28
1a00129c:	fba4 0100 	umull	r0, r1, r4, r0
1a0012a0:	fb04 1103 	mla	r1, r4, r3, r1
1a0012a4:	1962      	adds	r2, r4, r5
1a0012a6:	fb08 f202 	mul.w	r2, r8, r2
1a0012aa:	2300      	movs	r3, #0
1a0012ac:	f001 fd4c 	bl	1a002d48 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0012b0:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0012b2:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0012b4:	2800      	cmp	r0, #0
1a0012b6:	dbe4      	blt.n	1a001282 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0012b8:	4297      	cmp	r7, r2
1a0012ba:	d3ea      	bcc.n	1a001292 <Chip_UART_SetBaudFDR+0x3a>
1a0012bc:	2b00      	cmp	r3, #0
1a0012be:	d0e8      	beq.n	1a001292 <Chip_UART_SetBaudFDR+0x3a>
1a0012c0:	0c19      	lsrs	r1, r3, #16
1a0012c2:	d1e6      	bne.n	1a001292 <Chip_UART_SetBaudFDR+0x3a>
1a0012c4:	2b02      	cmp	r3, #2
1a0012c6:	d8df      	bhi.n	1a001288 <Chip_UART_SetBaudFDR+0x30>
1a0012c8:	2d00      	cmp	r5, #0
1a0012ca:	d0dd      	beq.n	1a001288 <Chip_UART_SetBaudFDR+0x30>
1a0012cc:	e7e1      	b.n	1a001292 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0012ce:	4617      	mov	r7, r2
			sd = d;
1a0012d0:	46ab      	mov	fp, r5
			sm = m;
1a0012d2:	46a2      	mov	sl, r4
			sdiv = div;
1a0012d4:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0012d6:	3401      	adds	r4, #1
1a0012d8:	b11f      	cbz	r7, 1a0012e2 <Chip_UART_SetBaudFDR+0x8a>
1a0012da:	2c0f      	cmp	r4, #15
1a0012dc:	d801      	bhi.n	1a0012e2 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0012de:	2500      	movs	r5, #0
1a0012e0:	e7d8      	b.n	1a001294 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0012e2:	f1b9 0f00 	cmp.w	r9, #0
1a0012e6:	d01e      	beq.n	1a001326 <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0012e8:	9a01      	ldr	r2, [sp, #4]
1a0012ea:	4611      	mov	r1, r2
1a0012ec:	68d3      	ldr	r3, [r2, #12]
1a0012ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0012f2:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a0012f4:	fa5f f389 	uxtb.w	r3, r9
1a0012f8:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0012fa:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0012fe:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001300:	68d3      	ldr	r3, [r2, #12]
1a001302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001306:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001308:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00130c:	b2db      	uxtb	r3, r3
1a00130e:	f00b 020f 	and.w	r2, fp, #15
1a001312:	4313      	orrs	r3, r2
1a001314:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001316:	0933      	lsrs	r3, r6, #4
1a001318:	fb0a f303 	mul.w	r3, sl, r3
1a00131c:	44da      	add	sl, fp
1a00131e:	fb09 f90a 	mul.w	r9, r9, sl
1a001322:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a001326:	4648      	mov	r0, r9
1a001328:	b003      	add	sp, #12
1a00132a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00132e:	bf00      	nop
1a001330:	1a00320c 	.word	0x1a00320c

1a001334 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001334:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001336:	4a0b      	ldr	r2, [pc, #44]	; (1a001364 <SystemInit+0x30>)
1a001338:	4b0b      	ldr	r3, [pc, #44]	; (1a001368 <SystemInit+0x34>)
1a00133a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a00133c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001340:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001342:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001346:	2b20      	cmp	r3, #32
1a001348:	d004      	beq.n	1a001354 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00134a:	f7ff f9a7 	bl	1a00069c <Board_SystemInit>
   Board_Init();
1a00134e:	f7ff fa65 	bl	1a00081c <Board_Init>
}
1a001352:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001354:	4a04      	ldr	r2, [pc, #16]	; (1a001368 <SystemInit+0x34>)
1a001356:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00135a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00135e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001362:	e7f2      	b.n	1a00134a <SystemInit+0x16>
1a001364:	1a000000 	.word	0x1a000000
1a001368:	e000ed00 	.word	0xe000ed00

1a00136c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00136c:	4b04      	ldr	r3, [pc, #16]	; (1a001380 <cyclesCounterInit+0x14>)
1a00136e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001370:	4a04      	ldr	r2, [pc, #16]	; (1a001384 <cyclesCounterInit+0x18>)
1a001372:	6813      	ldr	r3, [r2, #0]
1a001374:	f043 0301 	orr.w	r3, r3, #1
1a001378:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00137a:	2001      	movs	r0, #1
1a00137c:	4770      	bx	lr
1a00137e:	bf00      	nop
1a001380:	10000038 	.word	0x10000038
1a001384:	e0001000 	.word	0xe0001000

1a001388 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001388:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00138a:	4d0b      	ldr	r5, [pc, #44]	; (1a0013b8 <gpioObtainPinInit+0x30>)
1a00138c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001390:	182c      	adds	r4, r5, r0
1a001392:	5628      	ldrsb	r0, [r5, r0]
1a001394:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001396:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00139a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00139c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0013a0:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0013a2:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0013a6:	9b02      	ldr	r3, [sp, #8]
1a0013a8:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0013aa:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0013ae:	9b03      	ldr	r3, [sp, #12]
1a0013b0:	701a      	strb	r2, [r3, #0]
}
1a0013b2:	bc30      	pop	{r4, r5}
1a0013b4:	4770      	bx	lr
1a0013b6:	bf00      	nop
1a0013b8:	1a00321c 	.word	0x1a00321c

1a0013bc <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0013bc:	f110 0f02 	cmn.w	r0, #2
1a0013c0:	f000 80c7 	beq.w	1a001552 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a0013c4:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0013c8:	f000 80c5 	beq.w	1a001556 <gpioInit+0x19a>
{
1a0013cc:	b570      	push	{r4, r5, r6, lr}
1a0013ce:	b084      	sub	sp, #16
1a0013d0:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0013d2:	2300      	movs	r3, #0
1a0013d4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0013d8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0013dc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0013e0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0013e4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0013e8:	f10d 030b 	add.w	r3, sp, #11
1a0013ec:	9301      	str	r3, [sp, #4]
1a0013ee:	ab03      	add	r3, sp, #12
1a0013f0:	9300      	str	r3, [sp, #0]
1a0013f2:	f10d 030d 	add.w	r3, sp, #13
1a0013f6:	f10d 020e 	add.w	r2, sp, #14
1a0013fa:	f10d 010f 	add.w	r1, sp, #15
1a0013fe:	f7ff ffc3 	bl	1a001388 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001402:	2c05      	cmp	r4, #5
1a001404:	f200 80a9 	bhi.w	1a00155a <gpioInit+0x19e>
1a001408:	e8df f004 	tbb	[pc, r4]
1a00140c:	45278109 	.word	0x45278109
1a001410:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001412:	4853      	ldr	r0, [pc, #332]	; (1a001560 <gpioInit+0x1a4>)
1a001414:	f7ff fab6 	bl	1a000984 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001418:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00141a:	b004      	add	sp, #16
1a00141c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00141e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001422:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001426:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00142a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00142e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001432:	494c      	ldr	r1, [pc, #304]	; (1a001564 <gpioInit+0x1a8>)
1a001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001438:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00143c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001440:	2001      	movs	r0, #1
1a001442:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001446:	4c46      	ldr	r4, [pc, #280]	; (1a001560 <gpioInit+0x1a4>)
1a001448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00144c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001450:	ea22 0201 	bic.w	r2, r2, r1
1a001454:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001458:	e7df      	b.n	1a00141a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00145a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00145e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001462:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001466:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00146a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00146e:	493d      	ldr	r1, [pc, #244]	; (1a001564 <gpioInit+0x1a8>)
1a001470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001474:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001478:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00147c:	2001      	movs	r0, #1
1a00147e:	fa00 f102 	lsl.w	r1, r0, r2
1a001482:	4c37      	ldr	r4, [pc, #220]	; (1a001560 <gpioInit+0x1a4>)
1a001484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001488:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00148c:	ea22 0201 	bic.w	r2, r2, r1
1a001490:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001494:	e7c1      	b.n	1a00141a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001496:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00149a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00149e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0014a2:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0014a6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0014aa:	492e      	ldr	r1, [pc, #184]	; (1a001564 <gpioInit+0x1a8>)
1a0014ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0014b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0014b4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0014b8:	2001      	movs	r0, #1
1a0014ba:	fa00 f102 	lsl.w	r1, r0, r2
1a0014be:	4c28      	ldr	r4, [pc, #160]	; (1a001560 <gpioInit+0x1a4>)
1a0014c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0014c4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0014c8:	ea22 0201 	bic.w	r2, r2, r1
1a0014cc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0014d0:	e7a3      	b.n	1a00141a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0014d2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0014d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0014da:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0014de:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0014e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0014e6:	491f      	ldr	r1, [pc, #124]	; (1a001564 <gpioInit+0x1a8>)
1a0014e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0014ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0014f0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0014f4:	2001      	movs	r0, #1
1a0014f6:	fa00 f102 	lsl.w	r1, r0, r2
1a0014fa:	4c19      	ldr	r4, [pc, #100]	; (1a001560 <gpioInit+0x1a4>)
1a0014fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001500:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001504:	ea22 0201 	bic.w	r2, r2, r1
1a001508:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00150c:	e785      	b.n	1a00141a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00150e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001512:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001516:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00151a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00151e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001522:	4910      	ldr	r1, [pc, #64]	; (1a001564 <gpioInit+0x1a8>)
1a001524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001528:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00152c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001530:	2001      	movs	r0, #1
1a001532:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001536:	4b0a      	ldr	r3, [pc, #40]	; (1a001560 <gpioInit+0x1a4>)
1a001538:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a00153c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001540:	4331      	orrs	r1, r6
1a001542:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001546:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001548:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a00154c:	2100      	movs	r1, #0
1a00154e:	5499      	strb	r1, [r3, r2]
1a001550:	e763      	b.n	1a00141a <gpioInit+0x5e>
	  return FALSE;
1a001552:	2000      	movs	r0, #0
1a001554:	4770      	bx	lr
	  return FALSE;
1a001556:	2000      	movs	r0, #0
}
1a001558:	4770      	bx	lr
      ret_val = 0;
1a00155a:	2000      	movs	r0, #0
1a00155c:	e75d      	b.n	1a00141a <gpioInit+0x5e>
1a00155e:	bf00      	nop
1a001560:	400f4000 	.word	0x400f4000
1a001564:	40086000 	.word	0x40086000

1a001568 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001568:	f110 0f02 	cmn.w	r0, #2
1a00156c:	d02d      	beq.n	1a0015ca <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a00156e:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001572:	d02c      	beq.n	1a0015ce <gpioWrite+0x66>
{
1a001574:	b510      	push	{r4, lr}
1a001576:	b084      	sub	sp, #16
1a001578:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00157a:	2300      	movs	r3, #0
1a00157c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001580:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001584:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001588:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00158c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001590:	f10d 030b 	add.w	r3, sp, #11
1a001594:	9301      	str	r3, [sp, #4]
1a001596:	ab03      	add	r3, sp, #12
1a001598:	9300      	str	r3, [sp, #0]
1a00159a:	f10d 030d 	add.w	r3, sp, #13
1a00159e:	f10d 020e 	add.w	r2, sp, #14
1a0015a2:	f10d 010f 	add.w	r1, sp, #15
1a0015a6:	f7ff feef 	bl	1a001388 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0015aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0015ae:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0015b2:	1c21      	adds	r1, r4, #0
1a0015b4:	bf18      	it	ne
1a0015b6:	2101      	movne	r1, #1
1a0015b8:	015b      	lsls	r3, r3, #5
1a0015ba:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0015be:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0015c2:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a0015c4:	2001      	movs	r0, #1
}
1a0015c6:	b004      	add	sp, #16
1a0015c8:	bd10      	pop	{r4, pc}
	  return FALSE;
1a0015ca:	2000      	movs	r0, #0
1a0015cc:	4770      	bx	lr
	  return FALSE;
1a0015ce:	2000      	movs	r0, #0
}
1a0015d0:	4770      	bx	lr

1a0015d2 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a0015d2:	f110 0f02 	cmn.w	r0, #2
1a0015d6:	d02c      	beq.n	1a001632 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a0015d8:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0015dc:	d02b      	beq.n	1a001636 <gpioRead+0x64>
{
1a0015de:	b500      	push	{lr}
1a0015e0:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0015e2:	2300      	movs	r3, #0
1a0015e4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0015e8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0015ec:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0015f0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0015f4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0015f8:	f10d 030b 	add.w	r3, sp, #11
1a0015fc:	9301      	str	r3, [sp, #4]
1a0015fe:	ab03      	add	r3, sp, #12
1a001600:	9300      	str	r3, [sp, #0]
1a001602:	f10d 030d 	add.w	r3, sp, #13
1a001606:	f10d 020e 	add.w	r2, sp, #14
1a00160a:	f10d 010f 	add.w	r1, sp, #15
1a00160e:	f7ff febb 	bl	1a001388 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a001612:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001616:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a00161a:	015b      	lsls	r3, r3, #5
1a00161c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001620:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001624:	5c98      	ldrb	r0, [r3, r2]
1a001626:	3000      	adds	r0, #0
1a001628:	bf18      	it	ne
1a00162a:	2001      	movne	r0, #1

   return ret_val;
}
1a00162c:	b005      	add	sp, #20
1a00162e:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a001632:	2001      	movs	r0, #1
1a001634:	4770      	bx	lr
      return FALSE;
1a001636:	2000      	movs	r0, #0
}
1a001638:	4770      	bx	lr

1a00163a <gpioToggle>:
{
1a00163a:	b510      	push	{r4, lr}
1a00163c:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a00163e:	f7ff ffc8 	bl	1a0015d2 <gpioRead>
1a001642:	fab0 f180 	clz	r1, r0
1a001646:	0949      	lsrs	r1, r1, #5
1a001648:	4620      	mov	r0, r4
1a00164a:	f7ff ff8d 	bl	1a001568 <gpioWrite>
}
1a00164e:	bd10      	pop	{r4, pc}

1a001650 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a001650:	e7fe      	b.n	1a001650 <errorOcurred>

1a001652 <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a001652:	4770      	bx	lr

1a001654 <Timer_Init>:
 * @return   nothing
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_Init( uint8_t timerNumber, uint32_t ticks,
                 callBackFuncPtr_t voidFunctionPointer )
{
1a001654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   /* Source:
   http://docs.lpcware.com/lpcopen/v1.03/lpc18xx__43xx_2examples_2periph_2periph__blinky_2blinky_8c_source.html */

   /*If timer period = CompareMatch0 Period = 0 => ERROR*/
   if (ticks==0) {
1a001658:	2900      	cmp	r1, #0
1a00165a:	d077      	beq.n	1a00174c <Timer_Init+0xf8>
1a00165c:	4605      	mov	r5, r0
1a00165e:	4617      	mov	r7, r2
1a001660:	460e      	mov	r6, r1
      errorOcurred(0);
   }

   /* Enable timer clock and reset it */
   Chip_TIMER_Init(timer_sd[timerNumber].name);
1a001662:	4604      	mov	r4, r0
1a001664:	493e      	ldr	r1, [pc, #248]	; (1a001760 <Timer_Init+0x10c>)
1a001666:	0043      	lsls	r3, r0, #1
1a001668:	4403      	add	r3, r0
1a00166a:	009a      	lsls	r2, r3, #2
1a00166c:	eb01 0802 	add.w	r8, r1, r2
1a001670:	5888      	ldr	r0, [r1, r2]
1a001672:	f7ff f99f 	bl	1a0009b4 <Chip_TIMER_Init>
   Chip_RGU_TriggerReset(timer_sd[timerNumber].RGU);
1a001676:	f898 3004 	ldrb.w	r3, [r8, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	Nothing
 */
STATIC INLINE void Chip_RGU_TriggerReset(CHIP_RGU_RST_T ResetNumber)
{
	LPC_RGU->RESET_CTRL[ResetNumber >> 5] = 1 << (ResetNumber & 31);
1a00167a:	f003 011f 	and.w	r1, r3, #31
1a00167e:	095b      	lsrs	r3, r3, #5
1a001680:	2201      	movs	r2, #1
1a001682:	408a      	lsls	r2, r1
1a001684:	3340      	adds	r3, #64	; 0x40
1a001686:	4937      	ldr	r1, [pc, #220]	; (1a001764 <Timer_Init+0x110>)
1a001688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   while (Chip_RGU_InReset(timer_sd[timerNumber].RGU)) {}
1a00168c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a001690:	009a      	lsls	r2, r3, #2
1a001692:	4b33      	ldr	r3, [pc, #204]	; (1a001760 <Timer_Init+0x10c>)
1a001694:	4413      	add	r3, r2
1a001696:	791b      	ldrb	r3, [r3, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	true if the periperal is still being reset
 */
STATIC INLINE bool Chip_RGU_InReset(CHIP_RGU_RST_T ResetNumber)
{
	return !(LPC_RGU->RESET_ACTIVE_STATUS[ResetNumber >> 5] & (1 << (ResetNumber & 31)));
1a001698:	095a      	lsrs	r2, r3, #5
1a00169a:	3254      	adds	r2, #84	; 0x54
1a00169c:	4931      	ldr	r1, [pc, #196]	; (1a001764 <Timer_Init+0x110>)
1a00169e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
1a0016a2:	f003 031f 	and.w	r3, r3, #31
1a0016a6:	2201      	movs	r2, #1
1a0016a8:	fa02 f303 	lsl.w	r3, r2, r3
1a0016ac:	4219      	tst	r1, r3
1a0016ae:	d0ed      	beq.n	1a00168c <Timer_Init+0x38>
   Chip_TIMER_Reset(timer_sd[timerNumber].name);
1a0016b0:	492b      	ldr	r1, [pc, #172]	; (1a001760 <Timer_Init+0x10c>)
1a0016b2:	fa05 f302 	lsl.w	r3, r5, r2
1a0016b6:	442b      	add	r3, r5
1a0016b8:	009a      	lsls	r2, r3, #2
1a0016ba:	eb01 0802 	add.w	r8, r1, r2
1a0016be:	588c      	ldr	r4, [r1, r2]
1a0016c0:	4620      	mov	r0, r4
1a0016c2:	f7ff f97d 	bl	1a0009c0 <Chip_TIMER_Reset>

   /* Update the defalut function pointer name of the Compare match 0*/
   timer_dd[timerNumber].timerCompareMatchFunctionPointer[TIMERCOMPAREMATCH0] = voidFunctionPointer;
1a0016c6:	012b      	lsls	r3, r5, #4
1a0016c8:	4a27      	ldr	r2, [pc, #156]	; (1a001768 <Timer_Init+0x114>)
1a0016ca:	50d7      	str	r7, [r2, r3]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchEnableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a0016cc:	6963      	ldr	r3, [r4, #20]
1a0016ce:	f043 0301 	orr.w	r3, r3, #1
1a0016d2:	6163      	str	r3, [r4, #20]
	pTMR->MR[matchnum] = matchval; // matchval 0 to 4294967295 (uint32_t)
1a0016d4:	61a6      	str	r6, [r4, #24]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchEnable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_RESET_ON_MATCH(matchnum);
1a0016d6:	6963      	ldr	r3, [r4, #20]
1a0016d8:	f043 0302 	orr.w	r3, r3, #2
1a0016dc:	6163      	str	r3, [r4, #20]
	pTMR->TCR |= TIMER_ENABLE;
1a0016de:	6863      	ldr	r3, [r4, #4]
1a0016e0:	f043 0301 	orr.w	r3, r3, #1
1a0016e4:	6063      	str	r3, [r4, #4]

   /*Enable timer*/
   Chip_TIMER_Enable(timer_sd[timerNumber].name);

   /* Enable timer interrupt */
   NVIC_SetPriority(timer_sd[timerNumber].IRQn, MAX_SYSCALL_INTERRUPT_PRIORITY+1);
1a0016e6:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a0016ea:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a0016ec:	2b00      	cmp	r3, #0
1a0016ee:	db30      	blt.n	1a001752 <Timer_Init+0xfe>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0016f0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a0016f4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a0016f8:	22c0      	movs	r2, #192	; 0xc0
1a0016fa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
   NVIC_EnableIRQ(timer_sd[timerNumber].IRQn);
1a0016fe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a001702:	009a      	lsls	r2, r3, #2
1a001704:	4b16      	ldr	r3, [pc, #88]	; (1a001760 <Timer_Init+0x10c>)
1a001706:	4413      	add	r3, r2
1a001708:	689a      	ldr	r2, [r3, #8]
1a00170a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a00170c:	2b00      	cmp	r3, #0
1a00170e:	db08      	blt.n	1a001722 <Timer_Init+0xce>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001710:	f002 021f 	and.w	r2, r2, #31
1a001714:	095b      	lsrs	r3, r3, #5
1a001716:	2101      	movs	r1, #1
1a001718:	fa01 f202 	lsl.w	r2, r1, r2
1a00171c:	4913      	ldr	r1, [pc, #76]	; (1a00176c <Timer_Init+0x118>)
1a00171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   NVIC_ClearPendingIRQ(timer_sd[timerNumber].IRQn);
1a001722:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1a001726:	00aa      	lsls	r2, r5, #2
1a001728:	4b0d      	ldr	r3, [pc, #52]	; (1a001760 <Timer_Init+0x10c>)
1a00172a:	4413      	add	r3, r2
1a00172c:	689a      	ldr	r2, [r3, #8]
1a00172e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a001730:	2b00      	cmp	r3, #0
1a001732:	db09      	blt.n	1a001748 <Timer_Init+0xf4>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001734:	f002 021f 	and.w	r2, r2, #31
1a001738:	095b      	lsrs	r3, r3, #5
1a00173a:	2101      	movs	r1, #1
1a00173c:	fa01 f202 	lsl.w	r2, r1, r2
1a001740:	3360      	adds	r3, #96	; 0x60
1a001742:	490a      	ldr	r1, [pc, #40]	; (1a00176c <Timer_Init+0x118>)
1a001744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a001748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      errorOcurred(0);
1a00174c:	2000      	movs	r0, #0
1a00174e:	f7ff ff7f 	bl	1a001650 <errorOcurred>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001752:	f002 020f 	and.w	r2, r2, #15
1a001756:	4b06      	ldr	r3, [pc, #24]	; (1a001770 <Timer_Init+0x11c>)
1a001758:	4413      	add	r3, r2
1a00175a:	22c0      	movs	r2, #192	; 0xc0
1a00175c:	761a      	strb	r2, [r3, #24]
1a00175e:	e7ce      	b.n	1a0016fe <Timer_Init+0xaa>
1a001760:	1a003304 	.word	0x1a003304
1a001764:	40053000 	.word	0x40053000
1a001768:	1000003c 	.word	0x1000003c
1a00176c:	e000e100 	.word	0xe000e100
1a001770:	e000ecfc 	.word	0xe000ecfc

1a001774 <Timer_microsecondsToTicks>:
 * @note   Can be used for the second parameter in the Timer_init
 */
uint32_t Timer_microsecondsToTicks( uint32_t uS )
{
   return (uS*(LPC4337_MAX_FREC/1000000));
}
1a001774:	23cc      	movs	r3, #204	; 0xcc
1a001776:	fb03 f000 	mul.w	r0, r3, r0
1a00177a:	4770      	bx	lr

1a00177c <Timer_EnableCompareMatch>:
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_EnableCompareMatch( uint8_t timerNumber, uint8_t compareMatchNumber,
                               uint32_t ticks,
                               callBackFuncPtr_t voidFunctionPointer )
{
1a00177c:	b430      	push	{r4, r5}

   timer_dd[timerNumber].timerCompareMatchFunctionPointer[compareMatchNumber] = voidFunctionPointer;
1a00177e:	eb01 0580 	add.w	r5, r1, r0, lsl #2
1a001782:	4c0a      	ldr	r4, [pc, #40]	; (1a0017ac <Timer_EnableCompareMatch+0x30>)
1a001784:	f844 3025 	str.w	r3, [r4, r5, lsl #2]

   Chip_TIMER_MatchEnableInt(timer_sd[timerNumber].name, compareMatchNumber);
1a001788:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00178c:	0083      	lsls	r3, r0, #2
1a00178e:	4808      	ldr	r0, [pc, #32]	; (1a0017b0 <Timer_EnableCompareMatch+0x34>)
1a001790:	58c3      	ldr	r3, [r0, r3]
1a001792:	b249      	sxtb	r1, r1
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a001794:	6958      	ldr	r0, [r3, #20]
1a001796:	eb01 0541 	add.w	r5, r1, r1, lsl #1
1a00179a:	2401      	movs	r4, #1
1a00179c:	40ac      	lsls	r4, r5
1a00179e:	4320      	orrs	r0, r4
1a0017a0:	6158      	str	r0, [r3, #20]
	pTMR->MR[matchnum] = matchval; // matchval 0 to 4294967295 (uint32_t)
1a0017a2:	3106      	adds	r1, #6
1a0017a4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   Chip_TIMER_SetMatch(timer_sd[timerNumber].name, compareMatchNumber, ticks);
}
1a0017a8:	bc30      	pop	{r4, r5}
1a0017aa:	4770      	bx	lr
1a0017ac:	1000003c 	.word	0x1000003c
1a0017b0:	1a003304 	.word	0x1a003304

1a0017b4 <Timer_DisableCompareMatch>:
 * @param   compareMatchNumber:   Compare match number, 1 to 3
 * @return   None
 */
void Timer_DisableCompareMatch( uint8_t timerNumber,
                                uint8_t compareMatchNumber )
{
1a0017b4:	b410      	push	{r4}

   timer_dd[timerNumber].timerCompareMatchFunctionPointer[compareMatchNumber] = doNothing;
1a0017b6:	eb01 0280 	add.w	r2, r1, r0, lsl #2
1a0017ba:	4b0c      	ldr	r3, [pc, #48]	; (1a0017ec <Timer_DisableCompareMatch+0x38>)
1a0017bc:	4c0c      	ldr	r4, [pc, #48]	; (1a0017f0 <Timer_DisableCompareMatch+0x3c>)
1a0017be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]

   Chip_TIMER_ClearMatch(timer_sd[timerNumber].name, compareMatchNumber);
1a0017c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0017c6:	0083      	lsls	r3, r0, #2
1a0017c8:	4a0a      	ldr	r2, [pc, #40]	; (1a0017f4 <Timer_DisableCompareMatch+0x40>)
1a0017ca:	58d2      	ldr	r2, [r2, r3]
1a0017cc:	b249      	sxtb	r1, r1
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0017ce:	2301      	movs	r3, #1
1a0017d0:	fa03 f001 	lsl.w	r0, r3, r1
1a0017d4:	6010      	str	r0, [r2, #0]
	pTMR->MCR &= ~TIMER_INT_ON_MATCH(matchnum);
1a0017d6:	6950      	ldr	r0, [r2, #20]
1a0017d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
1a0017dc:	fa03 f101 	lsl.w	r1, r3, r1
1a0017e0:	ea20 0101 	bic.w	r1, r0, r1
1a0017e4:	6151      	str	r1, [r2, #20]
   Chip_TIMER_MatchDisableInt(timer_sd[timerNumber].name, compareMatchNumber);
}
1a0017e6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0017ea:	4770      	bx	lr
1a0017ec:	1000003c 	.word	0x1000003c
1a0017f0:	1a001653 	.word	0x1a001653
1a0017f4:	1a003304 	.word	0x1a003304

1a0017f8 <Timer_SetCompareMatch>:
 */
void Timer_SetCompareMatch( uint8_t timerNumber,
                            uint8_t compareMatchNumber,
                            uint32_t ticks )
{
   Chip_TIMER_SetMatch(timer_sd[timerNumber].name, compareMatchNumber,ticks);
1a0017f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0017fc:	0083      	lsls	r3, r0, #2
1a0017fe:	4803      	ldr	r0, [pc, #12]	; (1a00180c <Timer_SetCompareMatch+0x14>)
1a001800:	58c3      	ldr	r3, [r0, r3]
1a001802:	b249      	sxtb	r1, r1
	pTMR->MR[matchnum] = matchval; // matchval 0 to 4294967295 (uint32_t)
1a001804:	3106      	adds	r1, #6
1a001806:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
1a00180a:	4770      	bx	lr
1a00180c:	1a003304 	.word	0x1a003304

1a001810 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a001810:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001812:	2400      	movs	r4, #0
1a001814:	e001      	b.n	1a00181a <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001816:	3401      	adds	r4, #1
1a001818:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00181a:	2c03      	cmp	r4, #3
1a00181c:	d812      	bhi.n	1a001844 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00181e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001820:	4b09      	ldr	r3, [pc, #36]	; (1a001848 <TIMER0_IRQHandler+0x38>)
1a001822:	681a      	ldr	r2, [r3, #0]
1a001824:	f004 010f 	and.w	r1, r4, #15
1a001828:	2301      	movs	r3, #1
1a00182a:	408b      	lsls	r3, r1
1a00182c:	421a      	tst	r2, r3
1a00182e:	d0f2      	beq.n	1a001816 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001830:	4b06      	ldr	r3, [pc, #24]	; (1a00184c <TIMER0_IRQHandler+0x3c>)
1a001832:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a001836:	2000      	movs	r0, #0
1a001838:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00183a:	2301      	movs	r3, #1
1a00183c:	40ab      	lsls	r3, r5
1a00183e:	4a02      	ldr	r2, [pc, #8]	; (1a001848 <TIMER0_IRQHandler+0x38>)
1a001840:	6013      	str	r3, [r2, #0]
1a001842:	e7e8      	b.n	1a001816 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a001844:	bd38      	pop	{r3, r4, r5, pc}
1a001846:	bf00      	nop
1a001848:	40084000 	.word	0x40084000
1a00184c:	1000003c 	.word	0x1000003c

1a001850 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a001850:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001852:	2400      	movs	r4, #0
1a001854:	e001      	b.n	1a00185a <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001856:	3401      	adds	r4, #1
1a001858:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00185a:	2c03      	cmp	r4, #3
1a00185c:	d813      	bhi.n	1a001886 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a00185e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001860:	4b09      	ldr	r3, [pc, #36]	; (1a001888 <TIMER1_IRQHandler+0x38>)
1a001862:	681a      	ldr	r2, [r3, #0]
1a001864:	f004 010f 	and.w	r1, r4, #15
1a001868:	2301      	movs	r3, #1
1a00186a:	408b      	lsls	r3, r1
1a00186c:	421a      	tst	r2, r3
1a00186e:	d0f2      	beq.n	1a001856 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001870:	1d23      	adds	r3, r4, #4
1a001872:	4a06      	ldr	r2, [pc, #24]	; (1a00188c <TIMER1_IRQHandler+0x3c>)
1a001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001878:	2000      	movs	r0, #0
1a00187a:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00187c:	2301      	movs	r3, #1
1a00187e:	40ab      	lsls	r3, r5
1a001880:	4a01      	ldr	r2, [pc, #4]	; (1a001888 <TIMER1_IRQHandler+0x38>)
1a001882:	6013      	str	r3, [r2, #0]
1a001884:	e7e7      	b.n	1a001856 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a001886:	bd38      	pop	{r3, r4, r5, pc}
1a001888:	40085000 	.word	0x40085000
1a00188c:	1000003c 	.word	0x1000003c

1a001890 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a001890:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001892:	2400      	movs	r4, #0
1a001894:	e001      	b.n	1a00189a <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001896:	3401      	adds	r4, #1
1a001898:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00189a:	2c03      	cmp	r4, #3
1a00189c:	d814      	bhi.n	1a0018c8 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a00189e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0018a0:	4b0a      	ldr	r3, [pc, #40]	; (1a0018cc <TIMER2_IRQHandler+0x3c>)
1a0018a2:	681a      	ldr	r2, [r3, #0]
1a0018a4:	f004 010f 	and.w	r1, r4, #15
1a0018a8:	2301      	movs	r3, #1
1a0018aa:	408b      	lsls	r3, r1
1a0018ac:	421a      	tst	r2, r3
1a0018ae:	d0f2      	beq.n	1a001896 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0018b0:	f104 0308 	add.w	r3, r4, #8
1a0018b4:	4a06      	ldr	r2, [pc, #24]	; (1a0018d0 <TIMER2_IRQHandler+0x40>)
1a0018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0018ba:	2000      	movs	r0, #0
1a0018bc:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0018be:	2301      	movs	r3, #1
1a0018c0:	40ab      	lsls	r3, r5
1a0018c2:	4a02      	ldr	r2, [pc, #8]	; (1a0018cc <TIMER2_IRQHandler+0x3c>)
1a0018c4:	6013      	str	r3, [r2, #0]
1a0018c6:	e7e6      	b.n	1a001896 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0018c8:	bd38      	pop	{r3, r4, r5, pc}
1a0018ca:	bf00      	nop
1a0018cc:	400c3000 	.word	0x400c3000
1a0018d0:	1000003c 	.word	0x1000003c

1a0018d4 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0018d4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0018d6:	2400      	movs	r4, #0
1a0018d8:	e001      	b.n	1a0018de <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0018da:	3401      	adds	r4, #1
1a0018dc:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0018de:	2c03      	cmp	r4, #3
1a0018e0:	d814      	bhi.n	1a00190c <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0018e2:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0018e4:	4b0a      	ldr	r3, [pc, #40]	; (1a001910 <TIMER3_IRQHandler+0x3c>)
1a0018e6:	681a      	ldr	r2, [r3, #0]
1a0018e8:	f004 010f 	and.w	r1, r4, #15
1a0018ec:	2301      	movs	r3, #1
1a0018ee:	408b      	lsls	r3, r1
1a0018f0:	421a      	tst	r2, r3
1a0018f2:	d0f2      	beq.n	1a0018da <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0018f4:	f104 030c 	add.w	r3, r4, #12
1a0018f8:	4a06      	ldr	r2, [pc, #24]	; (1a001914 <TIMER3_IRQHandler+0x40>)
1a0018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0018fe:	2000      	movs	r0, #0
1a001900:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001902:	2301      	movs	r3, #1
1a001904:	40ab      	lsls	r3, r5
1a001906:	4a02      	ldr	r2, [pc, #8]	; (1a001910 <TIMER3_IRQHandler+0x3c>)
1a001908:	6013      	str	r3, [r2, #0]
1a00190a:	e7e6      	b.n	1a0018da <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a00190c:	bd38      	pop	{r3, r4, r5, pc}
1a00190e:	bf00      	nop
1a001910:	400c4000 	.word	0x400c4000
1a001914:	1000003c 	.word	0x1000003c

1a001918 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001918:	b118      	cbz	r0, 1a001922 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a00191a:	4b04      	ldr	r3, [pc, #16]	; (1a00192c <tickPowerSet+0x14>)
1a00191c:	2207      	movs	r2, #7
1a00191e:	601a      	str	r2, [r3, #0]
1a001920:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001922:	4b02      	ldr	r3, [pc, #8]	; (1a00192c <tickPowerSet+0x14>)
1a001924:	2200      	movs	r2, #0
1a001926:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001928:	4770      	bx	lr
1a00192a:	bf00      	nop
1a00192c:	e000e010 	.word	0xe000e010

1a001930 <tickInit>:
{
1a001930:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001932:	ea50 0401 	orrs.w	r4, r0, r1
1a001936:	d02a      	beq.n	1a00198e <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001938:	f110 32ff 	adds.w	r2, r0, #4294967295
1a00193c:	f141 33ff 	adc.w	r3, r1, #4294967295
1a001940:	2b00      	cmp	r3, #0
1a001942:	bf08      	it	eq
1a001944:	2a32      	cmpeq	r2, #50	; 0x32
1a001946:	d227      	bcs.n	1a001998 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001948:	4b14      	ldr	r3, [pc, #80]	; (1a00199c <tickInit+0x6c>)
1a00194a:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00194e:	4b14      	ldr	r3, [pc, #80]	; (1a0019a0 <tickInit+0x70>)
1a001950:	681b      	ldr	r3, [r3, #0]
1a001952:	fba3 4500 	umull	r4, r5, r3, r0
1a001956:	fb03 5501 	mla	r5, r3, r1, r5
1a00195a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00195e:	2300      	movs	r3, #0
1a001960:	4620      	mov	r0, r4
1a001962:	4629      	mov	r1, r5
1a001964:	f001 f9f0 	bl	1a002d48 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001968:	3801      	subs	r0, #1
1a00196a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00196e:	d209      	bcs.n	1a001984 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001970:	4b0c      	ldr	r3, [pc, #48]	; (1a0019a4 <tickInit+0x74>)
1a001972:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001974:	4a0c      	ldr	r2, [pc, #48]	; (1a0019a8 <tickInit+0x78>)
1a001976:	21e0      	movs	r1, #224	; 0xe0
1a001978:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a00197c:	2200      	movs	r2, #0
1a00197e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001980:	2207      	movs	r2, #7
1a001982:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001984:	2001      	movs	r0, #1
1a001986:	f7ff ffc7 	bl	1a001918 <tickPowerSet>
      bool_t ret_val = 1;
1a00198a:	2001      	movs	r0, #1
}
1a00198c:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00198e:	2000      	movs	r0, #0
1a001990:	f7ff ffc2 	bl	1a001918 <tickPowerSet>
         ret_val = 0;
1a001994:	2000      	movs	r0, #0
1a001996:	e7f9      	b.n	1a00198c <tickInit+0x5c>
            ret_val = 0;
1a001998:	2000      	movs	r0, #0
1a00199a:	e7f7      	b.n	1a00198c <tickInit+0x5c>
1a00199c:	10000080 	.word	0x10000080
1a0019a0:	10000218 	.word	0x10000218
1a0019a4:	e000e010 	.word	0xe000e010
1a0019a8:	e000ed00 	.word	0xe000ed00

1a0019ac <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0019ac:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0019ae:	4a07      	ldr	r2, [pc, #28]	; (1a0019cc <SysTick_Handler+0x20>)
1a0019b0:	6813      	ldr	r3, [r2, #0]
1a0019b2:	6851      	ldr	r1, [r2, #4]
1a0019b4:	3301      	adds	r3, #1
1a0019b6:	f141 0100 	adc.w	r1, r1, #0
1a0019ba:	6013      	str	r3, [r2, #0]
1a0019bc:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0019be:	4b04      	ldr	r3, [pc, #16]	; (1a0019d0 <SysTick_Handler+0x24>)
1a0019c0:	681b      	ldr	r3, [r3, #0]
1a0019c2:	b113      	cbz	r3, 1a0019ca <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0019c4:	4a03      	ldr	r2, [pc, #12]	; (1a0019d4 <SysTick_Handler+0x28>)
1a0019c6:	6810      	ldr	r0, [r2, #0]
1a0019c8:	4798      	blx	r3
   }
}
1a0019ca:	bd08      	pop	{r3, pc}
1a0019cc:	10000128 	.word	0x10000128
1a0019d0:	10000130 	.word	0x10000130
1a0019d4:	10000124 	.word	0x10000124

1a0019d8 <uartProcessIRQ>:
{
1a0019d8:	b570      	push	{r4, r5, r6, lr}
1a0019da:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a0019dc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a0019e0:	0093      	lsls	r3, r2, #2
1a0019e2:	4a1f      	ldr	r2, [pc, #124]	; (1a001a60 <uartProcessIRQ+0x88>)
1a0019e4:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0019e6:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a0019e8:	b2ed      	uxtb	r5, r5
1a0019ea:	f015 0f01 	tst.w	r5, #1
1a0019ee:	d009      	beq.n	1a001a04 <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0019f0:	b920      	cbnz	r0, 1a0019fc <uartProcessIRQ+0x24>
1a0019f2:	4b1c      	ldr	r3, [pc, #112]	; (1a001a64 <uartProcessIRQ+0x8c>)
1a0019f4:	681b      	ldr	r3, [r3, #0]
1a0019f6:	b10b      	cbz	r3, 1a0019fc <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a0019f8:	2000      	movs	r0, #0
1a0019fa:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0019fc:	2c03      	cmp	r4, #3
1a0019fe:	d013      	beq.n	1a001a28 <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001a00:	2c05      	cmp	r4, #5
1a001a02:	d018      	beq.n	1a001a36 <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a001a04:	f015 0f20 	tst.w	r5, #32
1a001a08:	d00d      	beq.n	1a001a26 <uartProcessIRQ+0x4e>
	return pUART->IER;
1a001a0a:	6873      	ldr	r3, [r6, #4]
1a001a0c:	f013 0f02 	tst.w	r3, #2
1a001a10:	d009      	beq.n	1a001a26 <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a001a12:	b924      	cbnz	r4, 1a001a1e <uartProcessIRQ+0x46>
1a001a14:	4b14      	ldr	r3, [pc, #80]	; (1a001a68 <uartProcessIRQ+0x90>)
1a001a16:	681b      	ldr	r3, [r3, #0]
1a001a18:	b10b      	cbz	r3, 1a001a1e <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a001a1a:	2000      	movs	r0, #0
1a001a1c:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a001a1e:	2c03      	cmp	r4, #3
1a001a20:	d010      	beq.n	1a001a44 <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a001a22:	2c05      	cmp	r4, #5
1a001a24:	d015      	beq.n	1a001a52 <uartProcessIRQ+0x7a>
}
1a001a26:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a001a28:	4b10      	ldr	r3, [pc, #64]	; (1a001a6c <uartProcessIRQ+0x94>)
1a001a2a:	681b      	ldr	r3, [r3, #0]
1a001a2c:	2b00      	cmp	r3, #0
1a001a2e:	d0e7      	beq.n	1a001a00 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a001a30:	2000      	movs	r0, #0
1a001a32:	4798      	blx	r3
1a001a34:	e7e4      	b.n	1a001a00 <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001a36:	4b0e      	ldr	r3, [pc, #56]	; (1a001a70 <uartProcessIRQ+0x98>)
1a001a38:	681b      	ldr	r3, [r3, #0]
1a001a3a:	2b00      	cmp	r3, #0
1a001a3c:	d0e2      	beq.n	1a001a04 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a001a3e:	2000      	movs	r0, #0
1a001a40:	4798      	blx	r3
1a001a42:	e7df      	b.n	1a001a04 <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a001a44:	4b0b      	ldr	r3, [pc, #44]	; (1a001a74 <uartProcessIRQ+0x9c>)
1a001a46:	681b      	ldr	r3, [r3, #0]
1a001a48:	2b00      	cmp	r3, #0
1a001a4a:	d0ea      	beq.n	1a001a22 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a001a4c:	2000      	movs	r0, #0
1a001a4e:	4798      	blx	r3
1a001a50:	e7e7      	b.n	1a001a22 <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a001a52:	4b09      	ldr	r3, [pc, #36]	; (1a001a78 <uartProcessIRQ+0xa0>)
1a001a54:	681b      	ldr	r3, [r3, #0]
1a001a56:	2b00      	cmp	r3, #0
1a001a58:	d0e5      	beq.n	1a001a26 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a001a5a:	2000      	movs	r0, #0
1a001a5c:	4798      	blx	r3
}
1a001a5e:	e7e2      	b.n	1a001a26 <uartProcessIRQ+0x4e>
1a001a60:	1a003334 	.word	0x1a003334
1a001a64:	10000134 	.word	0x10000134
1a001a68:	10000140 	.word	0x10000140
1a001a6c:	10000138 	.word	0x10000138
1a001a70:	1000013c 	.word	0x1000013c
1a001a74:	10000144 	.word	0x10000144
1a001a78:	10000148 	.word	0x10000148

1a001a7c <uartInterrupt>:
   if( enable ) {
1a001a7c:	b341      	cbz	r1, 1a001ad0 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a001a7e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a001a82:	009a      	lsls	r2, r3, #2
1a001a84:	4b1e      	ldr	r3, [pc, #120]	; (1a001b00 <uartInterrupt+0x84>)
1a001a86:	4413      	add	r3, r2
1a001a88:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a001a8c:	2b00      	cmp	r3, #0
1a001a8e:	db18      	blt.n	1a001ac2 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001a90:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a001a94:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a001a98:	22a0      	movs	r2, #160	; 0xa0
1a001a9a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a001a9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001aa2:	0082      	lsls	r2, r0, #2
1a001aa4:	4b16      	ldr	r3, [pc, #88]	; (1a001b00 <uartInterrupt+0x84>)
1a001aa6:	4413      	add	r3, r2
1a001aa8:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a001aac:	2b00      	cmp	r3, #0
1a001aae:	db25      	blt.n	1a001afc <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001ab0:	f003 011f 	and.w	r1, r3, #31
1a001ab4:	095b      	lsrs	r3, r3, #5
1a001ab6:	2201      	movs	r2, #1
1a001ab8:	408a      	lsls	r2, r1
1a001aba:	4912      	ldr	r1, [pc, #72]	; (1a001b04 <uartInterrupt+0x88>)
1a001abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001ac0:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001ac2:	f003 030f 	and.w	r3, r3, #15
1a001ac6:	4a10      	ldr	r2, [pc, #64]	; (1a001b08 <uartInterrupt+0x8c>)
1a001ac8:	441a      	add	r2, r3
1a001aca:	23a0      	movs	r3, #160	; 0xa0
1a001acc:	7613      	strb	r3, [r2, #24]
1a001ace:	e7e6      	b.n	1a001a9e <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a001ad0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001ad4:	0082      	lsls	r2, r0, #2
1a001ad6:	4b0a      	ldr	r3, [pc, #40]	; (1a001b00 <uartInterrupt+0x84>)
1a001ad8:	4413      	add	r3, r2
1a001ada:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a001ade:	2b00      	cmp	r3, #0
1a001ae0:	db0c      	blt.n	1a001afc <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001ae2:	f003 011f 	and.w	r1, r3, #31
1a001ae6:	095b      	lsrs	r3, r3, #5
1a001ae8:	2201      	movs	r2, #1
1a001aea:	408a      	lsls	r2, r1
1a001aec:	3320      	adds	r3, #32
1a001aee:	4905      	ldr	r1, [pc, #20]	; (1a001b04 <uartInterrupt+0x88>)
1a001af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a001af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a001af8:	f3bf 8f6f 	isb	sy
}
1a001afc:	4770      	bx	lr
1a001afe:	bf00      	nop
1a001b00:	1a003334 	.word	0x1a003334
1a001b04:	e000e100 	.word	0xe000e100
1a001b08:	e000ecfc 	.word	0xe000ecfc

1a001b0c <uartCallbackSet>:
   switch(event){
1a001b0c:	b111      	cbz	r1, 1a001b14 <uartCallbackSet+0x8>
1a001b0e:	2901      	cmp	r1, #1
1a001b10:	d01d      	beq.n	1a001b4e <uartCallbackSet+0x42>
1a001b12:	4770      	bx	lr
         if( callbackFunc != 0 ) {
1a001b14:	b182      	cbz	r2, 1a001b38 <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a001b16:	2801      	cmp	r0, #1
1a001b18:	d90f      	bls.n	1a001b3a <uartCallbackSet+0x2e>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a001b1a:	1ec3      	subs	r3, r0, #3
1a001b1c:	b2db      	uxtb	r3, r3
1a001b1e:	2b01      	cmp	r3, #1
1a001b20:	d90e      	bls.n	1a001b40 <uartCallbackSet+0x34>
            if( uart == UART_232 ){
1a001b22:	2805      	cmp	r0, #5
1a001b24:	d00f      	beq.n	1a001b46 <uartCallbackSet+0x3a>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a001b26:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a001b28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001b2c:	0082      	lsls	r2, r0, #2
1a001b2e:	4913      	ldr	r1, [pc, #76]	; (1a001b7c <uartCallbackSet+0x70>)
1a001b30:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a001b32:	6851      	ldr	r1, [r2, #4]
1a001b34:	430b      	orrs	r3, r1
1a001b36:	6053      	str	r3, [r2, #4]
}
1a001b38:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a001b3a:	4b11      	ldr	r3, [pc, #68]	; (1a001b80 <uartCallbackSet+0x74>)
1a001b3c:	601a      	str	r2, [r3, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a001b3e:	e7ec      	b.n	1a001b1a <uartCallbackSet+0xe>
               rxIsrCallbackUART2 = callbackFunc;
1a001b40:	4b10      	ldr	r3, [pc, #64]	; (1a001b84 <uartCallbackSet+0x78>)
1a001b42:	601a      	str	r2, [r3, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a001b44:	e7ed      	b.n	1a001b22 <uartCallbackSet+0x16>
               rxIsrCallbackUART3 = callbackFunc;
1a001b46:	4b10      	ldr	r3, [pc, #64]	; (1a001b88 <uartCallbackSet+0x7c>)
1a001b48:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a001b4a:	2305      	movs	r3, #5
1a001b4c:	e7ec      	b.n	1a001b28 <uartCallbackSet+0x1c>
         if( callbackFunc != 0 ) {
1a001b4e:	2a00      	cmp	r2, #0
1a001b50:	d0f2      	beq.n	1a001b38 <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a001b52:	2801      	cmp	r0, #1
1a001b54:	d907      	bls.n	1a001b66 <uartCallbackSet+0x5a>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a001b56:	1ec3      	subs	r3, r0, #3
1a001b58:	b2db      	uxtb	r3, r3
1a001b5a:	2b01      	cmp	r3, #1
1a001b5c:	d906      	bls.n	1a001b6c <uartCallbackSet+0x60>
            if( uart == UART_232 ){
1a001b5e:	2805      	cmp	r0, #5
1a001b60:	d007      	beq.n	1a001b72 <uartCallbackSet+0x66>
         intMask = UART_IER_THREINT;
1a001b62:	2302      	movs	r3, #2
1a001b64:	e7e0      	b.n	1a001b28 <uartCallbackSet+0x1c>
               txIsrCallbackUART0 = callbackFunc;
1a001b66:	4b09      	ldr	r3, [pc, #36]	; (1a001b8c <uartCallbackSet+0x80>)
1a001b68:	601a      	str	r2, [r3, #0]
               txIsrCallbackUART0Params = callbackParam;
1a001b6a:	e7f4      	b.n	1a001b56 <uartCallbackSet+0x4a>
               txIsrCallbackUART2 = callbackFunc;
1a001b6c:	4b08      	ldr	r3, [pc, #32]	; (1a001b90 <uartCallbackSet+0x84>)
1a001b6e:	601a      	str	r2, [r3, #0]
               txIsrCallbackUART2Params = callbackParam;
1a001b70:	e7f5      	b.n	1a001b5e <uartCallbackSet+0x52>
               txIsrCallbackUART3 = callbackFunc;
1a001b72:	4b08      	ldr	r3, [pc, #32]	; (1a001b94 <uartCallbackSet+0x88>)
1a001b74:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_THREINT;
1a001b76:	2302      	movs	r3, #2
1a001b78:	e7d6      	b.n	1a001b28 <uartCallbackSet+0x1c>
1a001b7a:	bf00      	nop
1a001b7c:	1a003334 	.word	0x1a003334
1a001b80:	10000134 	.word	0x10000134
1a001b84:	10000138 	.word	0x10000138
1a001b88:	1000013c 	.word	0x1000013c
1a001b8c:	10000140 	.word	0x10000140
1a001b90:	10000144 	.word	0x10000144
1a001b94:	10000148 	.word	0x10000148

1a001b98 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001b98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001b9c:	0083      	lsls	r3, r0, #2
1a001b9e:	4a03      	ldr	r2, [pc, #12]	; (1a001bac <uartTxReady+0x14>)
1a001ba0:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a001ba2:	6958      	ldr	r0, [r3, #20]
}
1a001ba4:	f000 0020 	and.w	r0, r0, #32
1a001ba8:	4770      	bx	lr
1a001baa:	bf00      	nop
1a001bac:	1a003334 	.word	0x1a003334

1a001bb0 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a001bb0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001bb4:	0083      	lsls	r3, r0, #2
1a001bb6:	4a02      	ldr	r2, [pc, #8]	; (1a001bc0 <uartRxRead+0x10>)
1a001bb8:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001bba:	6818      	ldr	r0, [r3, #0]
}
1a001bbc:	b2c0      	uxtb	r0, r0
1a001bbe:	4770      	bx	lr
1a001bc0:	1a003334 	.word	0x1a003334

1a001bc4 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a001bc4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001bc8:	0083      	lsls	r3, r0, #2
1a001bca:	4a02      	ldr	r2, [pc, #8]	; (1a001bd4 <uartTxWrite+0x10>)
1a001bcc:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a001bce:	6019      	str	r1, [r3, #0]
}
1a001bd0:	4770      	bx	lr
1a001bd2:	bf00      	nop
1a001bd4:	1a003334 	.word	0x1a003334

1a001bd8 <uartInit>:
{
1a001bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001bdc:	4680      	mov	r8, r0
1a001bde:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001be0:	4c19      	ldr	r4, [pc, #100]	; (1a001c48 <uartInit+0x70>)
1a001be2:	0045      	lsls	r5, r0, #1
1a001be4:	182a      	adds	r2, r5, r0
1a001be6:	0093      	lsls	r3, r2, #2
1a001be8:	18e6      	adds	r6, r4, r3
1a001bea:	58e7      	ldr	r7, [r4, r3]
1a001bec:	4638      	mov	r0, r7
1a001bee:	f7ff fae9 	bl	1a0011c4 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a001bf2:	4649      	mov	r1, r9
1a001bf4:	4638      	mov	r0, r7
1a001bf6:	f7ff fb0f 	bl	1a001218 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001bfa:	2307      	movs	r3, #7
1a001bfc:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001bfe:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a001c00:	2301      	movs	r3, #1
1a001c02:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a001c04:	7930      	ldrb	r0, [r6, #4]
1a001c06:	7973      	ldrb	r3, [r6, #5]
1a001c08:	79b2      	ldrb	r2, [r6, #6]
1a001c0a:	f042 0218 	orr.w	r2, r2, #24
1a001c0e:	490f      	ldr	r1, [pc, #60]	; (1a001c4c <uartInit+0x74>)
1a001c10:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001c18:	79f0      	ldrb	r0, [r6, #7]
1a001c1a:	7a33      	ldrb	r3, [r6, #8]
1a001c1c:	7a72      	ldrb	r2, [r6, #9]
1a001c1e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001c22:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a001c2a:	f1b8 0f01 	cmp.w	r8, #1
1a001c2e:	d001      	beq.n	1a001c34 <uartInit+0x5c>
}
1a001c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001c34:	4a06      	ldr	r2, [pc, #24]	; (1a001c50 <uartInit+0x78>)
1a001c36:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001c38:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a001c3e:	221a      	movs	r2, #26
1a001c40:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a001c44:	e7f4      	b.n	1a001c30 <uartInit+0x58>
1a001c46:	bf00      	nop
1a001c48:	1a003334 	.word	0x1a003334
1a001c4c:	40086000 	.word	0x40086000
1a001c50:	40081000 	.word	0x40081000

1a001c54 <uartWriteByte>:
{
1a001c54:	b538      	push	{r3, r4, r5, lr}
1a001c56:	4604      	mov	r4, r0
1a001c58:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a001c5a:	4620      	mov	r0, r4
1a001c5c:	f7ff ff9c 	bl	1a001b98 <uartTxReady>
1a001c60:	2800      	cmp	r0, #0
1a001c62:	d0fa      	beq.n	1a001c5a <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a001c64:	4629      	mov	r1, r5
1a001c66:	4620      	mov	r0, r4
1a001c68:	f7ff ffac 	bl	1a001bc4 <uartTxWrite>
}
1a001c6c:	bd38      	pop	{r3, r4, r5, pc}

1a001c6e <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a001c6e:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a001c70:	2003      	movs	r0, #3
1a001c72:	f7ff feb1 	bl	1a0019d8 <uartProcessIRQ>
}
1a001c76:	bd08      	pop	{r3, pc}

1a001c78 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a001c78:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a001c7a:	2005      	movs	r0, #5
1a001c7c:	f7ff feac 	bl	1a0019d8 <uartProcessIRQ>
}
1a001c80:	bd08      	pop	{r3, pc}
1a001c82:	Address 0x1a001c82 is out of bounds.


1a001c84 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001c84:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001c86:	4b04      	ldr	r3, [pc, #16]	; (1a001c98 <USB0_IRQHandler+0x14>)
1a001c88:	681b      	ldr	r3, [r3, #0]
1a001c8a:	681b      	ldr	r3, [r3, #0]
1a001c8c:	68db      	ldr	r3, [r3, #12]
1a001c8e:	4a03      	ldr	r2, [pc, #12]	; (1a001c9c <USB0_IRQHandler+0x18>)
1a001c90:	6810      	ldr	r0, [r2, #0]
1a001c92:	4798      	blx	r3
}
1a001c94:	bd08      	pop	{r3, pc}
1a001c96:	bf00      	nop
1a001c98:	1000021c 	.word	0x1000021c
1a001c9c:	1000014c 	.word	0x1000014c

1a001ca0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001ca0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001ca2:	f7fe ffa9 	bl	1a000bf8 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001ca6:	4b1a      	ldr	r3, [pc, #104]	; (1a001d10 <boardInit+0x70>)
1a001ca8:	6818      	ldr	r0, [r3, #0]
1a001caa:	f7ff fb5f 	bl	1a00136c <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001cae:	2001      	movs	r0, #1
1a001cb0:	2100      	movs	r1, #0
1a001cb2:	f7ff fe3d 	bl	1a001930 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001cb6:	2105      	movs	r1, #5
1a001cb8:	2000      	movs	r0, #0
1a001cba:	f7ff fb7f 	bl	1a0013bc <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001cbe:	2100      	movs	r1, #0
1a001cc0:	2024      	movs	r0, #36	; 0x24
1a001cc2:	f7ff fb7b 	bl	1a0013bc <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001cc6:	2100      	movs	r1, #0
1a001cc8:	2025      	movs	r0, #37	; 0x25
1a001cca:	f7ff fb77 	bl	1a0013bc <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001cce:	2100      	movs	r1, #0
1a001cd0:	2026      	movs	r0, #38	; 0x26
1a001cd2:	f7ff fb73 	bl	1a0013bc <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001cd6:	2100      	movs	r1, #0
1a001cd8:	2027      	movs	r0, #39	; 0x27
1a001cda:	f7ff fb6f 	bl	1a0013bc <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001cde:	2101      	movs	r1, #1
1a001ce0:	2028      	movs	r0, #40	; 0x28
1a001ce2:	f7ff fb6b 	bl	1a0013bc <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001ce6:	2101      	movs	r1, #1
1a001ce8:	2029      	movs	r0, #41	; 0x29
1a001cea:	f7ff fb67 	bl	1a0013bc <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001cee:	2101      	movs	r1, #1
1a001cf0:	202a      	movs	r0, #42	; 0x2a
1a001cf2:	f7ff fb63 	bl	1a0013bc <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001cf6:	2101      	movs	r1, #1
1a001cf8:	202b      	movs	r0, #43	; 0x2b
1a001cfa:	f7ff fb5f 	bl	1a0013bc <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001cfe:	2101      	movs	r1, #1
1a001d00:	202c      	movs	r0, #44	; 0x2c
1a001d02:	f7ff fb5b 	bl	1a0013bc <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001d06:	2101      	movs	r1, #1
1a001d08:	202d      	movs	r0, #45	; 0x2d
1a001d0a:	f7ff fb57 	bl	1a0013bc <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001d0e:	bd08      	pop	{r3, pc}
1a001d10:	10000218 	.word	0x10000218

1a001d14 <timer1CompareMatch1func>:
      }
   }
}

void timer1CompareMatch1func( void* ptr )
{
1a001d14:	b508      	push	{r3, lr}
   gpioWrite(servoMap[AttachedServoList[0].servo],FALSE);
1a001d16:	4b04      	ldr	r3, [pc, #16]	; (1a001d28 <timer1CompareMatch1func+0x14>)
1a001d18:	781b      	ldrb	r3, [r3, #0]
1a001d1a:	2100      	movs	r1, #0
1a001d1c:	4a03      	ldr	r2, [pc, #12]	; (1a001d2c <timer1CompareMatch1func+0x18>)
1a001d1e:	56d0      	ldrsb	r0, [r2, r3]
1a001d20:	f7ff fc22 	bl	1a001568 <gpioWrite>
}
1a001d24:	bd08      	pop	{r3, pc}
1a001d26:	bf00      	nop
1a001d28:	10000088 	.word	0x10000088
1a001d2c:	1a00337c 	.word	0x1a00337c

1a001d30 <timer1CompareMatch2func>:

void timer1CompareMatch2func( void* ptr )
{
1a001d30:	b508      	push	{r3, lr}
   gpioWrite(servoMap[AttachedServoList[1].servo],FALSE);
1a001d32:	4b04      	ldr	r3, [pc, #16]	; (1a001d44 <timer1CompareMatch2func+0x14>)
1a001d34:	7a1b      	ldrb	r3, [r3, #8]
1a001d36:	2100      	movs	r1, #0
1a001d38:	4a03      	ldr	r2, [pc, #12]	; (1a001d48 <timer1CompareMatch2func+0x18>)
1a001d3a:	56d0      	ldrsb	r0, [r2, r3]
1a001d3c:	f7ff fc14 	bl	1a001568 <gpioWrite>
}
1a001d40:	bd08      	pop	{r3, pc}
1a001d42:	bf00      	nop
1a001d44:	10000088 	.word	0x10000088
1a001d48:	1a00337c 	.word	0x1a00337c

1a001d4c <timer1CompareMatch3func>:

void timer1CompareMatch3func( void* ptr )
{
1a001d4c:	b508      	push	{r3, lr}
   gpioWrite(servoMap[AttachedServoList[2].servo],FALSE);
1a001d4e:	4b04      	ldr	r3, [pc, #16]	; (1a001d60 <timer1CompareMatch3func+0x14>)
1a001d50:	7c1b      	ldrb	r3, [r3, #16]
1a001d52:	2100      	movs	r1, #0
1a001d54:	4a03      	ldr	r2, [pc, #12]	; (1a001d64 <timer1CompareMatch3func+0x18>)
1a001d56:	56d0      	ldrsb	r0, [r2, r3]
1a001d58:	f7ff fc06 	bl	1a001568 <gpioWrite>
}
1a001d5c:	bd08      	pop	{r3, pc}
1a001d5e:	bf00      	nop
1a001d60:	10000088 	.word	0x10000088
1a001d64:	1a00337c 	.word	0x1a00337c

1a001d68 <timer2CompareMatch1func>:
      }
   }
}

void timer2CompareMatch1func( void* ptr )
{
1a001d68:	b508      	push	{r3, lr}
   gpioWrite(servoMap[AttachedServoList[3].servo],FALSE);
1a001d6a:	4b04      	ldr	r3, [pc, #16]	; (1a001d7c <timer2CompareMatch1func+0x14>)
1a001d6c:	7e1b      	ldrb	r3, [r3, #24]
1a001d6e:	2100      	movs	r1, #0
1a001d70:	4a03      	ldr	r2, [pc, #12]	; (1a001d80 <timer2CompareMatch1func+0x18>)
1a001d72:	56d0      	ldrsb	r0, [r2, r3]
1a001d74:	f7ff fbf8 	bl	1a001568 <gpioWrite>
}
1a001d78:	bd08      	pop	{r3, pc}
1a001d7a:	bf00      	nop
1a001d7c:	10000088 	.word	0x10000088
1a001d80:	1a00337c 	.word	0x1a00337c

1a001d84 <timer2CompareMatch2func>:

void timer2CompareMatch2func( void* ptr )
{
1a001d84:	b508      	push	{r3, lr}
   gpioWrite(servoMap[AttachedServoList[4].servo],FALSE);
1a001d86:	4b04      	ldr	r3, [pc, #16]	; (1a001d98 <timer2CompareMatch2func+0x14>)
1a001d88:	f893 3020 	ldrb.w	r3, [r3, #32]
1a001d8c:	2100      	movs	r1, #0
1a001d8e:	4a03      	ldr	r2, [pc, #12]	; (1a001d9c <timer2CompareMatch2func+0x18>)
1a001d90:	56d0      	ldrsb	r0, [r2, r3]
1a001d92:	f7ff fbe9 	bl	1a001568 <gpioWrite>
}
1a001d96:	bd08      	pop	{r3, pc}
1a001d98:	10000088 	.word	0x10000088
1a001d9c:	1a00337c 	.word	0x1a00337c

1a001da0 <timer2CompareMatch3func>:

void timer2CompareMatch3func( void* ptr )
{
1a001da0:	b508      	push	{r3, lr}
   gpioWrite(servoMap[AttachedServoList[5].servo],FALSE);
1a001da2:	4b04      	ldr	r3, [pc, #16]	; (1a001db4 <timer2CompareMatch3func+0x14>)
1a001da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
1a001da8:	2100      	movs	r1, #0
1a001daa:	4a03      	ldr	r2, [pc, #12]	; (1a001db8 <timer2CompareMatch3func+0x18>)
1a001dac:	56d0      	ldrsb	r0, [r2, r3]
1a001dae:	f7ff fbdb 	bl	1a001568 <gpioWrite>
}
1a001db2:	bd08      	pop	{r3, pc}
1a001db4:	10000088 	.word	0x10000088
1a001db8:	1a00337c 	.word	0x1a00337c

1a001dbc <timer3CompareMatch1func>:
      }
   }
}

void timer3CompareMatch1func( void* ptr )
{
1a001dbc:	b508      	push	{r3, lr}
   gpioWrite( servoMap[AttachedServoList[6].servo], FALSE );
1a001dbe:	4b04      	ldr	r3, [pc, #16]	; (1a001dd0 <timer3CompareMatch1func+0x14>)
1a001dc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
1a001dc4:	2100      	movs	r1, #0
1a001dc6:	4a03      	ldr	r2, [pc, #12]	; (1a001dd4 <timer3CompareMatch1func+0x18>)
1a001dc8:	56d0      	ldrsb	r0, [r2, r3]
1a001dca:	f7ff fbcd 	bl	1a001568 <gpioWrite>
}
1a001dce:	bd08      	pop	{r3, pc}
1a001dd0:	10000088 	.word	0x10000088
1a001dd4:	1a00337c 	.word	0x1a00337c

1a001dd8 <timer3CompareMatch2func>:

void timer3CompareMatch2func( void* ptr )
{
1a001dd8:	b508      	push	{r3, lr}
   gpioWrite( servoMap[AttachedServoList[7].servo], FALSE );
1a001dda:	4b04      	ldr	r3, [pc, #16]	; (1a001dec <timer3CompareMatch2func+0x14>)
1a001ddc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a001de0:	2100      	movs	r1, #0
1a001de2:	4a03      	ldr	r2, [pc, #12]	; (1a001df0 <timer3CompareMatch2func+0x18>)
1a001de4:	56d0      	ldrsb	r0, [r2, r3]
1a001de6:	f7ff fbbf 	bl	1a001568 <gpioWrite>
}
1a001dea:	bd08      	pop	{r3, pc}
1a001dec:	10000088 	.word	0x10000088
1a001df0:	1a00337c 	.word	0x1a00337c

1a001df4 <timer3CompareMatch3func>:

void timer3CompareMatch3func( void* ptr )
{
1a001df4:	b508      	push	{r3, lr}
   gpioWrite( servoMap[AttachedServoList[8].servo], FALSE );
1a001df6:	4b04      	ldr	r3, [pc, #16]	; (1a001e08 <timer3CompareMatch3func+0x14>)
1a001df8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
1a001dfc:	2100      	movs	r1, #0
1a001dfe:	4a03      	ldr	r2, [pc, #12]	; (1a001e0c <timer3CompareMatch3func+0x18>)
1a001e00:	56d0      	ldrsb	r0, [r2, r3]
1a001e02:	f7ff fbb1 	bl	1a001568 <gpioWrite>
}
1a001e06:	bd08      	pop	{r3, pc}
1a001e08:	10000088 	.word	0x10000088
1a001e0c:	1a00337c 	.word	0x1a00337c

1a001e10 <valueToMicroseconds>:
   return (SERVO_MINUPTIME_PERIOD+(value*SERVO_MAXUPTIME_PERIOD)/180);
1a001e10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
1a001e14:	fb03 f000 	mul.w	r0, r3, r0
1a001e18:	4b03      	ldr	r3, [pc, #12]	; (1a001e28 <valueToMicroseconds+0x18>)
1a001e1a:	fb83 2300 	smull	r2, r3, r3, r0
1a001e1e:	4418      	add	r0, r3
1a001e20:	11c0      	asrs	r0, r0, #7
}
1a001e22:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
1a001e26:	4770      	bx	lr
1a001e28:	b60b60b7 	.word	0xb60b60b7

1a001e2c <timer1CompareMatch0func>:
{
1a001e2c:	b570      	push	{r4, r5, r6, lr}
   for(servoListPosition=0; servoListPosition<3; servoListPosition++) {
1a001e2e:	2400      	movs	r4, #0
1a001e30:	e015      	b.n	1a001e5e <timer1CompareMatch0func+0x32>
         gpioWrite(servoMap[AttachedServoList[servoListPosition].servo],TRUE);
1a001e32:	2101      	movs	r1, #1
1a001e34:	4a0e      	ldr	r2, [pc, #56]	; (1a001e70 <timer1CompareMatch0func+0x44>)
1a001e36:	56d0      	ldrsb	r0, [r2, r3]
1a001e38:	f7ff fb96 	bl	1a001568 <gpioWrite>
         Timer_SetCompareMatch( 	AttachedServoList[servoListPosition].associatedTimer,
1a001e3c:	4b0d      	ldr	r3, [pc, #52]	; (1a001e74 <timer1CompareMatch0func+0x48>)
1a001e3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
1a001e42:	789d      	ldrb	r5, [r3, #2]
1a001e44:	78de      	ldrb	r6, [r3, #3]
1a001e46:	7858      	ldrb	r0, [r3, #1]
1a001e48:	f7ff ffe2 	bl	1a001e10 <valueToMicroseconds>
1a001e4c:	f7ff fc92 	bl	1a001774 <Timer_microsecondsToTicks>
1a001e50:	4602      	mov	r2, r0
1a001e52:	4631      	mov	r1, r6
1a001e54:	4628      	mov	r0, r5
1a001e56:	f7ff fccf 	bl	1a0017f8 <Timer_SetCompareMatch>
   for(servoListPosition=0; servoListPosition<3; servoListPosition++) {
1a001e5a:	3401      	adds	r4, #1
1a001e5c:	b2e4      	uxtb	r4, r4
1a001e5e:	2c02      	cmp	r4, #2
1a001e60:	d805      	bhi.n	1a001e6e <timer1CompareMatch0func+0x42>
      if(AttachedServoList[servoListPosition].servo != EMPTY_POSITION) {
1a001e62:	4b04      	ldr	r3, [pc, #16]	; (1a001e74 <timer1CompareMatch0func+0x48>)
1a001e64:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
1a001e68:	2bff      	cmp	r3, #255	; 0xff
1a001e6a:	d0f6      	beq.n	1a001e5a <timer1CompareMatch0func+0x2e>
1a001e6c:	e7e1      	b.n	1a001e32 <timer1CompareMatch0func+0x6>
}
1a001e6e:	bd70      	pop	{r4, r5, r6, pc}
1a001e70:	1a00337c 	.word	0x1a00337c
1a001e74:	10000088 	.word	0x10000088

1a001e78 <timer2CompareMatch0func>:
{
1a001e78:	b570      	push	{r4, r5, r6, lr}
   for(servoListPosition=3; servoListPosition<6; servoListPosition++) {
1a001e7a:	2403      	movs	r4, #3
1a001e7c:	e015      	b.n	1a001eaa <timer2CompareMatch0func+0x32>
         gpioWrite(servoMap[AttachedServoList[servoListPosition].servo],TRUE);
1a001e7e:	2101      	movs	r1, #1
1a001e80:	4a0e      	ldr	r2, [pc, #56]	; (1a001ebc <timer2CompareMatch0func+0x44>)
1a001e82:	56d0      	ldrsb	r0, [r2, r3]
1a001e84:	f7ff fb70 	bl	1a001568 <gpioWrite>
         Timer_SetCompareMatch( AttachedServoList[servoListPosition].associatedTimer,
1a001e88:	4b0d      	ldr	r3, [pc, #52]	; (1a001ec0 <timer2CompareMatch0func+0x48>)
1a001e8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
1a001e8e:	789d      	ldrb	r5, [r3, #2]
1a001e90:	78de      	ldrb	r6, [r3, #3]
1a001e92:	7858      	ldrb	r0, [r3, #1]
1a001e94:	f7ff ffbc 	bl	1a001e10 <valueToMicroseconds>
1a001e98:	f7ff fc6c 	bl	1a001774 <Timer_microsecondsToTicks>
1a001e9c:	4602      	mov	r2, r0
1a001e9e:	4631      	mov	r1, r6
1a001ea0:	4628      	mov	r0, r5
1a001ea2:	f7ff fca9 	bl	1a0017f8 <Timer_SetCompareMatch>
   for(servoListPosition=3; servoListPosition<6; servoListPosition++) {
1a001ea6:	3401      	adds	r4, #1
1a001ea8:	b2e4      	uxtb	r4, r4
1a001eaa:	2c05      	cmp	r4, #5
1a001eac:	d805      	bhi.n	1a001eba <timer2CompareMatch0func+0x42>
      if(AttachedServoList[servoListPosition].servo != EMPTY_POSITION) {
1a001eae:	4b04      	ldr	r3, [pc, #16]	; (1a001ec0 <timer2CompareMatch0func+0x48>)
1a001eb0:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
1a001eb4:	2bff      	cmp	r3, #255	; 0xff
1a001eb6:	d0f6      	beq.n	1a001ea6 <timer2CompareMatch0func+0x2e>
1a001eb8:	e7e1      	b.n	1a001e7e <timer2CompareMatch0func+0x6>
}
1a001eba:	bd70      	pop	{r4, r5, r6, pc}
1a001ebc:	1a00337c 	.word	0x1a00337c
1a001ec0:	10000088 	.word	0x10000088

1a001ec4 <timer3CompareMatch0func>:
{
1a001ec4:	b570      	push	{r4, r5, r6, lr}
   for(servoListPosition=6; servoListPosition<9; servoListPosition++) {
1a001ec6:	2406      	movs	r4, #6
1a001ec8:	e015      	b.n	1a001ef6 <timer3CompareMatch0func+0x32>
         gpioWrite(servoMap[AttachedServoList[servoListPosition].servo],TRUE);
1a001eca:	2101      	movs	r1, #1
1a001ecc:	4a0e      	ldr	r2, [pc, #56]	; (1a001f08 <timer3CompareMatch0func+0x44>)
1a001ece:	56d0      	ldrsb	r0, [r2, r3]
1a001ed0:	f7ff fb4a 	bl	1a001568 <gpioWrite>
         Timer_SetCompareMatch( AttachedServoList[servoListPosition].associatedTimer,
1a001ed4:	4b0d      	ldr	r3, [pc, #52]	; (1a001f0c <timer3CompareMatch0func+0x48>)
1a001ed6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
1a001eda:	789d      	ldrb	r5, [r3, #2]
1a001edc:	78de      	ldrb	r6, [r3, #3]
1a001ede:	7858      	ldrb	r0, [r3, #1]
1a001ee0:	f7ff ff96 	bl	1a001e10 <valueToMicroseconds>
1a001ee4:	f7ff fc46 	bl	1a001774 <Timer_microsecondsToTicks>
1a001ee8:	4602      	mov	r2, r0
1a001eea:	4631      	mov	r1, r6
1a001eec:	4628      	mov	r0, r5
1a001eee:	f7ff fc83 	bl	1a0017f8 <Timer_SetCompareMatch>
   for(servoListPosition=6; servoListPosition<9; servoListPosition++) {
1a001ef2:	3401      	adds	r4, #1
1a001ef4:	b2e4      	uxtb	r4, r4
1a001ef6:	2c08      	cmp	r4, #8
1a001ef8:	d805      	bhi.n	1a001f06 <timer3CompareMatch0func+0x42>
      if(AttachedServoList[servoListPosition].servo != EMPTY_POSITION) {
1a001efa:	4b04      	ldr	r3, [pc, #16]	; (1a001f0c <timer3CompareMatch0func+0x48>)
1a001efc:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
1a001f00:	2bff      	cmp	r3, #255	; 0xff
1a001f02:	d0f6      	beq.n	1a001ef2 <timer3CompareMatch0func+0x2e>
1a001f04:	e7e1      	b.n	1a001eca <timer3CompareMatch0func+0x6>
}
1a001f06:	bd70      	pop	{r4, r5, r6, pc}
1a001f08:	1a00337c 	.word	0x1a00337c
1a001f0c:	10000088 	.word	0x10000088

1a001f10 <servoInitTimers>:
 * @return   nothing
 * @IMPORTANT:   this function uses Timer 1, 2 and 3 to generate the servo signals, so
 *   they won't be available to use.
 */
void servoInitTimers(void)
{
1a001f10:	b508      	push	{r3, lr}
   Timer_Init( TIMER1,
1a001f12:	f644 6020 	movw	r0, #20000	; 0x4e20
1a001f16:	f7ff fc2d 	bl	1a001774 <Timer_microsecondsToTicks>
1a001f1a:	4a0c      	ldr	r2, [pc, #48]	; (1a001f4c <servoInitTimers+0x3c>)
1a001f1c:	4601      	mov	r1, r0
1a001f1e:	2001      	movs	r0, #1
1a001f20:	f7ff fb98 	bl	1a001654 <Timer_Init>
               Timer_microsecondsToTicks(SERVO_COMPLETECYCLE_PERIOD),
               timer1CompareMatch0func
             );
   Timer_Init( TIMER2,
1a001f24:	f644 6020 	movw	r0, #20000	; 0x4e20
1a001f28:	f7ff fc24 	bl	1a001774 <Timer_microsecondsToTicks>
1a001f2c:	4a08      	ldr	r2, [pc, #32]	; (1a001f50 <servoInitTimers+0x40>)
1a001f2e:	4601      	mov	r1, r0
1a001f30:	2002      	movs	r0, #2
1a001f32:	f7ff fb8f 	bl	1a001654 <Timer_Init>
               Timer_microsecondsToTicks(SERVO_COMPLETECYCLE_PERIOD),
               timer2CompareMatch0func
             );
   Timer_Init( TIMER3,
1a001f36:	f644 6020 	movw	r0, #20000	; 0x4e20
1a001f3a:	f7ff fc1b 	bl	1a001774 <Timer_microsecondsToTicks>
1a001f3e:	4a05      	ldr	r2, [pc, #20]	; (1a001f54 <servoInitTimers+0x44>)
1a001f40:	4601      	mov	r1, r0
1a001f42:	2003      	movs	r0, #3
1a001f44:	f7ff fb86 	bl	1a001654 <Timer_Init>
               Timer_microsecondsToTicks(SERVO_COMPLETECYCLE_PERIOD),
               timer3CompareMatch0func
             );
}
1a001f48:	bd08      	pop	{r3, pc}
1a001f4a:	bf00      	nop
1a001f4c:	1a001e2d 	.word	0x1a001e2d
1a001f50:	1a001e79 	.word	0x1a001e79
1a001f54:	1a001ec5 	.word	0x1a001ec5

1a001f58 <servoIsAttached>:
 * @param:   value:   value of the servo, from 0 to 180
 * @return:   position (1 ~ SERVO_TOTALNUMBER), 0 if the element was not found.
 */
uint8_t servoIsAttached( servoMap_t servoNumber )
{
   uint8_t position = 0, positionInList = 0;
1a001f58:	2300      	movs	r3, #0
   while ( (position < SERVO_TOTALNUMBER) &&
1a001f5a:	2b08      	cmp	r3, #8
1a001f5c:	d807      	bhi.n	1a001f6e <servoIsAttached+0x16>
           (servoNumber != AttachedServoList[position].servo) ) {
1a001f5e:	4a07      	ldr	r2, [pc, #28]	; (1a001f7c <servoIsAttached+0x24>)
1a001f60:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   while ( (position < SERVO_TOTALNUMBER) &&
1a001f64:	4282      	cmp	r2, r0
1a001f66:	d002      	beq.n	1a001f6e <servoIsAttached+0x16>
      position++;
1a001f68:	3301      	adds	r3, #1
1a001f6a:	b2db      	uxtb	r3, r3
1a001f6c:	e7f5      	b.n	1a001f5a <servoIsAttached+0x2>
   }

   if (position < SERVO_TOTALNUMBER) {
1a001f6e:	2b08      	cmp	r3, #8
1a001f70:	d802      	bhi.n	1a001f78 <servoIsAttached+0x20>
      positionInList = position + 1;
1a001f72:	1c58      	adds	r0, r3, #1
1a001f74:	b2c0      	uxtb	r0, r0
1a001f76:	4770      	bx	lr
   } else {
      positionInList = 0;
1a001f78:	2000      	movs	r0, #0
   }

   return positionInList;
}
1a001f7a:	4770      	bx	lr
1a001f7c:	10000088 	.word	0x10000088

1a001f80 <servoAttach>:
{
1a001f80:	b570      	push	{r4, r5, r6, lr}
1a001f82:	4604      	mov	r4, r0
   gpioConfig( (gpioMap_t)servoMap[servoNumber], GPIO_OUTPUT );
1a001f84:	2101      	movs	r1, #1
1a001f86:	4b12      	ldr	r3, [pc, #72]	; (1a001fd0 <servoAttach+0x50>)
1a001f88:	5618      	ldrsb	r0, [r3, r0]
1a001f8a:	f7ff fa17 	bl	1a0013bc <gpioInit>
   position = servoIsAttached(servoNumber);
1a001f8e:	4620      	mov	r0, r4
1a001f90:	f7ff ffe2 	bl	1a001f58 <servoIsAttached>
   if( position==0 ) {
1a001f94:	b9d0      	cbnz	r0, 1a001fcc <servoAttach+0x4c>
      position = servoIsAttached(EMPTY_POSITION); /* Searches for the first empty position */
1a001f96:	20ff      	movs	r0, #255	; 0xff
1a001f98:	f7ff ffde 	bl	1a001f58 <servoIsAttached>
      if(position) { /* if position==0 => there is no room in the list for another servo */
1a001f9c:	b908      	cbnz	r0, 1a001fa2 <servoAttach+0x22>
   bool_t success = FALSE;
1a001f9e:	2000      	movs	r0, #0
1a001fa0:	e015      	b.n	1a001fce <servoAttach+0x4e>
         AttachedServoList[position-1].servo = servoNumber;
1a001fa2:	1e42      	subs	r2, r0, #1
1a001fa4:	4b0b      	ldr	r3, [pc, #44]	; (1a001fd4 <servoAttach+0x54>)
1a001fa6:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
         Timer_EnableCompareMatch( AttachedServoList[position-1].associatedTimer,
1a001faa:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
1a001fae:	78a5      	ldrb	r5, [r4, #2]
1a001fb0:	78e6      	ldrb	r6, [r4, #3]
1a001fb2:	7860      	ldrb	r0, [r4, #1]
1a001fb4:	f7ff ff2c 	bl	1a001e10 <valueToMicroseconds>
1a001fb8:	f7ff fbdc 	bl	1a001774 <Timer_microsecondsToTicks>
1a001fbc:	6863      	ldr	r3, [r4, #4]
1a001fbe:	4602      	mov	r2, r0
1a001fc0:	4631      	mov	r1, r6
1a001fc2:	4628      	mov	r0, r5
1a001fc4:	f7ff fbda 	bl	1a00177c <Timer_EnableCompareMatch>
         success = TRUE;
1a001fc8:	2001      	movs	r0, #1
1a001fca:	e000      	b.n	1a001fce <servoAttach+0x4e>
   bool_t success = FALSE;
1a001fcc:	2000      	movs	r0, #0
}
1a001fce:	bd70      	pop	{r4, r5, r6, pc}
1a001fd0:	1a00337c 	.word	0x1a00337c
1a001fd4:	10000088 	.word	0x10000088

1a001fd8 <servoDetach>:
{
1a001fd8:	b508      	push	{r3, lr}
   position = servoIsAttached(servoNumber);
1a001fda:	f7ff ffbd 	bl	1a001f58 <servoIsAttached>
   if(position) {
1a001fde:	b908      	cbnz	r0, 1a001fe4 <servoDetach+0xc>
   bool_t success = FALSE;
1a001fe0:	2000      	movs	r0, #0
}
1a001fe2:	bd08      	pop	{r3, pc}
      AttachedServoList[position-1].servo = EMPTY_POSITION;
1a001fe4:	1e43      	subs	r3, r0, #1
1a001fe6:	4a07      	ldr	r2, [pc, #28]	; (1a002004 <servoDetach+0x2c>)
1a001fe8:	21ff      	movs	r1, #255	; 0xff
1a001fea:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      AttachedServoList[position-1].value = 0;
1a001fee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001ff2:	2200      	movs	r2, #0
1a001ff4:	705a      	strb	r2, [r3, #1]
      Timer_DisableCompareMatch( AttachedServoList[position-1].associatedTimer,
1a001ff6:	78d9      	ldrb	r1, [r3, #3]
1a001ff8:	7898      	ldrb	r0, [r3, #2]
1a001ffa:	f7ff fbdb 	bl	1a0017b4 <Timer_DisableCompareMatch>
      success = TRUE;
1a001ffe:	2001      	movs	r0, #1
1a002000:	e7ef      	b.n	1a001fe2 <servoDetach+0xa>
1a002002:	bf00      	nop
1a002004:	10000088 	.word	0x10000088

1a002008 <servoInit>:
{
1a002008:	b508      	push	{r3, lr}
   switch(config) {
1a00200a:	2902      	cmp	r1, #2
1a00200c:	d008      	beq.n	1a002020 <servoInit+0x18>
1a00200e:	2903      	cmp	r1, #3
1a002010:	d009      	beq.n	1a002026 <servoInit+0x1e>
1a002012:	b109      	cbz	r1, 1a002018 <servoInit+0x10>
      ret_val = 0;
1a002014:	2000      	movs	r0, #0
}
1a002016:	bd08      	pop	{r3, pc}
      servoInitTimers();
1a002018:	f7ff ff7a 	bl	1a001f10 <servoInitTimers>
   bool_t ret_val = 1;
1a00201c:	2001      	movs	r0, #1
      break;
1a00201e:	e7fa      	b.n	1a002016 <servoInit+0xe>
      ret_val = servoAttach( servoNumber );
1a002020:	f7ff ffae 	bl	1a001f80 <servoAttach>
      break;
1a002024:	e7f7      	b.n	1a002016 <servoInit+0xe>
      ret_val = servoDetach( servoNumber );
1a002026:	f7ff ffd7 	bl	1a001fd8 <servoDetach>
      break;
1a00202a:	e7f4      	b.n	1a002016 <servoInit+0xe>

1a00202c <servoWrite>:
 * @param:   servoNumber:   ID of the servo, from 0 to 8
 * @param:   value:   value of the servo, from 0 to 180
 * @return: True if the value was successfully changed, False if not.
 */
bool_t servoWrite( servoMap_t servoNumber, uint16_t angle )
{
1a00202c:	b510      	push	{r4, lr}
1a00202e:	460c      	mov	r4, r1
   bool_t success = FALSE;
   uint8_t position = 0;

   position = servoIsAttached(servoNumber);
1a002030:	f7ff ff92 	bl	1a001f58 <servoIsAttached>

   if(position && (angle>=0 && angle<=180)) {
1a002034:	b140      	cbz	r0, 1a002048 <servoWrite+0x1c>
1a002036:	2cb4      	cmp	r4, #180	; 0xb4
1a002038:	d808      	bhi.n	1a00204c <servoWrite+0x20>
      AttachedServoList[position-1].value = angle;
1a00203a:	1e43      	subs	r3, r0, #1
1a00203c:	4a04      	ldr	r2, [pc, #16]	; (1a002050 <servoWrite+0x24>)
1a00203e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a002042:	705c      	strb	r4, [r3, #1]
      success = TRUE;
1a002044:	2001      	movs	r0, #1
1a002046:	e000      	b.n	1a00204a <servoWrite+0x1e>
   bool_t success = FALSE;
1a002048:	2000      	movs	r0, #0
   }

   return success;
}
1a00204a:	bd10      	pop	{r4, pc}
   bool_t success = FALSE;
1a00204c:	2000      	movs	r0, #0
1a00204e:	e7fc      	b.n	1a00204a <servoWrite+0x1e>
1a002050:	10000088 	.word	0x10000088

1a002054 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002054:	2301      	movs	r3, #1
1a002056:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00205a:	4b01      	ldr	r3, [pc, #4]	; (1a002060 <clearInterrupt+0xc>)
1a00205c:	6258      	str	r0, [r3, #36]	; 0x24
}
1a00205e:	4770      	bx	lr
1a002060:	40087000 	.word	0x40087000

1a002064 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a002066:	4b12      	ldr	r3, [pc, #72]	; (1a0020b0 <serveInterrupt+0x4c>)
1a002068:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a00206a:	4b12      	ldr	r3, [pc, #72]	; (1a0020b4 <serveInterrupt+0x50>)
1a00206c:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00206e:	2301      	movs	r3, #1
1a002070:	4083      	lsls	r3, r0
1a002072:	420b      	tst	r3, r1
1a002074:	d00c      	beq.n	1a002090 <serveInterrupt+0x2c>
	return pTMR->TC;
1a002076:	4910      	ldr	r1, [pc, #64]	; (1a0020b8 <serveInterrupt+0x54>)
1a002078:	688c      	ldr	r4, [r1, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00207a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a00207e:	00d1      	lsls	r1, r2, #3
1a002080:	4a0e      	ldr	r2, [pc, #56]	; (1a0020bc <serveInterrupt+0x58>)
1a002082:	440a      	add	r2, r1
1a002084:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a002086:	4a0b      	ldr	r2, [pc, #44]	; (1a0020b4 <serveInterrupt+0x50>)
1a002088:	61d3      	str	r3, [r2, #28]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a00208a:	f7ff ffe3 	bl	1a002054 <clearInterrupt>
}
1a00208e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002090:	4909      	ldr	r1, [pc, #36]	; (1a0020b8 <serveInterrupt+0x54>)
1a002092:	688e      	ldr	r6, [r1, #8]
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002094:	4d09      	ldr	r5, [pc, #36]	; (1a0020bc <serveInterrupt+0x58>)
1a002096:	0051      	lsls	r1, r2, #1
1a002098:	188f      	adds	r7, r1, r2
1a00209a:	00fc      	lsls	r4, r7, #3
1a00209c:	4627      	mov	r7, r4
1a00209e:	442c      	add	r4, r5
1a0020a0:	60a6      	str	r6, [r4, #8]
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0020a2:	6864      	ldr	r4, [r4, #4]
1a0020a4:	1b36      	subs	r6, r6, r4
1a0020a6:	443d      	add	r5, r7
1a0020a8:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0020aa:	4a02      	ldr	r2, [pc, #8]	; (1a0020b4 <serveInterrupt+0x50>)
1a0020ac:	6213      	str	r3, [r2, #32]
1a0020ae:	e7ec      	b.n	1a00208a <serveInterrupt+0x26>
1a0020b0:	1a003388 	.word	0x1a003388
1a0020b4:	40087000 	.word	0x40087000
1a0020b8:	40084000 	.word	0x40084000
1a0020bc:	100000d0 	.word	0x100000d0

1a0020c0 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0020c0:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0020c2:	2000      	movs	r0, #0
1a0020c4:	f7ff ffce 	bl	1a002064 <serveInterrupt>
}
1a0020c8:	bd08      	pop	{r3, pc}

1a0020ca <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a0020ca:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0020cc:	2001      	movs	r0, #1
1a0020ce:	f7ff ffc9 	bl	1a002064 <serveInterrupt>
}
1a0020d2:	bd08      	pop	{r3, pc}

1a0020d4 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a0020d4:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0020d6:	2002      	movs	r0, #2
1a0020d8:	f7ff ffc4 	bl	1a002064 <serveInterrupt>
}
1a0020dc:	bd08      	pop	{r3, pc}
1a0020de:	Address 0x1a0020de is out of bounds.


1a0020e0 <atan>:
1a0020e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0020e4:	ec55 4b10 	vmov	r4, r5, d0
1a0020e8:	4bc9      	ldr	r3, [pc, #804]	; (1a002410 <atan+0x330>)
1a0020ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
1a0020ee:	429e      	cmp	r6, r3
1a0020f0:	46aa      	mov	sl, r5
1a0020f2:	dd1a      	ble.n	1a00212a <atan+0x4a>
1a0020f4:	4bc7      	ldr	r3, [pc, #796]	; (1a002414 <atan+0x334>)
1a0020f6:	429e      	cmp	r6, r3
1a0020f8:	dc0d      	bgt.n	1a002116 <atan+0x36>
1a0020fa:	d00a      	beq.n	1a002112 <atan+0x32>
1a0020fc:	f1ba 0f00 	cmp.w	sl, #0
1a002100:	f340 80cb 	ble.w	1a00229a <atan+0x1ba>
1a002104:	a1a6      	add	r1, pc, #664	; (adr r1, 1a0023a0 <atan+0x2c0>)
1a002106:	e9d1 0100 	ldrd	r0, r1, [r1]
1a00210a:	ec41 0b10 	vmov	d0, r0, r1
1a00210e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002112:	2c00      	cmp	r4, #0
1a002114:	d0f2      	beq.n	1a0020fc <atan+0x1c>
1a002116:	4622      	mov	r2, r4
1a002118:	462b      	mov	r3, r5
1a00211a:	4620      	mov	r0, r4
1a00211c:	4629      	mov	r1, r5
1a00211e:	f000 f99b 	bl	1a002458 <__adddf3>
1a002122:	ec41 0b10 	vmov	d0, r0, r1
1a002126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00212a:	4bbb      	ldr	r3, [pc, #748]	; (1a002418 <atan+0x338>)
1a00212c:	429e      	cmp	r6, r3
1a00212e:	f300 80c3 	bgt.w	1a0022b8 <atan+0x1d8>
1a002132:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
1a002136:	429e      	cmp	r6, r3
1a002138:	f340 809d 	ble.w	1a002276 <atan+0x196>
1a00213c:	f04f 3bff 	mov.w	fp, #4294967295
1a002140:	4622      	mov	r2, r4
1a002142:	462b      	mov	r3, r5
1a002144:	4620      	mov	r0, r4
1a002146:	4629      	mov	r1, r5
1a002148:	f000 fb3c 	bl	1a0027c4 <__aeabi_dmul>
1a00214c:	4602      	mov	r2, r0
1a00214e:	460b      	mov	r3, r1
1a002150:	4680      	mov	r8, r0
1a002152:	4689      	mov	r9, r1
1a002154:	f000 fb36 	bl	1a0027c4 <__aeabi_dmul>
1a002158:	a393      	add	r3, pc, #588	; (adr r3, 1a0023a8 <atan+0x2c8>)
1a00215a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00215e:	4606      	mov	r6, r0
1a002160:	460f      	mov	r7, r1
1a002162:	f000 fb2f 	bl	1a0027c4 <__aeabi_dmul>
1a002166:	a392      	add	r3, pc, #584	; (adr r3, 1a0023b0 <atan+0x2d0>)
1a002168:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00216c:	f000 f974 	bl	1a002458 <__adddf3>
1a002170:	4632      	mov	r2, r6
1a002172:	463b      	mov	r3, r7
1a002174:	f000 fb26 	bl	1a0027c4 <__aeabi_dmul>
1a002178:	a38f      	add	r3, pc, #572	; (adr r3, 1a0023b8 <atan+0x2d8>)
1a00217a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00217e:	f000 f96b 	bl	1a002458 <__adddf3>
1a002182:	4632      	mov	r2, r6
1a002184:	463b      	mov	r3, r7
1a002186:	f000 fb1d 	bl	1a0027c4 <__aeabi_dmul>
1a00218a:	a38d      	add	r3, pc, #564	; (adr r3, 1a0023c0 <atan+0x2e0>)
1a00218c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002190:	f000 f962 	bl	1a002458 <__adddf3>
1a002194:	4632      	mov	r2, r6
1a002196:	463b      	mov	r3, r7
1a002198:	f000 fb14 	bl	1a0027c4 <__aeabi_dmul>
1a00219c:	a38a      	add	r3, pc, #552	; (adr r3, 1a0023c8 <atan+0x2e8>)
1a00219e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0021a2:	f000 f959 	bl	1a002458 <__adddf3>
1a0021a6:	4632      	mov	r2, r6
1a0021a8:	463b      	mov	r3, r7
1a0021aa:	f000 fb0b 	bl	1a0027c4 <__aeabi_dmul>
1a0021ae:	a388      	add	r3, pc, #544	; (adr r3, 1a0023d0 <atan+0x2f0>)
1a0021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0021b4:	f000 f950 	bl	1a002458 <__adddf3>
1a0021b8:	4642      	mov	r2, r8
1a0021ba:	464b      	mov	r3, r9
1a0021bc:	f000 fb02 	bl	1a0027c4 <__aeabi_dmul>
1a0021c0:	a385      	add	r3, pc, #532	; (adr r3, 1a0023d8 <atan+0x2f8>)
1a0021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0021c6:	4680      	mov	r8, r0
1a0021c8:	4689      	mov	r9, r1
1a0021ca:	4630      	mov	r0, r6
1a0021cc:	4639      	mov	r1, r7
1a0021ce:	f000 faf9 	bl	1a0027c4 <__aeabi_dmul>
1a0021d2:	a383      	add	r3, pc, #524	; (adr r3, 1a0023e0 <atan+0x300>)
1a0021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0021d8:	f000 f93c 	bl	1a002454 <__aeabi_dsub>
1a0021dc:	4632      	mov	r2, r6
1a0021de:	463b      	mov	r3, r7
1a0021e0:	f000 faf0 	bl	1a0027c4 <__aeabi_dmul>
1a0021e4:	a380      	add	r3, pc, #512	; (adr r3, 1a0023e8 <atan+0x308>)
1a0021e6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0021ea:	f000 f933 	bl	1a002454 <__aeabi_dsub>
1a0021ee:	4632      	mov	r2, r6
1a0021f0:	463b      	mov	r3, r7
1a0021f2:	f000 fae7 	bl	1a0027c4 <__aeabi_dmul>
1a0021f6:	a37e      	add	r3, pc, #504	; (adr r3, 1a0023f0 <atan+0x310>)
1a0021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0021fc:	f000 f92a 	bl	1a002454 <__aeabi_dsub>
1a002200:	4632      	mov	r2, r6
1a002202:	463b      	mov	r3, r7
1a002204:	f000 fade 	bl	1a0027c4 <__aeabi_dmul>
1a002208:	a37b      	add	r3, pc, #492	; (adr r3, 1a0023f8 <atan+0x318>)
1a00220a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00220e:	f000 f921 	bl	1a002454 <__aeabi_dsub>
1a002212:	4632      	mov	r2, r6
1a002214:	463b      	mov	r3, r7
1a002216:	f000 fad5 	bl	1a0027c4 <__aeabi_dmul>
1a00221a:	4602      	mov	r2, r0
1a00221c:	460b      	mov	r3, r1
1a00221e:	4640      	mov	r0, r8
1a002220:	4649      	mov	r1, r9
1a002222:	f000 f919 	bl	1a002458 <__adddf3>
1a002226:	4622      	mov	r2, r4
1a002228:	462b      	mov	r3, r5
1a00222a:	f000 facb 	bl	1a0027c4 <__aeabi_dmul>
1a00222e:	f1bb 3fff 	cmp.w	fp, #4294967295
1a002232:	4602      	mov	r2, r0
1a002234:	460b      	mov	r3, r1
1a002236:	d037      	beq.n	1a0022a8 <atan+0x1c8>
1a002238:	4b78      	ldr	r3, [pc, #480]	; (1a00241c <atan+0x33c>)
1a00223a:	4e79      	ldr	r6, [pc, #484]	; (1a002420 <atan+0x340>)
1a00223c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
1a002240:	445b      	add	r3, fp
1a002242:	e9d3 2300 	ldrd	r2, r3, [r3]
1a002246:	f000 f905 	bl	1a002454 <__aeabi_dsub>
1a00224a:	4622      	mov	r2, r4
1a00224c:	462b      	mov	r3, r5
1a00224e:	f000 f901 	bl	1a002454 <__aeabi_dsub>
1a002252:	44b3      	add	fp, r6
1a002254:	4602      	mov	r2, r0
1a002256:	460b      	mov	r3, r1
1a002258:	e9db 0100 	ldrd	r0, r1, [fp]
1a00225c:	f000 f8fa 	bl	1a002454 <__aeabi_dsub>
1a002260:	f1ba 0f00 	cmp.w	sl, #0
1a002264:	f6bf af5d 	bge.w	1a002122 <atan+0x42>
1a002268:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a00226c:	4619      	mov	r1, r3
1a00226e:	ec41 0b10 	vmov	d0, r0, r1
1a002272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002276:	a362      	add	r3, pc, #392	; (adr r3, 1a002400 <atan+0x320>)
1a002278:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00227c:	ee10 0a10 	vmov	r0, s0
1a002280:	4629      	mov	r1, r5
1a002282:	f000 f8e9 	bl	1a002458 <__adddf3>
1a002286:	2200      	movs	r2, #0
1a002288:	4b66      	ldr	r3, [pc, #408]	; (1a002424 <atan+0x344>)
1a00228a:	f000 fd2b 	bl	1a002ce4 <__aeabi_dcmpgt>
1a00228e:	2800      	cmp	r0, #0
1a002290:	f43f af54 	beq.w	1a00213c <atan+0x5c>
1a002294:	4620      	mov	r0, r4
1a002296:	4629      	mov	r1, r5
1a002298:	e743      	b.n	1a002122 <atan+0x42>
1a00229a:	a15b      	add	r1, pc, #364	; (adr r1, 1a002408 <atan+0x328>)
1a00229c:	e9d1 0100 	ldrd	r0, r1, [r1]
1a0022a0:	ec41 0b10 	vmov	d0, r0, r1
1a0022a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0022a8:	4620      	mov	r0, r4
1a0022aa:	4629      	mov	r1, r5
1a0022ac:	f000 f8d2 	bl	1a002454 <__aeabi_dsub>
1a0022b0:	ec41 0b10 	vmov	d0, r0, r1
1a0022b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0022b8:	f000 f8be 	bl	1a002438 <fabs>
1a0022bc:	4b5a      	ldr	r3, [pc, #360]	; (1a002428 <atan+0x348>)
1a0022be:	429e      	cmp	r6, r3
1a0022c0:	ec55 4b10 	vmov	r4, r5, d0
1a0022c4:	dc23      	bgt.n	1a00230e <atan+0x22e>
1a0022c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
1a0022ca:	429e      	cmp	r6, r3
1a0022cc:	dc4c      	bgt.n	1a002368 <atan+0x288>
1a0022ce:	ee10 2a10 	vmov	r2, s0
1a0022d2:	ee10 0a10 	vmov	r0, s0
1a0022d6:	462b      	mov	r3, r5
1a0022d8:	4629      	mov	r1, r5
1a0022da:	f000 f8bd 	bl	1a002458 <__adddf3>
1a0022de:	2200      	movs	r2, #0
1a0022e0:	4b50      	ldr	r3, [pc, #320]	; (1a002424 <atan+0x344>)
1a0022e2:	f000 f8b7 	bl	1a002454 <__aeabi_dsub>
1a0022e6:	2200      	movs	r2, #0
1a0022e8:	4606      	mov	r6, r0
1a0022ea:	460f      	mov	r7, r1
1a0022ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a0022f0:	4620      	mov	r0, r4
1a0022f2:	4629      	mov	r1, r5
1a0022f4:	f000 f8b0 	bl	1a002458 <__adddf3>
1a0022f8:	4602      	mov	r2, r0
1a0022fa:	460b      	mov	r3, r1
1a0022fc:	4630      	mov	r0, r6
1a0022fe:	4639      	mov	r1, r7
1a002300:	f000 fb8a 	bl	1a002a18 <__aeabi_ddiv>
1a002304:	f04f 0b00 	mov.w	fp, #0
1a002308:	4604      	mov	r4, r0
1a00230a:	460d      	mov	r5, r1
1a00230c:	e718      	b.n	1a002140 <atan+0x60>
1a00230e:	4b47      	ldr	r3, [pc, #284]	; (1a00242c <atan+0x34c>)
1a002310:	429e      	cmp	r6, r3
1a002312:	dc1d      	bgt.n	1a002350 <atan+0x270>
1a002314:	ee10 0a10 	vmov	r0, s0
1a002318:	2200      	movs	r2, #0
1a00231a:	4b45      	ldr	r3, [pc, #276]	; (1a002430 <atan+0x350>)
1a00231c:	4629      	mov	r1, r5
1a00231e:	f000 f899 	bl	1a002454 <__aeabi_dsub>
1a002322:	2200      	movs	r2, #0
1a002324:	4606      	mov	r6, r0
1a002326:	460f      	mov	r7, r1
1a002328:	4b41      	ldr	r3, [pc, #260]	; (1a002430 <atan+0x350>)
1a00232a:	4620      	mov	r0, r4
1a00232c:	4629      	mov	r1, r5
1a00232e:	f000 fa49 	bl	1a0027c4 <__aeabi_dmul>
1a002332:	2200      	movs	r2, #0
1a002334:	4b3b      	ldr	r3, [pc, #236]	; (1a002424 <atan+0x344>)
1a002336:	f000 f88f 	bl	1a002458 <__adddf3>
1a00233a:	4602      	mov	r2, r0
1a00233c:	460b      	mov	r3, r1
1a00233e:	4630      	mov	r0, r6
1a002340:	4639      	mov	r1, r7
1a002342:	f000 fb69 	bl	1a002a18 <__aeabi_ddiv>
1a002346:	f04f 0b02 	mov.w	fp, #2
1a00234a:	4604      	mov	r4, r0
1a00234c:	460d      	mov	r5, r1
1a00234e:	e6f7      	b.n	1a002140 <atan+0x60>
1a002350:	462b      	mov	r3, r5
1a002352:	ee10 2a10 	vmov	r2, s0
1a002356:	2000      	movs	r0, #0
1a002358:	4936      	ldr	r1, [pc, #216]	; (1a002434 <atan+0x354>)
1a00235a:	f000 fb5d 	bl	1a002a18 <__aeabi_ddiv>
1a00235e:	f04f 0b03 	mov.w	fp, #3
1a002362:	4604      	mov	r4, r0
1a002364:	460d      	mov	r5, r1
1a002366:	e6eb      	b.n	1a002140 <atan+0x60>
1a002368:	ee10 0a10 	vmov	r0, s0
1a00236c:	2200      	movs	r2, #0
1a00236e:	4b2d      	ldr	r3, [pc, #180]	; (1a002424 <atan+0x344>)
1a002370:	4629      	mov	r1, r5
1a002372:	f000 f86f 	bl	1a002454 <__aeabi_dsub>
1a002376:	2200      	movs	r2, #0
1a002378:	4606      	mov	r6, r0
1a00237a:	460f      	mov	r7, r1
1a00237c:	4b29      	ldr	r3, [pc, #164]	; (1a002424 <atan+0x344>)
1a00237e:	4620      	mov	r0, r4
1a002380:	4629      	mov	r1, r5
1a002382:	f000 f869 	bl	1a002458 <__adddf3>
1a002386:	4602      	mov	r2, r0
1a002388:	460b      	mov	r3, r1
1a00238a:	4630      	mov	r0, r6
1a00238c:	4639      	mov	r1, r7
1a00238e:	f000 fb43 	bl	1a002a18 <__aeabi_ddiv>
1a002392:	f04f 0b01 	mov.w	fp, #1
1a002396:	4604      	mov	r4, r0
1a002398:	460d      	mov	r5, r1
1a00239a:	e6d1      	b.n	1a002140 <atan+0x60>
1a00239c:	f3af 8000 	nop.w
1a0023a0:	54442d18 	.word	0x54442d18
1a0023a4:	3ff921fb 	.word	0x3ff921fb
1a0023a8:	e322da11 	.word	0xe322da11
1a0023ac:	3f90ad3a 	.word	0x3f90ad3a
1a0023b0:	24760deb 	.word	0x24760deb
1a0023b4:	3fa97b4b 	.word	0x3fa97b4b
1a0023b8:	a0d03d51 	.word	0xa0d03d51
1a0023bc:	3fb10d66 	.word	0x3fb10d66
1a0023c0:	c54c206e 	.word	0xc54c206e
1a0023c4:	3fb745cd 	.word	0x3fb745cd
1a0023c8:	920083ff 	.word	0x920083ff
1a0023cc:	3fc24924 	.word	0x3fc24924
1a0023d0:	5555550d 	.word	0x5555550d
1a0023d4:	3fd55555 	.word	0x3fd55555
1a0023d8:	2c6a6c2f 	.word	0x2c6a6c2f
1a0023dc:	bfa2b444 	.word	0xbfa2b444
1a0023e0:	52defd9a 	.word	0x52defd9a
1a0023e4:	3fadde2d 	.word	0x3fadde2d
1a0023e8:	af749a6d 	.word	0xaf749a6d
1a0023ec:	3fb3b0f2 	.word	0x3fb3b0f2
1a0023f0:	fe231671 	.word	0xfe231671
1a0023f4:	3fbc71c6 	.word	0x3fbc71c6
1a0023f8:	9998ebc4 	.word	0x9998ebc4
1a0023fc:	3fc99999 	.word	0x3fc99999
1a002400:	8800759c 	.word	0x8800759c
1a002404:	7e37e43c 	.word	0x7e37e43c
1a002408:	54442d18 	.word	0x54442d18
1a00240c:	bff921fb 	.word	0xbff921fb
1a002410:	440fffff 	.word	0x440fffff
1a002414:	7ff00000 	.word	0x7ff00000
1a002418:	3fdbffff 	.word	0x3fdbffff
1a00241c:	1a0033b0 	.word	0x1a0033b0
1a002420:	1a003390 	.word	0x1a003390
1a002424:	3ff00000 	.word	0x3ff00000
1a002428:	3ff2ffff 	.word	0x3ff2ffff
1a00242c:	40037fff 	.word	0x40037fff
1a002430:	3ff80000 	.word	0x3ff80000
1a002434:	bff00000 	.word	0xbff00000

1a002438 <fabs>:
1a002438:	ec51 0b10 	vmov	r0, r1, d0
1a00243c:	ee10 2a10 	vmov	r2, s0
1a002440:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a002444:	ec43 2b10 	vmov	d0, r2, r3
1a002448:	4770      	bx	lr
1a00244a:	bf00      	nop

1a00244c <__aeabi_drsub>:
1a00244c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a002450:	e002      	b.n	1a002458 <__adddf3>
1a002452:	bf00      	nop

1a002454 <__aeabi_dsub>:
1a002454:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a002458 <__adddf3>:
1a002458:	b530      	push	{r4, r5, lr}
1a00245a:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00245e:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a002462:	ea94 0f05 	teq	r4, r5
1a002466:	bf08      	it	eq
1a002468:	ea90 0f02 	teqeq	r0, r2
1a00246c:	bf1f      	itttt	ne
1a00246e:	ea54 0c00 	orrsne.w	ip, r4, r0
1a002472:	ea55 0c02 	orrsne.w	ip, r5, r2
1a002476:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a00247a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00247e:	f000 80e2 	beq.w	1a002646 <__adddf3+0x1ee>
1a002482:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a002486:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00248a:	bfb8      	it	lt
1a00248c:	426d      	neglt	r5, r5
1a00248e:	dd0c      	ble.n	1a0024aa <__adddf3+0x52>
1a002490:	442c      	add	r4, r5
1a002492:	ea80 0202 	eor.w	r2, r0, r2
1a002496:	ea81 0303 	eor.w	r3, r1, r3
1a00249a:	ea82 0000 	eor.w	r0, r2, r0
1a00249e:	ea83 0101 	eor.w	r1, r3, r1
1a0024a2:	ea80 0202 	eor.w	r2, r0, r2
1a0024a6:	ea81 0303 	eor.w	r3, r1, r3
1a0024aa:	2d36      	cmp	r5, #54	; 0x36
1a0024ac:	bf88      	it	hi
1a0024ae:	bd30      	pophi	{r4, r5, pc}
1a0024b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0024b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0024b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a0024bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a0024c0:	d002      	beq.n	1a0024c8 <__adddf3+0x70>
1a0024c2:	4240      	negs	r0, r0
1a0024c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0024c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a0024cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0024d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a0024d4:	d002      	beq.n	1a0024dc <__adddf3+0x84>
1a0024d6:	4252      	negs	r2, r2
1a0024d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0024dc:	ea94 0f05 	teq	r4, r5
1a0024e0:	f000 80a7 	beq.w	1a002632 <__adddf3+0x1da>
1a0024e4:	f1a4 0401 	sub.w	r4, r4, #1
1a0024e8:	f1d5 0e20 	rsbs	lr, r5, #32
1a0024ec:	db0d      	blt.n	1a00250a <__adddf3+0xb2>
1a0024ee:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0024f2:	fa22 f205 	lsr.w	r2, r2, r5
1a0024f6:	1880      	adds	r0, r0, r2
1a0024f8:	f141 0100 	adc.w	r1, r1, #0
1a0024fc:	fa03 f20e 	lsl.w	r2, r3, lr
1a002500:	1880      	adds	r0, r0, r2
1a002502:	fa43 f305 	asr.w	r3, r3, r5
1a002506:	4159      	adcs	r1, r3
1a002508:	e00e      	b.n	1a002528 <__adddf3+0xd0>
1a00250a:	f1a5 0520 	sub.w	r5, r5, #32
1a00250e:	f10e 0e20 	add.w	lr, lr, #32
1a002512:	2a01      	cmp	r2, #1
1a002514:	fa03 fc0e 	lsl.w	ip, r3, lr
1a002518:	bf28      	it	cs
1a00251a:	f04c 0c02 	orrcs.w	ip, ip, #2
1a00251e:	fa43 f305 	asr.w	r3, r3, r5
1a002522:	18c0      	adds	r0, r0, r3
1a002524:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a002528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00252c:	d507      	bpl.n	1a00253e <__adddf3+0xe6>
1a00252e:	f04f 0e00 	mov.w	lr, #0
1a002532:	f1dc 0c00 	rsbs	ip, ip, #0
1a002536:	eb7e 0000 	sbcs.w	r0, lr, r0
1a00253a:	eb6e 0101 	sbc.w	r1, lr, r1
1a00253e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a002542:	d31b      	bcc.n	1a00257c <__adddf3+0x124>
1a002544:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a002548:	d30c      	bcc.n	1a002564 <__adddf3+0x10c>
1a00254a:	0849      	lsrs	r1, r1, #1
1a00254c:	ea5f 0030 	movs.w	r0, r0, rrx
1a002550:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a002554:	f104 0401 	add.w	r4, r4, #1
1a002558:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a00255c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a002560:	f080 809a 	bcs.w	1a002698 <__adddf3+0x240>
1a002564:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002568:	bf08      	it	eq
1a00256a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00256e:	f150 0000 	adcs.w	r0, r0, #0
1a002572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002576:	ea41 0105 	orr.w	r1, r1, r5
1a00257a:	bd30      	pop	{r4, r5, pc}
1a00257c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a002580:	4140      	adcs	r0, r0
1a002582:	eb41 0101 	adc.w	r1, r1, r1
1a002586:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00258a:	f1a4 0401 	sub.w	r4, r4, #1
1a00258e:	d1e9      	bne.n	1a002564 <__adddf3+0x10c>
1a002590:	f091 0f00 	teq	r1, #0
1a002594:	bf04      	itt	eq
1a002596:	4601      	moveq	r1, r0
1a002598:	2000      	moveq	r0, #0
1a00259a:	fab1 f381 	clz	r3, r1
1a00259e:	bf08      	it	eq
1a0025a0:	3320      	addeq	r3, #32
1a0025a2:	f1a3 030b 	sub.w	r3, r3, #11
1a0025a6:	f1b3 0220 	subs.w	r2, r3, #32
1a0025aa:	da0c      	bge.n	1a0025c6 <__adddf3+0x16e>
1a0025ac:	320c      	adds	r2, #12
1a0025ae:	dd08      	ble.n	1a0025c2 <__adddf3+0x16a>
1a0025b0:	f102 0c14 	add.w	ip, r2, #20
1a0025b4:	f1c2 020c 	rsb	r2, r2, #12
1a0025b8:	fa01 f00c 	lsl.w	r0, r1, ip
1a0025bc:	fa21 f102 	lsr.w	r1, r1, r2
1a0025c0:	e00c      	b.n	1a0025dc <__adddf3+0x184>
1a0025c2:	f102 0214 	add.w	r2, r2, #20
1a0025c6:	bfd8      	it	le
1a0025c8:	f1c2 0c20 	rsble	ip, r2, #32
1a0025cc:	fa01 f102 	lsl.w	r1, r1, r2
1a0025d0:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0025d4:	bfdc      	itt	le
1a0025d6:	ea41 010c 	orrle.w	r1, r1, ip
1a0025da:	4090      	lslle	r0, r2
1a0025dc:	1ae4      	subs	r4, r4, r3
1a0025de:	bfa2      	ittt	ge
1a0025e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a0025e4:	4329      	orrge	r1, r5
1a0025e6:	bd30      	popge	{r4, r5, pc}
1a0025e8:	ea6f 0404 	mvn.w	r4, r4
1a0025ec:	3c1f      	subs	r4, #31
1a0025ee:	da1c      	bge.n	1a00262a <__adddf3+0x1d2>
1a0025f0:	340c      	adds	r4, #12
1a0025f2:	dc0e      	bgt.n	1a002612 <__adddf3+0x1ba>
1a0025f4:	f104 0414 	add.w	r4, r4, #20
1a0025f8:	f1c4 0220 	rsb	r2, r4, #32
1a0025fc:	fa20 f004 	lsr.w	r0, r0, r4
1a002600:	fa01 f302 	lsl.w	r3, r1, r2
1a002604:	ea40 0003 	orr.w	r0, r0, r3
1a002608:	fa21 f304 	lsr.w	r3, r1, r4
1a00260c:	ea45 0103 	orr.w	r1, r5, r3
1a002610:	bd30      	pop	{r4, r5, pc}
1a002612:	f1c4 040c 	rsb	r4, r4, #12
1a002616:	f1c4 0220 	rsb	r2, r4, #32
1a00261a:	fa20 f002 	lsr.w	r0, r0, r2
1a00261e:	fa01 f304 	lsl.w	r3, r1, r4
1a002622:	ea40 0003 	orr.w	r0, r0, r3
1a002626:	4629      	mov	r1, r5
1a002628:	bd30      	pop	{r4, r5, pc}
1a00262a:	fa21 f004 	lsr.w	r0, r1, r4
1a00262e:	4629      	mov	r1, r5
1a002630:	bd30      	pop	{r4, r5, pc}
1a002632:	f094 0f00 	teq	r4, #0
1a002636:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a00263a:	bf06      	itte	eq
1a00263c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a002640:	3401      	addeq	r4, #1
1a002642:	3d01      	subne	r5, #1
1a002644:	e74e      	b.n	1a0024e4 <__adddf3+0x8c>
1a002646:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00264a:	bf18      	it	ne
1a00264c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002650:	d029      	beq.n	1a0026a6 <__adddf3+0x24e>
1a002652:	ea94 0f05 	teq	r4, r5
1a002656:	bf08      	it	eq
1a002658:	ea90 0f02 	teqeq	r0, r2
1a00265c:	d005      	beq.n	1a00266a <__adddf3+0x212>
1a00265e:	ea54 0c00 	orrs.w	ip, r4, r0
1a002662:	bf04      	itt	eq
1a002664:	4619      	moveq	r1, r3
1a002666:	4610      	moveq	r0, r2
1a002668:	bd30      	pop	{r4, r5, pc}
1a00266a:	ea91 0f03 	teq	r1, r3
1a00266e:	bf1e      	ittt	ne
1a002670:	2100      	movne	r1, #0
1a002672:	2000      	movne	r0, #0
1a002674:	bd30      	popne	{r4, r5, pc}
1a002676:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a00267a:	d105      	bne.n	1a002688 <__adddf3+0x230>
1a00267c:	0040      	lsls	r0, r0, #1
1a00267e:	4149      	adcs	r1, r1
1a002680:	bf28      	it	cs
1a002682:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a002686:	bd30      	pop	{r4, r5, pc}
1a002688:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a00268c:	bf3c      	itt	cc
1a00268e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a002692:	bd30      	popcc	{r4, r5, pc}
1a002694:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002698:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a00269c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0026a0:	f04f 0000 	mov.w	r0, #0
1a0026a4:	bd30      	pop	{r4, r5, pc}
1a0026a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0026aa:	bf1a      	itte	ne
1a0026ac:	4619      	movne	r1, r3
1a0026ae:	4610      	movne	r0, r2
1a0026b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a0026b4:	bf1c      	itt	ne
1a0026b6:	460b      	movne	r3, r1
1a0026b8:	4602      	movne	r2, r0
1a0026ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0026be:	bf06      	itte	eq
1a0026c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a0026c4:	ea91 0f03 	teqeq	r1, r3
1a0026c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a0026cc:	bd30      	pop	{r4, r5, pc}
1a0026ce:	bf00      	nop

1a0026d0 <__aeabi_ui2d>:
1a0026d0:	f090 0f00 	teq	r0, #0
1a0026d4:	bf04      	itt	eq
1a0026d6:	2100      	moveq	r1, #0
1a0026d8:	4770      	bxeq	lr
1a0026da:	b530      	push	{r4, r5, lr}
1a0026dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0026e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0026e4:	f04f 0500 	mov.w	r5, #0
1a0026e8:	f04f 0100 	mov.w	r1, #0
1a0026ec:	e750      	b.n	1a002590 <__adddf3+0x138>
1a0026ee:	bf00      	nop

1a0026f0 <__aeabi_i2d>:
1a0026f0:	f090 0f00 	teq	r0, #0
1a0026f4:	bf04      	itt	eq
1a0026f6:	2100      	moveq	r1, #0
1a0026f8:	4770      	bxeq	lr
1a0026fa:	b530      	push	{r4, r5, lr}
1a0026fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002700:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002704:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002708:	bf48      	it	mi
1a00270a:	4240      	negmi	r0, r0
1a00270c:	f04f 0100 	mov.w	r1, #0
1a002710:	e73e      	b.n	1a002590 <__adddf3+0x138>
1a002712:	bf00      	nop

1a002714 <__aeabi_f2d>:
1a002714:	0042      	lsls	r2, r0, #1
1a002716:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a00271a:	ea4f 0131 	mov.w	r1, r1, rrx
1a00271e:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a002722:	bf1f      	itttt	ne
1a002724:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002728:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a00272c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a002730:	4770      	bxne	lr
1a002732:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a002736:	bf08      	it	eq
1a002738:	4770      	bxeq	lr
1a00273a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a00273e:	bf04      	itt	eq
1a002740:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a002744:	4770      	bxeq	lr
1a002746:	b530      	push	{r4, r5, lr}
1a002748:	f44f 7460 	mov.w	r4, #896	; 0x380
1a00274c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002754:	e71c      	b.n	1a002590 <__adddf3+0x138>
1a002756:	bf00      	nop

1a002758 <__aeabi_ul2d>:
1a002758:	ea50 0201 	orrs.w	r2, r0, r1
1a00275c:	bf08      	it	eq
1a00275e:	4770      	bxeq	lr
1a002760:	b530      	push	{r4, r5, lr}
1a002762:	f04f 0500 	mov.w	r5, #0
1a002766:	e00a      	b.n	1a00277e <__aeabi_l2d+0x16>

1a002768 <__aeabi_l2d>:
1a002768:	ea50 0201 	orrs.w	r2, r0, r1
1a00276c:	bf08      	it	eq
1a00276e:	4770      	bxeq	lr
1a002770:	b530      	push	{r4, r5, lr}
1a002772:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a002776:	d502      	bpl.n	1a00277e <__aeabi_l2d+0x16>
1a002778:	4240      	negs	r0, r0
1a00277a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00277e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002782:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002786:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a00278a:	f43f aed8 	beq.w	1a00253e <__adddf3+0xe6>
1a00278e:	f04f 0203 	mov.w	r2, #3
1a002792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002796:	bf18      	it	ne
1a002798:	3203      	addne	r2, #3
1a00279a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00279e:	bf18      	it	ne
1a0027a0:	3203      	addne	r2, #3
1a0027a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a0027a6:	f1c2 0320 	rsb	r3, r2, #32
1a0027aa:	fa00 fc03 	lsl.w	ip, r0, r3
1a0027ae:	fa20 f002 	lsr.w	r0, r0, r2
1a0027b2:	fa01 fe03 	lsl.w	lr, r1, r3
1a0027b6:	ea40 000e 	orr.w	r0, r0, lr
1a0027ba:	fa21 f102 	lsr.w	r1, r1, r2
1a0027be:	4414      	add	r4, r2
1a0027c0:	e6bd      	b.n	1a00253e <__adddf3+0xe6>
1a0027c2:	bf00      	nop

1a0027c4 <__aeabi_dmul>:
1a0027c4:	b570      	push	{r4, r5, r6, lr}
1a0027c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0027ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0027ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0027d2:	bf1d      	ittte	ne
1a0027d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0027d8:	ea94 0f0c 	teqne	r4, ip
1a0027dc:	ea95 0f0c 	teqne	r5, ip
1a0027e0:	f000 f8de 	bleq	1a0029a0 <__aeabi_dmul+0x1dc>
1a0027e4:	442c      	add	r4, r5
1a0027e6:	ea81 0603 	eor.w	r6, r1, r3
1a0027ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a0027ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a0027f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a0027f6:	bf18      	it	ne
1a0027f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a0027fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002804:	d038      	beq.n	1a002878 <__aeabi_dmul+0xb4>
1a002806:	fba0 ce02 	umull	ip, lr, r0, r2
1a00280a:	f04f 0500 	mov.w	r5, #0
1a00280e:	fbe1 e502 	umlal	lr, r5, r1, r2
1a002812:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002816:	fbe0 e503 	umlal	lr, r5, r0, r3
1a00281a:	f04f 0600 	mov.w	r6, #0
1a00281e:	fbe1 5603 	umlal	r5, r6, r1, r3
1a002822:	f09c 0f00 	teq	ip, #0
1a002826:	bf18      	it	ne
1a002828:	f04e 0e01 	orrne.w	lr, lr, #1
1a00282c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a002830:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a002834:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002838:	d204      	bcs.n	1a002844 <__aeabi_dmul+0x80>
1a00283a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a00283e:	416d      	adcs	r5, r5
1a002840:	eb46 0606 	adc.w	r6, r6, r6
1a002844:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a002848:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a00284c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a002850:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a002854:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a002858:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a00285c:	bf88      	it	hi
1a00285e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002862:	d81e      	bhi.n	1a0028a2 <__aeabi_dmul+0xde>
1a002864:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a002868:	bf08      	it	eq
1a00286a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a00286e:	f150 0000 	adcs.w	r0, r0, #0
1a002872:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002876:	bd70      	pop	{r4, r5, r6, pc}
1a002878:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a00287c:	ea46 0101 	orr.w	r1, r6, r1
1a002880:	ea40 0002 	orr.w	r0, r0, r2
1a002884:	ea81 0103 	eor.w	r1, r1, r3
1a002888:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a00288c:	bfc2      	ittt	gt
1a00288e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002896:	bd70      	popgt	{r4, r5, r6, pc}
1a002898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00289c:	f04f 0e00 	mov.w	lr, #0
1a0028a0:	3c01      	subs	r4, #1
1a0028a2:	f300 80ab 	bgt.w	1a0029fc <__aeabi_dmul+0x238>
1a0028a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a0028aa:	bfde      	ittt	le
1a0028ac:	2000      	movle	r0, #0
1a0028ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a0028b2:	bd70      	pople	{r4, r5, r6, pc}
1a0028b4:	f1c4 0400 	rsb	r4, r4, #0
1a0028b8:	3c20      	subs	r4, #32
1a0028ba:	da35      	bge.n	1a002928 <__aeabi_dmul+0x164>
1a0028bc:	340c      	adds	r4, #12
1a0028be:	dc1b      	bgt.n	1a0028f8 <__aeabi_dmul+0x134>
1a0028c0:	f104 0414 	add.w	r4, r4, #20
1a0028c4:	f1c4 0520 	rsb	r5, r4, #32
1a0028c8:	fa00 f305 	lsl.w	r3, r0, r5
1a0028cc:	fa20 f004 	lsr.w	r0, r0, r4
1a0028d0:	fa01 f205 	lsl.w	r2, r1, r5
1a0028d4:	ea40 0002 	orr.w	r0, r0, r2
1a0028d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a0028dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0028e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0028e4:	fa21 f604 	lsr.w	r6, r1, r4
1a0028e8:	eb42 0106 	adc.w	r1, r2, r6
1a0028ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0028f0:	bf08      	it	eq
1a0028f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0028f6:	bd70      	pop	{r4, r5, r6, pc}
1a0028f8:	f1c4 040c 	rsb	r4, r4, #12
1a0028fc:	f1c4 0520 	rsb	r5, r4, #32
1a002900:	fa00 f304 	lsl.w	r3, r0, r4
1a002904:	fa20 f005 	lsr.w	r0, r0, r5
1a002908:	fa01 f204 	lsl.w	r2, r1, r4
1a00290c:	ea40 0002 	orr.w	r0, r0, r2
1a002910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002914:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002918:	f141 0100 	adc.w	r1, r1, #0
1a00291c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002920:	bf08      	it	eq
1a002922:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002926:	bd70      	pop	{r4, r5, r6, pc}
1a002928:	f1c4 0520 	rsb	r5, r4, #32
1a00292c:	fa00 f205 	lsl.w	r2, r0, r5
1a002930:	ea4e 0e02 	orr.w	lr, lr, r2
1a002934:	fa20 f304 	lsr.w	r3, r0, r4
1a002938:	fa01 f205 	lsl.w	r2, r1, r5
1a00293c:	ea43 0302 	orr.w	r3, r3, r2
1a002940:	fa21 f004 	lsr.w	r0, r1, r4
1a002944:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002948:	fa21 f204 	lsr.w	r2, r1, r4
1a00294c:	ea20 0002 	bic.w	r0, r0, r2
1a002950:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a002954:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002958:	bf08      	it	eq
1a00295a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00295e:	bd70      	pop	{r4, r5, r6, pc}
1a002960:	f094 0f00 	teq	r4, #0
1a002964:	d10f      	bne.n	1a002986 <__aeabi_dmul+0x1c2>
1a002966:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a00296a:	0040      	lsls	r0, r0, #1
1a00296c:	eb41 0101 	adc.w	r1, r1, r1
1a002970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002974:	bf08      	it	eq
1a002976:	3c01      	subeq	r4, #1
1a002978:	d0f7      	beq.n	1a00296a <__aeabi_dmul+0x1a6>
1a00297a:	ea41 0106 	orr.w	r1, r1, r6
1a00297e:	f095 0f00 	teq	r5, #0
1a002982:	bf18      	it	ne
1a002984:	4770      	bxne	lr
1a002986:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a00298a:	0052      	lsls	r2, r2, #1
1a00298c:	eb43 0303 	adc.w	r3, r3, r3
1a002990:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a002994:	bf08      	it	eq
1a002996:	3d01      	subeq	r5, #1
1a002998:	d0f7      	beq.n	1a00298a <__aeabi_dmul+0x1c6>
1a00299a:	ea43 0306 	orr.w	r3, r3, r6
1a00299e:	4770      	bx	lr
1a0029a0:	ea94 0f0c 	teq	r4, ip
1a0029a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0029a8:	bf18      	it	ne
1a0029aa:	ea95 0f0c 	teqne	r5, ip
1a0029ae:	d00c      	beq.n	1a0029ca <__aeabi_dmul+0x206>
1a0029b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0029b4:	bf18      	it	ne
1a0029b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0029ba:	d1d1      	bne.n	1a002960 <__aeabi_dmul+0x19c>
1a0029bc:	ea81 0103 	eor.w	r1, r1, r3
1a0029c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0029c4:	f04f 0000 	mov.w	r0, #0
1a0029c8:	bd70      	pop	{r4, r5, r6, pc}
1a0029ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0029ce:	bf06      	itte	eq
1a0029d0:	4610      	moveq	r0, r2
1a0029d2:	4619      	moveq	r1, r3
1a0029d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0029d8:	d019      	beq.n	1a002a0e <__aeabi_dmul+0x24a>
1a0029da:	ea94 0f0c 	teq	r4, ip
1a0029de:	d102      	bne.n	1a0029e6 <__aeabi_dmul+0x222>
1a0029e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a0029e4:	d113      	bne.n	1a002a0e <__aeabi_dmul+0x24a>
1a0029e6:	ea95 0f0c 	teq	r5, ip
1a0029ea:	d105      	bne.n	1a0029f8 <__aeabi_dmul+0x234>
1a0029ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a0029f0:	bf1c      	itt	ne
1a0029f2:	4610      	movne	r0, r2
1a0029f4:	4619      	movne	r1, r3
1a0029f6:	d10a      	bne.n	1a002a0e <__aeabi_dmul+0x24a>
1a0029f8:	ea81 0103 	eor.w	r1, r1, r3
1a0029fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002a00:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002a04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002a08:	f04f 0000 	mov.w	r0, #0
1a002a0c:	bd70      	pop	{r4, r5, r6, pc}
1a002a0e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002a12:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002a16:	bd70      	pop	{r4, r5, r6, pc}

1a002a18 <__aeabi_ddiv>:
1a002a18:	b570      	push	{r4, r5, r6, lr}
1a002a1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002a1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002a22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002a26:	bf1d      	ittte	ne
1a002a28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002a2c:	ea94 0f0c 	teqne	r4, ip
1a002a30:	ea95 0f0c 	teqne	r5, ip
1a002a34:	f000 f8a7 	bleq	1a002b86 <__aeabi_ddiv+0x16e>
1a002a38:	eba4 0405 	sub.w	r4, r4, r5
1a002a3c:	ea81 0e03 	eor.w	lr, r1, r3
1a002a40:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002a44:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002a48:	f000 8088 	beq.w	1a002b5c <__aeabi_ddiv+0x144>
1a002a4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002a50:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a002a54:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a002a58:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a002a5c:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a002a60:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a002a64:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a002a68:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a002a6c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a002a70:	429d      	cmp	r5, r3
1a002a72:	bf08      	it	eq
1a002a74:	4296      	cmpeq	r6, r2
1a002a76:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a002a7a:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a002a7e:	d202      	bcs.n	1a002a86 <__aeabi_ddiv+0x6e>
1a002a80:	085b      	lsrs	r3, r3, #1
1a002a82:	ea4f 0232 	mov.w	r2, r2, rrx
1a002a86:	1ab6      	subs	r6, r6, r2
1a002a88:	eb65 0503 	sbc.w	r5, r5, r3
1a002a8c:	085b      	lsrs	r3, r3, #1
1a002a8e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002a92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a002a96:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a002a9a:	ebb6 0e02 	subs.w	lr, r6, r2
1a002a9e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002aa2:	bf22      	ittt	cs
1a002aa4:	1ab6      	subcs	r6, r6, r2
1a002aa6:	4675      	movcs	r5, lr
1a002aa8:	ea40 000c 	orrcs.w	r0, r0, ip
1a002aac:	085b      	lsrs	r3, r3, #1
1a002aae:	ea4f 0232 	mov.w	r2, r2, rrx
1a002ab2:	ebb6 0e02 	subs.w	lr, r6, r2
1a002ab6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002aba:	bf22      	ittt	cs
1a002abc:	1ab6      	subcs	r6, r6, r2
1a002abe:	4675      	movcs	r5, lr
1a002ac0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a002ac4:	085b      	lsrs	r3, r3, #1
1a002ac6:	ea4f 0232 	mov.w	r2, r2, rrx
1a002aca:	ebb6 0e02 	subs.w	lr, r6, r2
1a002ace:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002ad2:	bf22      	ittt	cs
1a002ad4:	1ab6      	subcs	r6, r6, r2
1a002ad6:	4675      	movcs	r5, lr
1a002ad8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a002adc:	085b      	lsrs	r3, r3, #1
1a002ade:	ea4f 0232 	mov.w	r2, r2, rrx
1a002ae2:	ebb6 0e02 	subs.w	lr, r6, r2
1a002ae6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002aea:	bf22      	ittt	cs
1a002aec:	1ab6      	subcs	r6, r6, r2
1a002aee:	4675      	movcs	r5, lr
1a002af0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002af4:	ea55 0e06 	orrs.w	lr, r5, r6
1a002af8:	d018      	beq.n	1a002b2c <__aeabi_ddiv+0x114>
1a002afa:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a002afe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a002b02:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002b06:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a002b0a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a002b0e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a002b12:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002b16:	d1c0      	bne.n	1a002a9a <__aeabi_ddiv+0x82>
1a002b18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002b1c:	d10b      	bne.n	1a002b36 <__aeabi_ddiv+0x11e>
1a002b1e:	ea41 0100 	orr.w	r1, r1, r0
1a002b22:	f04f 0000 	mov.w	r0, #0
1a002b26:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a002b2a:	e7b6      	b.n	1a002a9a <__aeabi_ddiv+0x82>
1a002b2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002b30:	bf04      	itt	eq
1a002b32:	4301      	orreq	r1, r0
1a002b34:	2000      	moveq	r0, #0
1a002b36:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002b3a:	bf88      	it	hi
1a002b3c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002b40:	f63f aeaf 	bhi.w	1a0028a2 <__aeabi_dmul+0xde>
1a002b44:	ebb5 0c03 	subs.w	ip, r5, r3
1a002b48:	bf04      	itt	eq
1a002b4a:	ebb6 0c02 	subseq.w	ip, r6, r2
1a002b4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002b52:	f150 0000 	adcs.w	r0, r0, #0
1a002b56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002b5a:	bd70      	pop	{r4, r5, r6, pc}
1a002b5c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a002b60:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a002b64:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a002b68:	bfc2      	ittt	gt
1a002b6a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002b6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002b72:	bd70      	popgt	{r4, r5, r6, pc}
1a002b74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002b78:	f04f 0e00 	mov.w	lr, #0
1a002b7c:	3c01      	subs	r4, #1
1a002b7e:	e690      	b.n	1a0028a2 <__aeabi_dmul+0xde>
1a002b80:	ea45 0e06 	orr.w	lr, r5, r6
1a002b84:	e68d      	b.n	1a0028a2 <__aeabi_dmul+0xde>
1a002b86:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002b8a:	ea94 0f0c 	teq	r4, ip
1a002b8e:	bf08      	it	eq
1a002b90:	ea95 0f0c 	teqeq	r5, ip
1a002b94:	f43f af3b 	beq.w	1a002a0e <__aeabi_dmul+0x24a>
1a002b98:	ea94 0f0c 	teq	r4, ip
1a002b9c:	d10a      	bne.n	1a002bb4 <__aeabi_ddiv+0x19c>
1a002b9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002ba2:	f47f af34 	bne.w	1a002a0e <__aeabi_dmul+0x24a>
1a002ba6:	ea95 0f0c 	teq	r5, ip
1a002baa:	f47f af25 	bne.w	1a0029f8 <__aeabi_dmul+0x234>
1a002bae:	4610      	mov	r0, r2
1a002bb0:	4619      	mov	r1, r3
1a002bb2:	e72c      	b.n	1a002a0e <__aeabi_dmul+0x24a>
1a002bb4:	ea95 0f0c 	teq	r5, ip
1a002bb8:	d106      	bne.n	1a002bc8 <__aeabi_ddiv+0x1b0>
1a002bba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002bbe:	f43f aefd 	beq.w	1a0029bc <__aeabi_dmul+0x1f8>
1a002bc2:	4610      	mov	r0, r2
1a002bc4:	4619      	mov	r1, r3
1a002bc6:	e722      	b.n	1a002a0e <__aeabi_dmul+0x24a>
1a002bc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002bcc:	bf18      	it	ne
1a002bce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002bd2:	f47f aec5 	bne.w	1a002960 <__aeabi_dmul+0x19c>
1a002bd6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a002bda:	f47f af0d 	bne.w	1a0029f8 <__aeabi_dmul+0x234>
1a002bde:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a002be2:	f47f aeeb 	bne.w	1a0029bc <__aeabi_dmul+0x1f8>
1a002be6:	e712      	b.n	1a002a0e <__aeabi_dmul+0x24a>

1a002be8 <__gedf2>:
1a002be8:	f04f 3cff 	mov.w	ip, #4294967295
1a002bec:	e006      	b.n	1a002bfc <__cmpdf2+0x4>
1a002bee:	bf00      	nop

1a002bf0 <__ledf2>:
1a002bf0:	f04f 0c01 	mov.w	ip, #1
1a002bf4:	e002      	b.n	1a002bfc <__cmpdf2+0x4>
1a002bf6:	bf00      	nop

1a002bf8 <__cmpdf2>:
1a002bf8:	f04f 0c01 	mov.w	ip, #1
1a002bfc:	f84d cd04 	str.w	ip, [sp, #-4]!
1a002c00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002c04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002c08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002c0c:	bf18      	it	ne
1a002c0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a002c12:	d01b      	beq.n	1a002c4c <__cmpdf2+0x54>
1a002c14:	b001      	add	sp, #4
1a002c16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a002c1a:	bf0c      	ite	eq
1a002c1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a002c20:	ea91 0f03 	teqne	r1, r3
1a002c24:	bf02      	ittt	eq
1a002c26:	ea90 0f02 	teqeq	r0, r2
1a002c2a:	2000      	moveq	r0, #0
1a002c2c:	4770      	bxeq	lr
1a002c2e:	f110 0f00 	cmn.w	r0, #0
1a002c32:	ea91 0f03 	teq	r1, r3
1a002c36:	bf58      	it	pl
1a002c38:	4299      	cmppl	r1, r3
1a002c3a:	bf08      	it	eq
1a002c3c:	4290      	cmpeq	r0, r2
1a002c3e:	bf2c      	ite	cs
1a002c40:	17d8      	asrcs	r0, r3, #31
1a002c42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a002c46:	f040 0001 	orr.w	r0, r0, #1
1a002c4a:	4770      	bx	lr
1a002c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002c54:	d102      	bne.n	1a002c5c <__cmpdf2+0x64>
1a002c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a002c5a:	d107      	bne.n	1a002c6c <__cmpdf2+0x74>
1a002c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002c64:	d1d6      	bne.n	1a002c14 <__cmpdf2+0x1c>
1a002c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a002c6a:	d0d3      	beq.n	1a002c14 <__cmpdf2+0x1c>
1a002c6c:	f85d 0b04 	ldr.w	r0, [sp], #4
1a002c70:	4770      	bx	lr
1a002c72:	bf00      	nop

1a002c74 <__aeabi_cdrcmple>:
1a002c74:	4684      	mov	ip, r0
1a002c76:	4610      	mov	r0, r2
1a002c78:	4662      	mov	r2, ip
1a002c7a:	468c      	mov	ip, r1
1a002c7c:	4619      	mov	r1, r3
1a002c7e:	4663      	mov	r3, ip
1a002c80:	e000      	b.n	1a002c84 <__aeabi_cdcmpeq>
1a002c82:	bf00      	nop

1a002c84 <__aeabi_cdcmpeq>:
1a002c84:	b501      	push	{r0, lr}
1a002c86:	f7ff ffb7 	bl	1a002bf8 <__cmpdf2>
1a002c8a:	2800      	cmp	r0, #0
1a002c8c:	bf48      	it	mi
1a002c8e:	f110 0f00 	cmnmi.w	r0, #0
1a002c92:	bd01      	pop	{r0, pc}

1a002c94 <__aeabi_dcmpeq>:
1a002c94:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002c98:	f7ff fff4 	bl	1a002c84 <__aeabi_cdcmpeq>
1a002c9c:	bf0c      	ite	eq
1a002c9e:	2001      	moveq	r0, #1
1a002ca0:	2000      	movne	r0, #0
1a002ca2:	f85d fb08 	ldr.w	pc, [sp], #8
1a002ca6:	bf00      	nop

1a002ca8 <__aeabi_dcmplt>:
1a002ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002cac:	f7ff ffea 	bl	1a002c84 <__aeabi_cdcmpeq>
1a002cb0:	bf34      	ite	cc
1a002cb2:	2001      	movcc	r0, #1
1a002cb4:	2000      	movcs	r0, #0
1a002cb6:	f85d fb08 	ldr.w	pc, [sp], #8
1a002cba:	bf00      	nop

1a002cbc <__aeabi_dcmple>:
1a002cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002cc0:	f7ff ffe0 	bl	1a002c84 <__aeabi_cdcmpeq>
1a002cc4:	bf94      	ite	ls
1a002cc6:	2001      	movls	r0, #1
1a002cc8:	2000      	movhi	r0, #0
1a002cca:	f85d fb08 	ldr.w	pc, [sp], #8
1a002cce:	bf00      	nop

1a002cd0 <__aeabi_dcmpge>:
1a002cd0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002cd4:	f7ff ffce 	bl	1a002c74 <__aeabi_cdrcmple>
1a002cd8:	bf94      	ite	ls
1a002cda:	2001      	movls	r0, #1
1a002cdc:	2000      	movhi	r0, #0
1a002cde:	f85d fb08 	ldr.w	pc, [sp], #8
1a002ce2:	bf00      	nop

1a002ce4 <__aeabi_dcmpgt>:
1a002ce4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002ce8:	f7ff ffc4 	bl	1a002c74 <__aeabi_cdrcmple>
1a002cec:	bf34      	ite	cc
1a002cee:	2001      	movcc	r0, #1
1a002cf0:	2000      	movcs	r0, #0
1a002cf2:	f85d fb08 	ldr.w	pc, [sp], #8
1a002cf6:	bf00      	nop

1a002cf8 <__aeabi_d2iz>:
1a002cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a002cfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a002d00:	d215      	bcs.n	1a002d2e <__aeabi_d2iz+0x36>
1a002d02:	d511      	bpl.n	1a002d28 <__aeabi_d2iz+0x30>
1a002d04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a002d08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a002d0c:	d912      	bls.n	1a002d34 <__aeabi_d2iz+0x3c>
1a002d0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a002d12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a002d16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a002d1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a002d1e:	fa23 f002 	lsr.w	r0, r3, r2
1a002d22:	bf18      	it	ne
1a002d24:	4240      	negne	r0, r0
1a002d26:	4770      	bx	lr
1a002d28:	f04f 0000 	mov.w	r0, #0
1a002d2c:	4770      	bx	lr
1a002d2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a002d32:	d105      	bne.n	1a002d40 <__aeabi_d2iz+0x48>
1a002d34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a002d38:	bf08      	it	eq
1a002d3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a002d3e:	4770      	bx	lr
1a002d40:	f04f 0000 	mov.w	r0, #0
1a002d44:	4770      	bx	lr
1a002d46:	bf00      	nop

1a002d48 <__aeabi_uldivmod>:
1a002d48:	b953      	cbnz	r3, 1a002d60 <__aeabi_uldivmod+0x18>
1a002d4a:	b94a      	cbnz	r2, 1a002d60 <__aeabi_uldivmod+0x18>
1a002d4c:	2900      	cmp	r1, #0
1a002d4e:	bf08      	it	eq
1a002d50:	2800      	cmpeq	r0, #0
1a002d52:	bf1c      	itt	ne
1a002d54:	f04f 31ff 	movne.w	r1, #4294967295
1a002d58:	f04f 30ff 	movne.w	r0, #4294967295
1a002d5c:	f000 b974 	b.w	1a003048 <__aeabi_idiv0>
1a002d60:	f1ad 0c08 	sub.w	ip, sp, #8
1a002d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002d68:	f000 f806 	bl	1a002d78 <__udivmoddi4>
1a002d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002d74:	b004      	add	sp, #16
1a002d76:	4770      	bx	lr

1a002d78 <__udivmoddi4>:
1a002d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002d7c:	9e08      	ldr	r6, [sp, #32]
1a002d7e:	4604      	mov	r4, r0
1a002d80:	4688      	mov	r8, r1
1a002d82:	2b00      	cmp	r3, #0
1a002d84:	f040 8085 	bne.w	1a002e92 <__udivmoddi4+0x11a>
1a002d88:	428a      	cmp	r2, r1
1a002d8a:	4615      	mov	r5, r2
1a002d8c:	d948      	bls.n	1a002e20 <__udivmoddi4+0xa8>
1a002d8e:	fab2 f282 	clz	r2, r2
1a002d92:	b14a      	cbz	r2, 1a002da8 <__udivmoddi4+0x30>
1a002d94:	f1c2 0720 	rsb	r7, r2, #32
1a002d98:	fa01 f302 	lsl.w	r3, r1, r2
1a002d9c:	fa20 f707 	lsr.w	r7, r0, r7
1a002da0:	4095      	lsls	r5, r2
1a002da2:	ea47 0803 	orr.w	r8, r7, r3
1a002da6:	4094      	lsls	r4, r2
1a002da8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002dac:	0c23      	lsrs	r3, r4, #16
1a002dae:	fbb8 f7fe 	udiv	r7, r8, lr
1a002db2:	fa1f fc85 	uxth.w	ip, r5
1a002db6:	fb0e 8817 	mls	r8, lr, r7, r8
1a002dba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002dbe:	fb07 f10c 	mul.w	r1, r7, ip
1a002dc2:	4299      	cmp	r1, r3
1a002dc4:	d909      	bls.n	1a002dda <__udivmoddi4+0x62>
1a002dc6:	18eb      	adds	r3, r5, r3
1a002dc8:	f107 30ff 	add.w	r0, r7, #4294967295
1a002dcc:	f080 80e3 	bcs.w	1a002f96 <__udivmoddi4+0x21e>
1a002dd0:	4299      	cmp	r1, r3
1a002dd2:	f240 80e0 	bls.w	1a002f96 <__udivmoddi4+0x21e>
1a002dd6:	3f02      	subs	r7, #2
1a002dd8:	442b      	add	r3, r5
1a002dda:	1a5b      	subs	r3, r3, r1
1a002ddc:	b2a4      	uxth	r4, r4
1a002dde:	fbb3 f0fe 	udiv	r0, r3, lr
1a002de2:	fb0e 3310 	mls	r3, lr, r0, r3
1a002de6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002dea:	fb00 fc0c 	mul.w	ip, r0, ip
1a002dee:	45a4      	cmp	ip, r4
1a002df0:	d909      	bls.n	1a002e06 <__udivmoddi4+0x8e>
1a002df2:	192c      	adds	r4, r5, r4
1a002df4:	f100 33ff 	add.w	r3, r0, #4294967295
1a002df8:	f080 80cb 	bcs.w	1a002f92 <__udivmoddi4+0x21a>
1a002dfc:	45a4      	cmp	ip, r4
1a002dfe:	f240 80c8 	bls.w	1a002f92 <__udivmoddi4+0x21a>
1a002e02:	3802      	subs	r0, #2
1a002e04:	442c      	add	r4, r5
1a002e06:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002e0a:	eba4 040c 	sub.w	r4, r4, ip
1a002e0e:	2700      	movs	r7, #0
1a002e10:	b11e      	cbz	r6, 1a002e1a <__udivmoddi4+0xa2>
1a002e12:	40d4      	lsrs	r4, r2
1a002e14:	2300      	movs	r3, #0
1a002e16:	e9c6 4300 	strd	r4, r3, [r6]
1a002e1a:	4639      	mov	r1, r7
1a002e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002e20:	2a00      	cmp	r2, #0
1a002e22:	d053      	beq.n	1a002ecc <__udivmoddi4+0x154>
1a002e24:	fab2 f282 	clz	r2, r2
1a002e28:	2a00      	cmp	r2, #0
1a002e2a:	f040 80b6 	bne.w	1a002f9a <__udivmoddi4+0x222>
1a002e2e:	1b49      	subs	r1, r1, r5
1a002e30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002e34:	fa1f f885 	uxth.w	r8, r5
1a002e38:	2701      	movs	r7, #1
1a002e3a:	fbb1 fcfe 	udiv	ip, r1, lr
1a002e3e:	0c23      	lsrs	r3, r4, #16
1a002e40:	fb0e 111c 	mls	r1, lr, ip, r1
1a002e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002e48:	fb08 f10c 	mul.w	r1, r8, ip
1a002e4c:	4299      	cmp	r1, r3
1a002e4e:	d907      	bls.n	1a002e60 <__udivmoddi4+0xe8>
1a002e50:	18eb      	adds	r3, r5, r3
1a002e52:	f10c 30ff 	add.w	r0, ip, #4294967295
1a002e56:	d202      	bcs.n	1a002e5e <__udivmoddi4+0xe6>
1a002e58:	4299      	cmp	r1, r3
1a002e5a:	f200 80ec 	bhi.w	1a003036 <__udivmoddi4+0x2be>
1a002e5e:	4684      	mov	ip, r0
1a002e60:	1a59      	subs	r1, r3, r1
1a002e62:	b2a3      	uxth	r3, r4
1a002e64:	fbb1 f0fe 	udiv	r0, r1, lr
1a002e68:	fb0e 1410 	mls	r4, lr, r0, r1
1a002e6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002e70:	fb08 f800 	mul.w	r8, r8, r0
1a002e74:	45a0      	cmp	r8, r4
1a002e76:	d907      	bls.n	1a002e88 <__udivmoddi4+0x110>
1a002e78:	192c      	adds	r4, r5, r4
1a002e7a:	f100 33ff 	add.w	r3, r0, #4294967295
1a002e7e:	d202      	bcs.n	1a002e86 <__udivmoddi4+0x10e>
1a002e80:	45a0      	cmp	r8, r4
1a002e82:	f200 80dc 	bhi.w	1a00303e <__udivmoddi4+0x2c6>
1a002e86:	4618      	mov	r0, r3
1a002e88:	eba4 0408 	sub.w	r4, r4, r8
1a002e8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002e90:	e7be      	b.n	1a002e10 <__udivmoddi4+0x98>
1a002e92:	428b      	cmp	r3, r1
1a002e94:	d908      	bls.n	1a002ea8 <__udivmoddi4+0x130>
1a002e96:	2e00      	cmp	r6, #0
1a002e98:	d078      	beq.n	1a002f8c <__udivmoddi4+0x214>
1a002e9a:	2700      	movs	r7, #0
1a002e9c:	e9c6 0100 	strd	r0, r1, [r6]
1a002ea0:	4638      	mov	r0, r7
1a002ea2:	4639      	mov	r1, r7
1a002ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002ea8:	fab3 f783 	clz	r7, r3
1a002eac:	b97f      	cbnz	r7, 1a002ece <__udivmoddi4+0x156>
1a002eae:	428b      	cmp	r3, r1
1a002eb0:	d302      	bcc.n	1a002eb8 <__udivmoddi4+0x140>
1a002eb2:	4282      	cmp	r2, r0
1a002eb4:	f200 80bd 	bhi.w	1a003032 <__udivmoddi4+0x2ba>
1a002eb8:	1a84      	subs	r4, r0, r2
1a002eba:	eb61 0303 	sbc.w	r3, r1, r3
1a002ebe:	2001      	movs	r0, #1
1a002ec0:	4698      	mov	r8, r3
1a002ec2:	2e00      	cmp	r6, #0
1a002ec4:	d0a9      	beq.n	1a002e1a <__udivmoddi4+0xa2>
1a002ec6:	e9c6 4800 	strd	r4, r8, [r6]
1a002eca:	e7a6      	b.n	1a002e1a <__udivmoddi4+0xa2>
1a002ecc:	deff      	udf	#255	; 0xff
1a002ece:	f1c7 0520 	rsb	r5, r7, #32
1a002ed2:	40bb      	lsls	r3, r7
1a002ed4:	fa22 fc05 	lsr.w	ip, r2, r5
1a002ed8:	ea4c 0c03 	orr.w	ip, ip, r3
1a002edc:	fa01 f407 	lsl.w	r4, r1, r7
1a002ee0:	fa20 f805 	lsr.w	r8, r0, r5
1a002ee4:	fa21 f305 	lsr.w	r3, r1, r5
1a002ee8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a002eec:	ea48 0404 	orr.w	r4, r8, r4
1a002ef0:	fbb3 f9fe 	udiv	r9, r3, lr
1a002ef4:	0c21      	lsrs	r1, r4, #16
1a002ef6:	fb0e 3319 	mls	r3, lr, r9, r3
1a002efa:	fa1f f88c 	uxth.w	r8, ip
1a002efe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002f02:	fb09 fa08 	mul.w	sl, r9, r8
1a002f06:	459a      	cmp	sl, r3
1a002f08:	fa02 f207 	lsl.w	r2, r2, r7
1a002f0c:	fa00 f107 	lsl.w	r1, r0, r7
1a002f10:	d90b      	bls.n	1a002f2a <__udivmoddi4+0x1b2>
1a002f12:	eb1c 0303 	adds.w	r3, ip, r3
1a002f16:	f109 30ff 	add.w	r0, r9, #4294967295
1a002f1a:	f080 8088 	bcs.w	1a00302e <__udivmoddi4+0x2b6>
1a002f1e:	459a      	cmp	sl, r3
1a002f20:	f240 8085 	bls.w	1a00302e <__udivmoddi4+0x2b6>
1a002f24:	f1a9 0902 	sub.w	r9, r9, #2
1a002f28:	4463      	add	r3, ip
1a002f2a:	eba3 030a 	sub.w	r3, r3, sl
1a002f2e:	b2a4      	uxth	r4, r4
1a002f30:	fbb3 f0fe 	udiv	r0, r3, lr
1a002f34:	fb0e 3310 	mls	r3, lr, r0, r3
1a002f38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002f3c:	fb00 f808 	mul.w	r8, r0, r8
1a002f40:	45a0      	cmp	r8, r4
1a002f42:	d908      	bls.n	1a002f56 <__udivmoddi4+0x1de>
1a002f44:	eb1c 0404 	adds.w	r4, ip, r4
1a002f48:	f100 33ff 	add.w	r3, r0, #4294967295
1a002f4c:	d26b      	bcs.n	1a003026 <__udivmoddi4+0x2ae>
1a002f4e:	45a0      	cmp	r8, r4
1a002f50:	d969      	bls.n	1a003026 <__udivmoddi4+0x2ae>
1a002f52:	3802      	subs	r0, #2
1a002f54:	4464      	add	r4, ip
1a002f56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002f5a:	eba4 0408 	sub.w	r4, r4, r8
1a002f5e:	fba0 8902 	umull	r8, r9, r0, r2
1a002f62:	454c      	cmp	r4, r9
1a002f64:	46c6      	mov	lr, r8
1a002f66:	464b      	mov	r3, r9
1a002f68:	d354      	bcc.n	1a003014 <__udivmoddi4+0x29c>
1a002f6a:	d051      	beq.n	1a003010 <__udivmoddi4+0x298>
1a002f6c:	2e00      	cmp	r6, #0
1a002f6e:	d069      	beq.n	1a003044 <__udivmoddi4+0x2cc>
1a002f70:	ebb1 020e 	subs.w	r2, r1, lr
1a002f74:	eb64 0403 	sbc.w	r4, r4, r3
1a002f78:	fa04 f505 	lsl.w	r5, r4, r5
1a002f7c:	fa22 f307 	lsr.w	r3, r2, r7
1a002f80:	40fc      	lsrs	r4, r7
1a002f82:	431d      	orrs	r5, r3
1a002f84:	e9c6 5400 	strd	r5, r4, [r6]
1a002f88:	2700      	movs	r7, #0
1a002f8a:	e746      	b.n	1a002e1a <__udivmoddi4+0xa2>
1a002f8c:	4637      	mov	r7, r6
1a002f8e:	4630      	mov	r0, r6
1a002f90:	e743      	b.n	1a002e1a <__udivmoddi4+0xa2>
1a002f92:	4618      	mov	r0, r3
1a002f94:	e737      	b.n	1a002e06 <__udivmoddi4+0x8e>
1a002f96:	4607      	mov	r7, r0
1a002f98:	e71f      	b.n	1a002dda <__udivmoddi4+0x62>
1a002f9a:	f1c2 0320 	rsb	r3, r2, #32
1a002f9e:	fa20 f703 	lsr.w	r7, r0, r3
1a002fa2:	4095      	lsls	r5, r2
1a002fa4:	fa01 f002 	lsl.w	r0, r1, r2
1a002fa8:	fa21 f303 	lsr.w	r3, r1, r3
1a002fac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002fb0:	4338      	orrs	r0, r7
1a002fb2:	0c01      	lsrs	r1, r0, #16
1a002fb4:	fbb3 f7fe 	udiv	r7, r3, lr
1a002fb8:	fa1f f885 	uxth.w	r8, r5
1a002fbc:	fb0e 3317 	mls	r3, lr, r7, r3
1a002fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002fc4:	fb07 f308 	mul.w	r3, r7, r8
1a002fc8:	428b      	cmp	r3, r1
1a002fca:	fa04 f402 	lsl.w	r4, r4, r2
1a002fce:	d907      	bls.n	1a002fe0 <__udivmoddi4+0x268>
1a002fd0:	1869      	adds	r1, r5, r1
1a002fd2:	f107 3cff 	add.w	ip, r7, #4294967295
1a002fd6:	d228      	bcs.n	1a00302a <__udivmoddi4+0x2b2>
1a002fd8:	428b      	cmp	r3, r1
1a002fda:	d926      	bls.n	1a00302a <__udivmoddi4+0x2b2>
1a002fdc:	3f02      	subs	r7, #2
1a002fde:	4429      	add	r1, r5
1a002fe0:	1acb      	subs	r3, r1, r3
1a002fe2:	b281      	uxth	r1, r0
1a002fe4:	fbb3 f0fe 	udiv	r0, r3, lr
1a002fe8:	fb0e 3310 	mls	r3, lr, r0, r3
1a002fec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002ff0:	fb00 f308 	mul.w	r3, r0, r8
1a002ff4:	428b      	cmp	r3, r1
1a002ff6:	d907      	bls.n	1a003008 <__udivmoddi4+0x290>
1a002ff8:	1869      	adds	r1, r5, r1
1a002ffa:	f100 3cff 	add.w	ip, r0, #4294967295
1a002ffe:	d210      	bcs.n	1a003022 <__udivmoddi4+0x2aa>
1a003000:	428b      	cmp	r3, r1
1a003002:	d90e      	bls.n	1a003022 <__udivmoddi4+0x2aa>
1a003004:	3802      	subs	r0, #2
1a003006:	4429      	add	r1, r5
1a003008:	1ac9      	subs	r1, r1, r3
1a00300a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00300e:	e714      	b.n	1a002e3a <__udivmoddi4+0xc2>
1a003010:	4541      	cmp	r1, r8
1a003012:	d2ab      	bcs.n	1a002f6c <__udivmoddi4+0x1f4>
1a003014:	ebb8 0e02 	subs.w	lr, r8, r2
1a003018:	eb69 020c 	sbc.w	r2, r9, ip
1a00301c:	3801      	subs	r0, #1
1a00301e:	4613      	mov	r3, r2
1a003020:	e7a4      	b.n	1a002f6c <__udivmoddi4+0x1f4>
1a003022:	4660      	mov	r0, ip
1a003024:	e7f0      	b.n	1a003008 <__udivmoddi4+0x290>
1a003026:	4618      	mov	r0, r3
1a003028:	e795      	b.n	1a002f56 <__udivmoddi4+0x1de>
1a00302a:	4667      	mov	r7, ip
1a00302c:	e7d8      	b.n	1a002fe0 <__udivmoddi4+0x268>
1a00302e:	4681      	mov	r9, r0
1a003030:	e77b      	b.n	1a002f2a <__udivmoddi4+0x1b2>
1a003032:	4638      	mov	r0, r7
1a003034:	e745      	b.n	1a002ec2 <__udivmoddi4+0x14a>
1a003036:	f1ac 0c02 	sub.w	ip, ip, #2
1a00303a:	442b      	add	r3, r5
1a00303c:	e710      	b.n	1a002e60 <__udivmoddi4+0xe8>
1a00303e:	3802      	subs	r0, #2
1a003040:	442c      	add	r4, r5
1a003042:	e721      	b.n	1a002e88 <__udivmoddi4+0x110>
1a003044:	4637      	mov	r7, r6
1a003046:	e6e8      	b.n	1a002e1a <__udivmoddi4+0xa2>

1a003048 <__aeabi_idiv0>:
1a003048:	4770      	bx	lr
1a00304a:	bf00      	nop

1a00304c <__libc_init_array>:
1a00304c:	b570      	push	{r4, r5, r6, lr}
1a00304e:	4d0d      	ldr	r5, [pc, #52]	; (1a003084 <__libc_init_array+0x38>)
1a003050:	4c0d      	ldr	r4, [pc, #52]	; (1a003088 <__libc_init_array+0x3c>)
1a003052:	1b64      	subs	r4, r4, r5
1a003054:	10a4      	asrs	r4, r4, #2
1a003056:	2600      	movs	r6, #0
1a003058:	42a6      	cmp	r6, r4
1a00305a:	d109      	bne.n	1a003070 <__libc_init_array+0x24>
1a00305c:	4d0b      	ldr	r5, [pc, #44]	; (1a00308c <__libc_init_array+0x40>)
1a00305e:	4c0c      	ldr	r4, [pc, #48]	; (1a003090 <__libc_init_array+0x44>)
1a003060:	f7fd fac9 	bl	1a0005f6 <_init>
1a003064:	1b64      	subs	r4, r4, r5
1a003066:	10a4      	asrs	r4, r4, #2
1a003068:	2600      	movs	r6, #0
1a00306a:	42a6      	cmp	r6, r4
1a00306c:	d105      	bne.n	1a00307a <__libc_init_array+0x2e>
1a00306e:	bd70      	pop	{r4, r5, r6, pc}
1a003070:	f855 3b04 	ldr.w	r3, [r5], #4
1a003074:	4798      	blx	r3
1a003076:	3601      	adds	r6, #1
1a003078:	e7ee      	b.n	1a003058 <__libc_init_array+0xc>
1a00307a:	f855 3b04 	ldr.w	r3, [r5], #4
1a00307e:	4798      	blx	r3
1a003080:	3601      	adds	r6, #1
1a003082:	e7f2      	b.n	1a00306a <__libc_init_array+0x1e>
1a003084:	1a0033d0 	.word	0x1a0033d0
1a003088:	1a0033d0 	.word	0x1a0033d0
1a00308c:	1a0033d0 	.word	0x1a0033d0
1a003090:	1a0033d4 	.word	0x1a0033d4

1a003094 <memset>:
1a003094:	4402      	add	r2, r0
1a003096:	4603      	mov	r3, r0
1a003098:	4293      	cmp	r3, r2
1a00309a:	d100      	bne.n	1a00309e <memset+0xa>
1a00309c:	4770      	bx	lr
1a00309e:	f803 1b01 	strb.w	r1, [r3], #1
1a0030a2:	e7f9      	b.n	1a003098 <memset+0x4>

1a0030a4 <InitClkStates>:
1a0030a4:	0f01 0101                                   ....

1a0030a8 <pinmuxing>:
1a0030a8:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a0030b8:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a0030c8:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a0030d8:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a0030e8:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a0030f8:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a003108:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a003118:	0206 0057                                   ..W.

1a00311c <ExtRateIn>:
1a00311c:	0000 0000                                   ....

1a003120 <GpioButtons>:
1a003120:	0400 0800 0900 0901                         ........

1a003128 <GpioLeds>:
1a003128:	0005 0105 0205 0e00 0b01 0c01               ............

1a003134 <GpioPorts>:
1a003134:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a003144:	0802 ffff                                   ....

1a003148 <OscRateIn>:
1a003148:	1b00 00b7                                   ....

1a00314c <InitClkStates>:
1a00314c:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a00315c:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a00316c:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a00317c:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a00318c:	111a 0001 111b 0001 0201 0804 0f03 0f0f     ................
1a00319c:	00ff 0000                                   ....

1a0031a0 <periph_to_base>:
1a0031a0:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a0031b0:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a0031c0:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a0031d0:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a0031e0:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a0031f0:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a003200:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a00320c <UART_BClock>:
1a00320c:	01c2 01a2 0182 0162                         ......b.

1a003214 <UART_PClock>:
1a003214:	0081 0082 00a1 00a2                         ........

1a00321c <gpioPinsInit>:
1a00321c:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a00322c:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a00323c:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a00324c:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a00325c:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a00326c:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a00327c:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a00328c:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a00329c:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a0032ac:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a0032bc:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a0032cc:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a0032dc:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a0032ec:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a0032fc:	020b 000c 0c01 ffff                         ........

1a003304 <timer_sd>:
1a003304:	4000 4008 0020 0000 000c 0000 5000 4008     .@.@ ........P.@
1a003314:	0021 0000 000d 0000 3000 400c 0022 0000     !........0.@"...
1a003324:	000e 0000 4000 400c 0023 0000 000f 0000     .....@.@#.......

1a003334 <lpcUarts>:
1a003334:	1000 4008 0406 0602 0205 0018 1000 4008     ...@...........@
1a003344:	0509 0907 0706 0018 2000 4008 0000 0000     ......... .@....
1a003354:	0000 0019 1000 400c 0107 0706 0602 001a     .......@........
1a003364:	1000 400c 0f01 0101 0110 001a 2000 400c     ...@......... .@
1a003374:	0302 0202 0204 001b                         ........

1a00337c <servoMap>:
1a00337c:	0200 0403 100b 1211 ff1f ffff               ............

1a003388 <ultrasonicSensorsIrqMap>:
1a003388:	0100 ff02 ffff ffff                         ........

1a003390 <atanhi>:
1a003390:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
1a0033a0:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

1a0033b0 <atanlo>:
1a0033b0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
1a0033c0:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<
